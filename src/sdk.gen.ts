// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ApiAuthEduteamsCompleteRetrieveData, ApiAuthEduteamsCompleteRetrieveResponses, ApiAuthEduteamsInitRetrieveData, ApiAuthEduteamsInitRetrieveResponses, ApiAuthKeycloakCompleteRetrieveData, ApiAuthKeycloakCompleteRetrieveResponses, ApiAuthKeycloakInitRetrieveData, ApiAuthKeycloakInitRetrieveResponses, ApiAuthLogoutData, ApiAuthLogoutResponses, ApiAuthPasswordData, ApiAuthPasswordResponses, ApiAuthPasswordErrors, ApiAuthSaml2LoginData, ApiAuthSaml2LoginResponses, ApiAuthSaml2LoginCompleteData, ApiAuthSaml2LoginCompleteResponses, ApiAuthSaml2LogoutRetrieveData, ApiAuthSaml2LogoutRetrieveResponses, ApiAuthSaml2LogoutCompleteRetrieveData, ApiAuthSaml2LogoutCompleteRetrieveResponses, ApiAuthSaml2LogoutCompleteData, ApiAuthSaml2LogoutCompleteResponses, ApiAuthSaml2ProvidersListData, ApiAuthSaml2ProvidersListResponses, ApiAuthTaraCompleteRetrieveData, ApiAuthTaraCompleteRetrieveResponses, ApiAuthTaraInitRetrieveData, ApiAuthTaraInitRetrieveResponses, AccessSubnetsListData, AccessSubnetsListResponses, AccessSubnetsHeadData, AccessSubnetsHeadResponses, AccessSubnetsCreateData, AccessSubnetsCreateResponses, AccessSubnetsDestroyData, AccessSubnetsDestroyResponses, AccessSubnetsRetrieveData, AccessSubnetsRetrieveResponses, AccessSubnetsPartialUpdateData, AccessSubnetsPartialUpdateResponses, AccessSubnetsUpdateData, AccessSubnetsUpdateResponses, AdminAnnouncementsListData, AdminAnnouncementsListResponses, AdminAnnouncementsHeadData, AdminAnnouncementsHeadResponses, AdminAnnouncementsCreateData, AdminAnnouncementsCreateResponses, AdminAnnouncementsDestroyData, AdminAnnouncementsDestroyResponses, AdminAnnouncementsRetrieveData, AdminAnnouncementsRetrieveResponses, AdminAnnouncementsPartialUpdateData, AdminAnnouncementsPartialUpdateResponses, AdminAnnouncementsUpdateData, AdminAnnouncementsUpdateResponses, AuthTokensListData, AuthTokensListResponses, AuthTokensHeadData, AuthTokensHeadResponses, AuthTokensDestroyData, AuthTokensDestroyResponses, AuthTokensRetrieveData, AuthTokensRetrieveResponses, AuthValimoCreateData, AuthValimoCreateResponses, AuthValimoResultData, AuthValimoResultResponses, AutoprovisioningRulesListData, AutoprovisioningRulesListResponses, AutoprovisioningRulesHeadData, AutoprovisioningRulesHeadResponses, AutoprovisioningRulesCreateData, AutoprovisioningRulesCreateResponses, AutoprovisioningRulesDestroyData, AutoprovisioningRulesDestroyResponses, AutoprovisioningRulesRetrieveData, AutoprovisioningRulesRetrieveResponses, AutoprovisioningRulesPartialUpdateData, AutoprovisioningRulesPartialUpdateResponses, AutoprovisioningRulesUpdateData, AutoprovisioningRulesUpdateResponses, AwsImagesListData, AwsImagesListResponses, AwsImagesHeadData, AwsImagesHeadResponses, AwsImagesRetrieveData, AwsImagesRetrieveResponses, AwsInstancesListData, AwsInstancesListResponses, AwsInstancesHeadData, AwsInstancesHeadResponses, AwsInstancesCreateData, AwsInstancesCreateResponses, AwsInstancesDestroyData, AwsInstancesDestroyResponses, AwsInstancesRetrieveData, AwsInstancesRetrieveResponses, AwsInstancesPartialUpdateData, AwsInstancesPartialUpdateResponses, AwsInstancesUpdateData, AwsInstancesUpdateResponses, AwsInstancesPullData, AwsInstancesPullResponses, AwsInstancesResizeData, AwsInstancesResizeResponses, AwsInstancesRestartData, AwsInstancesRestartResponses, AwsInstancesStartData, AwsInstancesStartResponses, AwsInstancesStopData, AwsInstancesStopResponses, AwsInstancesUnlinkData, AwsInstancesUnlinkResponses, AwsRegionsListData, AwsRegionsListResponses, AwsRegionsHeadData, AwsRegionsHeadResponses, AwsRegionsRetrieveData, AwsRegionsRetrieveResponses, AwsSizesListData, AwsSizesListResponses, AwsSizesHeadData, AwsSizesHeadResponses, AwsSizesRetrieveData, AwsSizesRetrieveResponses, AwsVolumesListData, AwsVolumesListResponses, AwsVolumesHeadData, AwsVolumesHeadResponses, AwsVolumesCreateData, AwsVolumesCreateResponses, AwsVolumesDestroyData, AwsVolumesDestroyResponses, AwsVolumesRetrieveData, AwsVolumesRetrieveResponses, AwsVolumesPartialUpdateData, AwsVolumesPartialUpdateResponses, AwsVolumesUpdateData, AwsVolumesUpdateResponses, AwsVolumesAttachData, AwsVolumesAttachResponses, AwsVolumesDetachData, AwsVolumesDetachResponses, AwsVolumesPullData, AwsVolumesPullResponses, AwsVolumesUnlinkData, AwsVolumesUnlinkResponses, AzureImagesListData, AzureImagesListResponses, AzureImagesHeadData, AzureImagesHeadResponses, AzureImagesRetrieveData, AzureImagesRetrieveResponses, AzureLocationsListData, AzureLocationsListResponses, AzureLocationsHeadData, AzureLocationsHeadResponses, AzureLocationsRetrieveData, AzureLocationsRetrieveResponses, AzurePublicIpsListData, AzurePublicIpsListResponses, AzurePublicIpsHeadData, AzurePublicIpsHeadResponses, AzurePublicIpsCreateData, AzurePublicIpsCreateResponses, AzurePublicIpsDestroyData, AzurePublicIpsDestroyResponses, AzurePublicIpsRetrieveData, AzurePublicIpsRetrieveResponses, AzurePublicIpsPartialUpdateData, AzurePublicIpsPartialUpdateResponses, AzurePublicIpsUpdateData, AzurePublicIpsUpdateResponses, AzurePublicIpsPullData, AzurePublicIpsPullResponses, AzurePublicIpsUnlinkData, AzurePublicIpsUnlinkResponses, AzureResourceGroupsListData, AzureResourceGroupsListResponses, AzureResourceGroupsHeadData, AzureResourceGroupsHeadResponses, AzureResourceGroupsRetrieveData, AzureResourceGroupsRetrieveResponses, AzureSizesListData, AzureSizesListResponses, AzureSizesHeadData, AzureSizesHeadResponses, AzureSizesRetrieveData, AzureSizesRetrieveResponses, AzureSqlDatabasesListData, AzureSqlDatabasesListResponses, AzureSqlDatabasesHeadData, AzureSqlDatabasesHeadResponses, AzureSqlDatabasesCreateData, AzureSqlDatabasesCreateResponses, AzureSqlDatabasesDestroyData, AzureSqlDatabasesDestroyResponses, AzureSqlDatabasesRetrieveData, AzureSqlDatabasesRetrieveResponses, AzureSqlDatabasesPartialUpdateData, AzureSqlDatabasesPartialUpdateResponses, AzureSqlDatabasesUpdateData, AzureSqlDatabasesUpdateResponses, AzureSqlDatabasesPullData, AzureSqlDatabasesPullResponses, AzureSqlDatabasesUnlinkData, AzureSqlDatabasesUnlinkResponses, AzureSqlServersListData, AzureSqlServersListResponses, AzureSqlServersHeadData, AzureSqlServersHeadResponses, AzureSqlServersCreateData, AzureSqlServersCreateResponses, AzureSqlServersDestroyData, AzureSqlServersDestroyResponses, AzureSqlServersRetrieveData, AzureSqlServersRetrieveResponses, AzureSqlServersPartialUpdateData, AzureSqlServersPartialUpdateResponses, AzureSqlServersUpdateData, AzureSqlServersUpdateResponses, AzureSqlServersCreateDatabaseData, AzureSqlServersCreateDatabaseResponses, AzureSqlServersPullData, AzureSqlServersPullResponses, AzureSqlServersUnlinkData, AzureSqlServersUnlinkResponses, AzureVirtualmachinesListData, AzureVirtualmachinesListResponses, AzureVirtualmachinesHeadData, AzureVirtualmachinesHeadResponses, AzureVirtualmachinesCreateData, AzureVirtualmachinesCreateResponses, AzureVirtualmachinesDestroyData, AzureVirtualmachinesDestroyResponses, AzureVirtualmachinesRetrieveData, AzureVirtualmachinesRetrieveResponses, AzureVirtualmachinesPartialUpdateData, AzureVirtualmachinesPartialUpdateResponses, AzureVirtualmachinesUpdateData, AzureVirtualmachinesUpdateResponses, AzureVirtualmachinesPullData, AzureVirtualmachinesPullResponses, AzureVirtualmachinesRestartData, AzureVirtualmachinesRestartResponses, AzureVirtualmachinesStartData, AzureVirtualmachinesStartResponses, AzureVirtualmachinesStopData, AzureVirtualmachinesStopResponses, AzureVirtualmachinesUnlinkData, AzureVirtualmachinesUnlinkResponses, BackendResourceRequestsListData, BackendResourceRequestsListResponses, BackendResourceRequestsHeadData, BackendResourceRequestsHeadResponses, BackendResourceRequestsCreateData, BackendResourceRequestsCreateResponses, BackendResourceRequestsRetrieveData, BackendResourceRequestsRetrieveResponses, BackendResourceRequestsSetDoneData, BackendResourceRequestsSetDoneResponses, BackendResourceRequestsSetErredData, BackendResourceRequestsSetErredResponses, BackendResourceRequestsStartProcessingData, BackendResourceRequestsStartProcessingResponses, BackendResourcesListData, BackendResourcesListResponses, BackendResourcesHeadData, BackendResourcesHeadResponses, BackendResourcesCreateData, BackendResourcesCreateResponses, BackendResourcesDestroyData, BackendResourcesDestroyResponses, BackendResourcesRetrieveData, BackendResourcesRetrieveResponses, BackendResourcesImportResourceData, BackendResourcesImportResourceResponses, BillingTotalCostRetrieveData, BillingTotalCostRetrieveResponses, BookingOfferingsListData, BookingOfferingsListResponses, BookingOfferingsHeadData, BookingOfferingsHeadResponses, BookingOfferingsRetrieveData, BookingOfferingsRetrieveResponses, BookingOfferingsGoogleCalendarSyncData, BookingOfferingsGoogleCalendarSyncResponses, BookingOfferingsShareGoogleCalendarData, BookingOfferingsShareGoogleCalendarResponses, BookingOfferingsUnshareGoogleCalendarData, BookingOfferingsUnshareGoogleCalendarResponses, BookingResourcesListData, BookingResourcesListResponses, BookingResourcesHeadData, BookingResourcesHeadResponses, BookingResourcesRetrieveData, BookingResourcesRetrieveResponses, BookingResourcesAcceptData, BookingResourcesAcceptResponses, BookingResourcesRejectData, BookingResourcesRejectResponses, BroadcastMessageTemplatesListData, BroadcastMessageTemplatesListResponses, BroadcastMessageTemplatesHeadData, BroadcastMessageTemplatesHeadResponses, BroadcastMessageTemplatesCreateData, BroadcastMessageTemplatesCreateResponses, BroadcastMessageTemplatesDestroyData, BroadcastMessageTemplatesDestroyResponses, BroadcastMessageTemplatesRetrieveData, BroadcastMessageTemplatesRetrieveResponses, BroadcastMessageTemplatesPartialUpdateData, BroadcastMessageTemplatesPartialUpdateResponses, BroadcastMessageTemplatesUpdateData, BroadcastMessageTemplatesUpdateResponses, BroadcastMessagesListData, BroadcastMessagesListResponses, BroadcastMessagesHeadData, BroadcastMessagesHeadResponses, BroadcastMessagesCreateData, BroadcastMessagesCreateResponses, BroadcastMessagesDestroyData, BroadcastMessagesDestroyResponses, BroadcastMessagesRetrieveData, BroadcastMessagesRetrieveResponses, BroadcastMessagesPartialUpdateData, BroadcastMessagesPartialUpdateResponses, BroadcastMessagesUpdateData, BroadcastMessagesUpdateResponses, BroadcastMessagesScheduleData, BroadcastMessagesScheduleResponses, BroadcastMessagesSendData, BroadcastMessagesSendResponses, BroadcastMessagesRecipientsRetrieveData, BroadcastMessagesRecipientsRetrieveResponses, BroadcastMessagesRecipientsHeadData, BroadcastMessagesRecipientsHeadResponses, CallManagingOrganisationsListData, CallManagingOrganisationsListResponses, CallManagingOrganisationsHeadData, CallManagingOrganisationsHeadResponses, CallManagingOrganisationsCreateData, CallManagingOrganisationsCreateResponses, CallManagingOrganisationsDestroyData, CallManagingOrganisationsDestroyResponses, CallManagingOrganisationsRetrieveData, CallManagingOrganisationsRetrieveResponses, CallManagingOrganisationsPartialUpdateData, CallManagingOrganisationsPartialUpdateResponses, CallManagingOrganisationsUpdateData, CallManagingOrganisationsUpdateResponses, CallManagingOrganisationsAddUserData, CallManagingOrganisationsAddUserResponses, CallManagingOrganisationsDeleteUserData, CallManagingOrganisationsDeleteUserResponses, CallManagingOrganisationsListUsersListData, CallManagingOrganisationsListUsersListResponses, CallManagingOrganisationsStatsRetrieveData, CallManagingOrganisationsStatsRetrieveResponses, CallManagingOrganisationsUpdateUserData, CallManagingOrganisationsUpdateUserResponses, CallProposalProjectRoleMappingsListData, CallProposalProjectRoleMappingsListResponses, CallProposalProjectRoleMappingsHeadData, CallProposalProjectRoleMappingsHeadResponses, CallProposalProjectRoleMappingsCreateData, CallProposalProjectRoleMappingsCreateResponses, CallProposalProjectRoleMappingsDestroyData, CallProposalProjectRoleMappingsDestroyResponses, CallProposalProjectRoleMappingsRetrieveData, CallProposalProjectRoleMappingsRetrieveResponses, CallProposalProjectRoleMappingsPartialUpdateData, CallProposalProjectRoleMappingsPartialUpdateResponses, CallProposalProjectRoleMappingsUpdateData, CallProposalProjectRoleMappingsUpdateResponses, CallRoundsListData, CallRoundsListResponses, CallRoundsHeadData, CallRoundsHeadResponses, CallRoundsRetrieveData, CallRoundsRetrieveResponses, CallRoundsReviewersListData, CallRoundsReviewersListResponses, CeleryStatsRetrieveData, CeleryStatsRetrieveResponses, ComponentUserUsageLimitsListData, ComponentUserUsageLimitsListResponses, ComponentUserUsageLimitsHeadData, ComponentUserUsageLimitsHeadResponses, ComponentUserUsageLimitsCreateData, ComponentUserUsageLimitsCreateResponses, ComponentUserUsageLimitsDestroyData, ComponentUserUsageLimitsDestroyResponses, ComponentUserUsageLimitsRetrieveData, ComponentUserUsageLimitsRetrieveResponses, ComponentUserUsageLimitsPartialUpdateData, ComponentUserUsageLimitsPartialUpdateResponses, ComponentUserUsageLimitsUpdateData, ComponentUserUsageLimitsUpdateResponses, ConfigurationRetrieveData, ConfigurationRetrieveResponses, CustomerCreditsListData, CustomerCreditsListResponses, CustomerCreditsHeadData, CustomerCreditsHeadResponses, CustomerCreditsCreateData, CustomerCreditsCreateResponses, CustomerCreditsDestroyData, CustomerCreditsDestroyResponses, CustomerCreditsRetrieveData, CustomerCreditsRetrieveResponses, CustomerCreditsPartialUpdateData, CustomerCreditsPartialUpdateResponses, CustomerCreditsUpdateData, CustomerCreditsUpdateResponses, CustomerCreditsApplyCompensationsData, CustomerCreditsApplyCompensationsResponses, CustomerCreditsClearCompensationsData, CustomerCreditsClearCompensationsResponses, CustomerCreditsConsumptionsListData, CustomerCreditsConsumptionsListResponses, CustomerPermissionsReviewsListData, CustomerPermissionsReviewsListResponses, CustomerPermissionsReviewsHeadData, CustomerPermissionsReviewsHeadResponses, CustomerPermissionsReviewsRetrieveData, CustomerPermissionsReviewsRetrieveResponses, CustomerPermissionsReviewsCloseData, CustomerPermissionsReviewsCloseResponses, CustomerQuotasListData, CustomerQuotasListResponses, CustomerQuotasHeadData, CustomerQuotasHeadResponses, CustomersListData, CustomersListResponses, CustomersHeadData, CustomersHeadResponses, CustomersCreateData, CustomersCreateResponses, CustomersDestroyData, CustomersDestroyResponses, CustomersRetrieveData, CustomersRetrieveResponses, CustomersPartialUpdateData, CustomersPartialUpdateResponses, CustomersUpdateData, CustomersUpdateResponses, CustomersAddUserData, CustomersAddUserResponses, CustomersDeleteUserData, CustomersDeleteUserResponses, CustomersListUsersListData, CustomersListUsersListResponses, CustomersStatsRetrieveData, CustomersStatsRetrieveResponses, CustomersUpdateOrganizationGroupsData, CustomersUpdateOrganizationGroupsResponses, CustomersUpdateUserData, CustomersUpdateUserResponses, CustomersUsersListData, CustomersUsersListResponses, CustomersCountriesListData, CustomersCountriesListResponses, CustomersCountriesHeadData, CustomersCountriesHeadResponses, DailyQuotasRetrieveData, DailyQuotasRetrieveResponses, DatabaseStatsListData, DatabaseStatsListResponses, DigitaloceanDropletsListData, DigitaloceanDropletsListResponses, DigitaloceanDropletsHeadData, DigitaloceanDropletsHeadResponses, DigitaloceanDropletsCreateData, DigitaloceanDropletsCreateResponses, DigitaloceanDropletsDestroyData, DigitaloceanDropletsDestroyResponses, DigitaloceanDropletsRetrieveData, DigitaloceanDropletsRetrieveResponses, DigitaloceanDropletsPartialUpdateData, DigitaloceanDropletsPartialUpdateResponses, DigitaloceanDropletsUpdateData, DigitaloceanDropletsUpdateResponses, DigitaloceanDropletsPullData, DigitaloceanDropletsPullResponses, DigitaloceanDropletsResizeData, DigitaloceanDropletsResizeResponses, DigitaloceanDropletsRestartData, DigitaloceanDropletsRestartResponses, DigitaloceanDropletsStartData, DigitaloceanDropletsStartResponses, DigitaloceanDropletsStopData, DigitaloceanDropletsStopResponses, DigitaloceanDropletsUnlinkData, DigitaloceanDropletsUnlinkResponses, DigitaloceanImagesListData, DigitaloceanImagesListResponses, DigitaloceanImagesHeadData, DigitaloceanImagesHeadResponses, DigitaloceanImagesRetrieveData, DigitaloceanImagesRetrieveResponses, DigitaloceanRegionsListData, DigitaloceanRegionsListResponses, DigitaloceanRegionsHeadData, DigitaloceanRegionsHeadResponses, DigitaloceanRegionsRetrieveData, DigitaloceanRegionsRetrieveResponses, DigitaloceanSizesListData, DigitaloceanSizesListResponses, DigitaloceanSizesHeadData, DigitaloceanSizesHeadResponses, DigitaloceanSizesRetrieveData, DigitaloceanSizesRetrieveResponses, EmailLogsListData, EmailLogsListResponses, EmailLogsHeadData, EmailLogsHeadResponses, EmailLogsRetrieveData, EmailLogsRetrieveResponses, EventSubscriptionsListData, EventSubscriptionsListResponses, EventSubscriptionsHeadData, EventSubscriptionsHeadResponses, EventSubscriptionsCreateData, EventSubscriptionsCreateResponses, EventSubscriptionsDestroyData, EventSubscriptionsDestroyResponses, EventSubscriptionsRetrieveData, EventSubscriptionsRetrieveResponses, EventsListData, EventsListResponses, EventsHeadData, EventsHeadResponses, EventsStatsListData, EventsStatsListResponses, EventsStatsHeadData, EventsStatsHeadResponses, EventsRetrieveData, EventsRetrieveResponses, EventsCountRetrieveData, EventsCountRetrieveResponses, EventsCountHeadData, EventsCountHeadResponses, EventsEventGroupsRetrieveData, EventsEventGroupsRetrieveResponses, EventsEventGroupsHeadData, EventsEventGroupsHeadResponses, EventsScopeTypesRetrieveData, EventsScopeTypesRetrieveResponses, EventsScopeTypesHeadData, EventsScopeTypesHeadResponses, ExternalLinksListData, ExternalLinksListResponses, ExternalLinksHeadData, ExternalLinksHeadResponses, ExternalLinksCreateData, ExternalLinksCreateResponses, ExternalLinksDestroyData, ExternalLinksDestroyResponses, ExternalLinksRetrieveData, ExternalLinksRetrieveResponses, ExternalLinksPartialUpdateData, ExternalLinksPartialUpdateResponses, ExternalLinksUpdateData, ExternalLinksUpdateResponses, FeatureValuesData, FeatureValuesResponses, FinancialReportsListData, FinancialReportsListResponses, FinancialReportsHeadData, FinancialReportsHeadResponses, FinancialReportsRetrieveData, FinancialReportsRetrieveResponses, FreeipaProfilesListData, FreeipaProfilesListResponses, FreeipaProfilesHeadData, FreeipaProfilesHeadResponses, FreeipaProfilesCreateData, FreeipaProfilesCreateResponses, FreeipaProfilesRetrieveData, FreeipaProfilesRetrieveResponses, FreeipaProfilesPartialUpdateData, FreeipaProfilesPartialUpdateResponses, FreeipaProfilesUpdateData, FreeipaProfilesUpdateResponses, FreeipaProfilesUpdateSshKeysData, FreeipaProfilesUpdateSshKeysResponses, GoogleAuthListData, GoogleAuthListResponses, GoogleAuthHeadData, GoogleAuthHeadResponses, GoogleAuthRetrieveData, GoogleAuthRetrieveResponses, GoogleAuthAuthorizeRetrieveData, GoogleAuthAuthorizeRetrieveResponses, GoogleAuthCallbackRetrieveData, GoogleAuthCallbackRetrieveResponses, GoogleAuthCallbackHeadData, GoogleAuthCallbackHeadResponses, HooksListData, HooksListResponses, HooksHeadData, HooksHeadResponses, HooksEmailListData, HooksEmailListResponses, HooksEmailHeadData, HooksEmailHeadResponses, HooksEmailCreateData, HooksEmailCreateResponses, HooksEmailDestroyData, HooksEmailDestroyResponses, HooksEmailRetrieveData, HooksEmailRetrieveResponses, HooksEmailPartialUpdateData, HooksEmailPartialUpdateResponses, HooksEmailUpdateData, HooksEmailUpdateResponses, HooksWebListData, HooksWebListResponses, HooksWebHeadData, HooksWebHeadResponses, HooksWebCreateData, HooksWebCreateResponses, HooksWebDestroyData, HooksWebDestroyResponses, HooksWebRetrieveData, HooksWebRetrieveResponses, HooksWebPartialUpdateData, HooksWebPartialUpdateResponses, HooksWebUpdateData, HooksWebUpdateResponses, IdentityProvidersListData, IdentityProvidersListResponses, IdentityProvidersHeadData, IdentityProvidersHeadResponses, IdentityProvidersCreateData, IdentityProvidersCreateResponses, IdentityProvidersDestroyData, IdentityProvidersDestroyResponses, IdentityProvidersRetrieveData, IdentityProvidersRetrieveResponses, IdentityProvidersPartialUpdateData, IdentityProvidersPartialUpdateResponses, IdentityProvidersUpdateData, IdentityProvidersUpdateResponses, InvoiceItemsListData, InvoiceItemsListResponses, InvoiceItemsHeadData, InvoiceItemsHeadResponses, InvoiceItemsDestroyData, InvoiceItemsDestroyResponses, InvoiceItemsRetrieveData, InvoiceItemsRetrieveResponses, InvoiceItemsPartialUpdateData, InvoiceItemsPartialUpdateResponses, InvoiceItemsUpdateData, InvoiceItemsUpdateResponses, InvoiceItemsConsumptionsRetrieveData, InvoiceItemsConsumptionsRetrieveResponses, InvoiceItemsCreateCompensationData, InvoiceItemsCreateCompensationResponses, InvoiceItemsMigrateToData, InvoiceItemsMigrateToResponses, InvoiceItemsCostsListData, InvoiceItemsCostsListResponses, InvoiceItemsCostsHeadData, InvoiceItemsCostsHeadResponses, InvoiceItemsCustomerCostsForPeriodRetrieveData, InvoiceItemsCustomerCostsForPeriodRetrieveResponses, InvoiceItemsCustomerCostsForPeriodHeadData, InvoiceItemsCustomerCostsForPeriodHeadResponses, InvoiceItemsProjectCostsForPeriodRetrieveData, InvoiceItemsProjectCostsForPeriodRetrieveResponses, InvoiceItemsProjectCostsForPeriodHeadData, InvoiceItemsProjectCostsForPeriodHeadResponses, InvoiceItemsTotalPriceRetrieveData, InvoiceItemsTotalPriceRetrieveResponses, InvoiceItemsTotalPriceHeadData, InvoiceItemsTotalPriceHeadResponses, InvoiceSendFinancialReportByMailData, InvoiceSendFinancialReportByMailResponses, InvoicesListData, InvoicesListResponses, InvoicesHeadData, InvoicesHeadResponses, InvoicesRetrieveData, InvoicesRetrieveResponses, InvoicesItemsRetrieveData, InvoicesItemsRetrieveResponses, InvoicesPaidData, InvoicesPaidResponses, InvoicesSendNotificationData, InvoicesSendNotificationResponses, InvoicesSetBackendIdData, InvoicesSetBackendIdResponses, InvoicesSetPaymentUrlData, InvoicesSetPaymentUrlResponses, InvoicesSetReferenceNumberData, InvoicesSetReferenceNumberResponses, InvoicesStatsListData, InvoicesStatsListResponses, InvoicesGrowthRetrieveData, InvoicesGrowthRetrieveResponses, InvoicesGrowthHeadData, InvoicesGrowthHeadResponses, KeycloakGroupsListData, KeycloakGroupsListResponses, KeycloakGroupsHeadData, KeycloakGroupsHeadResponses, KeycloakGroupsRetrieveData, KeycloakGroupsRetrieveResponses, KeycloakUserGroupMembershipsListData, KeycloakUserGroupMembershipsListResponses, KeycloakUserGroupMembershipsHeadData, KeycloakUserGroupMembershipsHeadResponses, KeycloakUserGroupMembershipsCreateData, KeycloakUserGroupMembershipsCreateResponses, KeycloakUserGroupMembershipsDestroyData, KeycloakUserGroupMembershipsDestroyResponses, KeycloakUserGroupMembershipsRetrieveData, KeycloakUserGroupMembershipsRetrieveResponses, KeycloakUserGroupMembershipsPartialUpdateData, KeycloakUserGroupMembershipsPartialUpdateResponses, KeycloakUserGroupMembershipsUpdateData, KeycloakUserGroupMembershipsUpdateResponses, KeysListData, KeysListResponses, KeysHeadData, KeysHeadResponses, KeysCreateData, KeysCreateResponses, KeysDestroyData, KeysDestroyResponses, KeysRetrieveData, KeysRetrieveResponses, LexisLinksListData, LexisLinksListResponses, LexisLinksHeadData, LexisLinksHeadResponses, LexisLinksCreateData, LexisLinksCreateResponses, LexisLinksDestroyData, LexisLinksDestroyResponses, LexisLinksRetrieveData, LexisLinksRetrieveResponses, LexisLinksPartialUpdateData, LexisLinksPartialUpdateResponses, LexisLinksUpdateData, LexisLinksUpdateResponses, MaintenanceAnnouncementOfferingsListData, MaintenanceAnnouncementOfferingsListResponses, MaintenanceAnnouncementOfferingsHeadData, MaintenanceAnnouncementOfferingsHeadResponses, MaintenanceAnnouncementOfferingsCreateData, MaintenanceAnnouncementOfferingsCreateResponses, MaintenanceAnnouncementOfferingsDestroyData, MaintenanceAnnouncementOfferingsDestroyResponses, MaintenanceAnnouncementOfferingsRetrieveData, MaintenanceAnnouncementOfferingsRetrieveResponses, MaintenanceAnnouncementOfferingsPartialUpdateData, MaintenanceAnnouncementOfferingsPartialUpdateResponses, MaintenanceAnnouncementOfferingsUpdateData, MaintenanceAnnouncementOfferingsUpdateResponses, MaintenanceAnnouncementTemplateOfferingsListData, MaintenanceAnnouncementTemplateOfferingsListResponses, MaintenanceAnnouncementTemplateOfferingsHeadData, MaintenanceAnnouncementTemplateOfferingsHeadResponses, MaintenanceAnnouncementTemplateOfferingsCreateData, MaintenanceAnnouncementTemplateOfferingsCreateResponses, MaintenanceAnnouncementTemplateOfferingsDestroyData, MaintenanceAnnouncementTemplateOfferingsDestroyResponses, MaintenanceAnnouncementTemplateOfferingsRetrieveData, MaintenanceAnnouncementTemplateOfferingsRetrieveResponses, MaintenanceAnnouncementTemplateOfferingsPartialUpdateData, MaintenanceAnnouncementTemplateOfferingsPartialUpdateResponses, MaintenanceAnnouncementTemplateOfferingsUpdateData, MaintenanceAnnouncementTemplateOfferingsUpdateResponses, MaintenanceAnnouncementsListData, MaintenanceAnnouncementsListResponses, MaintenanceAnnouncementsHeadData, MaintenanceAnnouncementsHeadResponses, MaintenanceAnnouncementsCreateData, MaintenanceAnnouncementsCreateResponses, MaintenanceAnnouncementsTemplateListData, MaintenanceAnnouncementsTemplateListResponses, MaintenanceAnnouncementsTemplateHeadData, MaintenanceAnnouncementsTemplateHeadResponses, MaintenanceAnnouncementsTemplateCreateData, MaintenanceAnnouncementsTemplateCreateResponses, MaintenanceAnnouncementsTemplateDestroyData, MaintenanceAnnouncementsTemplateDestroyResponses, MaintenanceAnnouncementsTemplateRetrieveData, MaintenanceAnnouncementsTemplateRetrieveResponses, MaintenanceAnnouncementsTemplatePartialUpdateData, MaintenanceAnnouncementsTemplatePartialUpdateResponses, MaintenanceAnnouncementsTemplateUpdateData, MaintenanceAnnouncementsTemplateUpdateResponses, MaintenanceAnnouncementsDestroyData, MaintenanceAnnouncementsDestroyResponses, MaintenanceAnnouncementsRetrieveData, MaintenanceAnnouncementsRetrieveResponses, MaintenanceAnnouncementsPartialUpdateData, MaintenanceAnnouncementsPartialUpdateResponses, MaintenanceAnnouncementsUpdateData, MaintenanceAnnouncementsUpdateResponses, MarketplaceBookingsListData, MarketplaceBookingsListResponses, MarketplaceCategoriesListData, MarketplaceCategoriesListResponses, MarketplaceCategoriesHeadData, MarketplaceCategoriesHeadResponses, MarketplaceCategoriesCreateData, MarketplaceCategoriesCreateResponses, MarketplaceCategoriesDestroyData, MarketplaceCategoriesDestroyResponses, MarketplaceCategoriesRetrieveData, MarketplaceCategoriesRetrieveResponses, MarketplaceCategoriesPartialUpdateData, MarketplaceCategoriesPartialUpdateResponses, MarketplaceCategoriesUpdateData, MarketplaceCategoriesUpdateResponses, MarketplaceCategoryColumnsListData, MarketplaceCategoryColumnsListResponses, MarketplaceCategoryColumnsHeadData, MarketplaceCategoryColumnsHeadResponses, MarketplaceCategoryColumnsCreateData, MarketplaceCategoryColumnsCreateResponses, MarketplaceCategoryColumnsDestroyData, MarketplaceCategoryColumnsDestroyResponses, MarketplaceCategoryColumnsRetrieveData, MarketplaceCategoryColumnsRetrieveResponses, MarketplaceCategoryColumnsPartialUpdateData, MarketplaceCategoryColumnsPartialUpdateResponses, MarketplaceCategoryColumnsUpdateData, MarketplaceCategoryColumnsUpdateResponses, MarketplaceCategoryComponentUsagesListData, MarketplaceCategoryComponentUsagesListResponses, MarketplaceCategoryComponentUsagesHeadData, MarketplaceCategoryComponentUsagesHeadResponses, MarketplaceCategoryComponentUsagesRetrieveData, MarketplaceCategoryComponentUsagesRetrieveResponses, MarketplaceCategoryComponentsListData, MarketplaceCategoryComponentsListResponses, MarketplaceCategoryComponentsHeadData, MarketplaceCategoryComponentsHeadResponses, MarketplaceCategoryComponentsCreateData, MarketplaceCategoryComponentsCreateResponses, MarketplaceCategoryComponentsDestroyData, MarketplaceCategoryComponentsDestroyResponses, MarketplaceCategoryComponentsRetrieveData, MarketplaceCategoryComponentsRetrieveResponses, MarketplaceCategoryComponentsPartialUpdateData, MarketplaceCategoryComponentsPartialUpdateResponses, MarketplaceCategoryComponentsUpdateData, MarketplaceCategoryComponentsUpdateResponses, MarketplaceCategoryGroupsListData, MarketplaceCategoryGroupsListResponses, MarketplaceCategoryGroupsHeadData, MarketplaceCategoryGroupsHeadResponses, MarketplaceCategoryGroupsCreateData, MarketplaceCategoryGroupsCreateResponses, MarketplaceCategoryGroupsDestroyData, MarketplaceCategoryGroupsDestroyResponses, MarketplaceCategoryGroupsRetrieveData, MarketplaceCategoryGroupsRetrieveResponses, MarketplaceCategoryGroupsPartialUpdateData, MarketplaceCategoryGroupsPartialUpdateResponses, MarketplaceCategoryGroupsUpdateData, MarketplaceCategoryGroupsUpdateResponses, MarketplaceCategoryHelpArticlesListData, MarketplaceCategoryHelpArticlesListResponses, MarketplaceCategoryHelpArticlesHeadData, MarketplaceCategoryHelpArticlesHeadResponses, MarketplaceCategoryHelpArticlesCreateData, MarketplaceCategoryHelpArticlesCreateResponses, MarketplaceCategoryHelpArticlesDestroyData, MarketplaceCategoryHelpArticlesDestroyResponses, MarketplaceCategoryHelpArticlesRetrieveData, MarketplaceCategoryHelpArticlesRetrieveResponses, MarketplaceCategoryHelpArticlesPartialUpdateData, MarketplaceCategoryHelpArticlesPartialUpdateResponses, MarketplaceCategoryHelpArticlesUpdateData, MarketplaceCategoryHelpArticlesUpdateResponses, MarketplaceChecklistsAdminListData, MarketplaceChecklistsAdminListResponses, MarketplaceChecklistsAdminHeadData, MarketplaceChecklistsAdminHeadResponses, MarketplaceChecklistsAdminCreateData, MarketplaceChecklistsAdminCreateResponses, MarketplaceChecklistsAdminQuestionDependenciesListData, MarketplaceChecklistsAdminQuestionDependenciesListResponses, MarketplaceChecklistsAdminQuestionDependenciesHeadData, MarketplaceChecklistsAdminQuestionDependenciesHeadResponses, MarketplaceChecklistsAdminQuestionDependenciesCreateData, MarketplaceChecklistsAdminQuestionDependenciesCreateResponses, MarketplaceChecklistsAdminQuestionDependenciesDestroyData, MarketplaceChecklistsAdminQuestionDependenciesDestroyResponses, MarketplaceChecklistsAdminQuestionDependenciesRetrieveData, MarketplaceChecklistsAdminQuestionDependenciesRetrieveResponses, MarketplaceChecklistsAdminQuestionDependenciesPartialUpdateData, MarketplaceChecklistsAdminQuestionDependenciesPartialUpdateResponses, MarketplaceChecklistsAdminQuestionDependenciesUpdateData, MarketplaceChecklistsAdminQuestionDependenciesUpdateResponses, MarketplaceChecklistsAdminQuestionOptionsListData, MarketplaceChecklistsAdminQuestionOptionsListResponses, MarketplaceChecklistsAdminQuestionOptionsHeadData, MarketplaceChecklistsAdminQuestionOptionsHeadResponses, MarketplaceChecklistsAdminQuestionOptionsCreateData, MarketplaceChecklistsAdminQuestionOptionsCreateResponses, MarketplaceChecklistsAdminQuestionOptionsDestroyData, MarketplaceChecklistsAdminQuestionOptionsDestroyResponses, MarketplaceChecklistsAdminQuestionOptionsRetrieveData, MarketplaceChecklistsAdminQuestionOptionsRetrieveResponses, MarketplaceChecklistsAdminQuestionOptionsPartialUpdateData, MarketplaceChecklistsAdminQuestionOptionsPartialUpdateResponses, MarketplaceChecklistsAdminQuestionOptionsUpdateData, MarketplaceChecklistsAdminQuestionOptionsUpdateResponses, MarketplaceChecklistsAdminQuestionsListData, MarketplaceChecklistsAdminQuestionsListResponses, MarketplaceChecklistsAdminQuestionsHeadData, MarketplaceChecklistsAdminQuestionsHeadResponses, MarketplaceChecklistsAdminQuestionsCreateData, MarketplaceChecklistsAdminQuestionsCreateResponses, MarketplaceChecklistsAdminQuestionsDestroyData, MarketplaceChecklistsAdminQuestionsDestroyResponses, MarketplaceChecklistsAdminQuestionsRetrieveData, MarketplaceChecklistsAdminQuestionsRetrieveResponses, MarketplaceChecklistsAdminQuestionsPartialUpdateData, MarketplaceChecklistsAdminQuestionsPartialUpdateResponses, MarketplaceChecklistsAdminQuestionsUpdateData, MarketplaceChecklistsAdminQuestionsUpdateResponses, MarketplaceChecklistsAdminDestroyData, MarketplaceChecklistsAdminDestroyResponses, MarketplaceChecklistsAdminRetrieveData, MarketplaceChecklistsAdminRetrieveResponses, MarketplaceChecklistsAdminPartialUpdateData, MarketplaceChecklistsAdminPartialUpdateResponses, MarketplaceChecklistsAdminUpdateData, MarketplaceChecklistsAdminUpdateResponses, MarketplaceChecklistsAdminChecklistQuestionsData, MarketplaceChecklistsAdminChecklistQuestionsResponses, MarketplaceChecklistsCategoriesListData, MarketplaceChecklistsCategoriesListResponses, MarketplaceChecklistsCategoriesRetrieveData, MarketplaceChecklistsCategoriesRetrieveResponses, MarketplaceComponentUsagesListData, MarketplaceComponentUsagesListResponses, MarketplaceComponentUsagesHeadData, MarketplaceComponentUsagesHeadResponses, MarketplaceComponentUsagesRetrieveData, MarketplaceComponentUsagesRetrieveResponses, MarketplaceComponentUsagesSetUserUsageData, MarketplaceComponentUsagesSetUserUsageResponses, MarketplaceComponentUsagesSetUsageData, MarketplaceComponentUsagesSetUsageResponses, MarketplaceComponentUserUsagesListData, MarketplaceComponentUserUsagesListResponses, MarketplaceComponentUserUsagesHeadData, MarketplaceComponentUserUsagesHeadResponses, MarketplaceComponentUserUsagesRetrieveData, MarketplaceComponentUserUsagesRetrieveResponses, MarketplaceCustomerEstimatedCostPoliciesListData, MarketplaceCustomerEstimatedCostPoliciesListResponses, MarketplaceCustomerEstimatedCostPoliciesHeadData, MarketplaceCustomerEstimatedCostPoliciesHeadResponses, MarketplaceCustomerEstimatedCostPoliciesCreateData, MarketplaceCustomerEstimatedCostPoliciesCreateResponses, MarketplaceCustomerEstimatedCostPoliciesDestroyData, MarketplaceCustomerEstimatedCostPoliciesDestroyResponses, MarketplaceCustomerEstimatedCostPoliciesRetrieveData, MarketplaceCustomerEstimatedCostPoliciesRetrieveResponses, MarketplaceCustomerEstimatedCostPoliciesPartialUpdateData, MarketplaceCustomerEstimatedCostPoliciesPartialUpdateResponses, MarketplaceCustomerEstimatedCostPoliciesUpdateData, MarketplaceCustomerEstimatedCostPoliciesUpdateResponses, MarketplaceCustomerEstimatedCostPoliciesActionsRetrieveData, MarketplaceCustomerEstimatedCostPoliciesActionsRetrieveResponses, MarketplaceCustomerEstimatedCostPoliciesActionsHeadData, MarketplaceCustomerEstimatedCostPoliciesActionsHeadResponses, MarketplaceCustomerServiceAccountsListData, MarketplaceCustomerServiceAccountsListResponses, MarketplaceCustomerServiceAccountsHeadData, MarketplaceCustomerServiceAccountsHeadResponses, MarketplaceCustomerServiceAccountsCreateData, MarketplaceCustomerServiceAccountsCreateResponses, MarketplaceCustomerServiceAccountsDestroyData, MarketplaceCustomerServiceAccountsDestroyResponses, MarketplaceCustomerServiceAccountsRetrieveData, MarketplaceCustomerServiceAccountsRetrieveResponses, MarketplaceCustomerServiceAccountsPartialUpdateData, MarketplaceCustomerServiceAccountsPartialUpdateResponses, MarketplaceCustomerServiceAccountsUpdateData, MarketplaceCustomerServiceAccountsUpdateResponses, MarketplaceCustomerServiceAccountsRotateApiKeyData, MarketplaceCustomerServiceAccountsRotateApiKeyResponses, MarketplaceGlobalCategoriesRetrieveData, MarketplaceGlobalCategoriesRetrieveResponses, MarketplaceIntegrationStatusesListData, MarketplaceIntegrationStatusesListResponses, MarketplaceIntegrationStatusesHeadData, MarketplaceIntegrationStatusesHeadResponses, MarketplaceIntegrationStatusesRetrieveData, MarketplaceIntegrationStatusesRetrieveResponses, MarketplaceOfferingEstimatedCostPoliciesListData, MarketplaceOfferingEstimatedCostPoliciesListResponses, MarketplaceOfferingEstimatedCostPoliciesHeadData, MarketplaceOfferingEstimatedCostPoliciesHeadResponses, MarketplaceOfferingEstimatedCostPoliciesCreateData, MarketplaceOfferingEstimatedCostPoliciesCreateResponses, MarketplaceOfferingEstimatedCostPoliciesDestroyData, MarketplaceOfferingEstimatedCostPoliciesDestroyResponses, MarketplaceOfferingEstimatedCostPoliciesRetrieveData, MarketplaceOfferingEstimatedCostPoliciesRetrieveResponses, MarketplaceOfferingEstimatedCostPoliciesPartialUpdateData, MarketplaceOfferingEstimatedCostPoliciesPartialUpdateResponses, MarketplaceOfferingEstimatedCostPoliciesUpdateData, MarketplaceOfferingEstimatedCostPoliciesUpdateResponses, MarketplaceOfferingEstimatedCostPoliciesActionsRetrieveData, MarketplaceOfferingEstimatedCostPoliciesActionsRetrieveResponses, MarketplaceOfferingEstimatedCostPoliciesActionsHeadData, MarketplaceOfferingEstimatedCostPoliciesActionsHeadResponses, MarketplaceOfferingFilesListData, MarketplaceOfferingFilesListResponses, MarketplaceOfferingFilesHeadData, MarketplaceOfferingFilesHeadResponses, MarketplaceOfferingFilesCreateData, MarketplaceOfferingFilesCreateResponses, MarketplaceOfferingFilesDestroyData, MarketplaceOfferingFilesDestroyResponses, MarketplaceOfferingFilesRetrieveData, MarketplaceOfferingFilesRetrieveResponses, MarketplaceOfferingPermissionsListData, MarketplaceOfferingPermissionsListResponses, MarketplaceOfferingPermissionsHeadData, MarketplaceOfferingPermissionsHeadResponses, MarketplaceOfferingPermissionsLogListData, MarketplaceOfferingPermissionsLogListResponses, MarketplaceOfferingPermissionsLogHeadData, MarketplaceOfferingPermissionsLogHeadResponses, MarketplaceOfferingPermissionsLogRetrieveData, MarketplaceOfferingPermissionsLogRetrieveResponses, MarketplaceOfferingPermissionsRetrieveData, MarketplaceOfferingPermissionsRetrieveResponses, MarketplaceOfferingReferralsListData, MarketplaceOfferingReferralsListResponses, MarketplaceOfferingReferralsHeadData, MarketplaceOfferingReferralsHeadResponses, MarketplaceOfferingReferralsRetrieveData, MarketplaceOfferingReferralsRetrieveResponses, MarketplaceOfferingUsagePoliciesListData, MarketplaceOfferingUsagePoliciesListResponses, MarketplaceOfferingUsagePoliciesHeadData, MarketplaceOfferingUsagePoliciesHeadResponses, MarketplaceOfferingUsagePoliciesCreateData, MarketplaceOfferingUsagePoliciesCreateResponses, MarketplaceOfferingUsagePoliciesDestroyData, MarketplaceOfferingUsagePoliciesDestroyResponses, MarketplaceOfferingUsagePoliciesRetrieveData, MarketplaceOfferingUsagePoliciesRetrieveResponses, MarketplaceOfferingUsagePoliciesPartialUpdateData, MarketplaceOfferingUsagePoliciesPartialUpdateResponses, MarketplaceOfferingUsagePoliciesUpdateData, MarketplaceOfferingUsagePoliciesUpdateResponses, MarketplaceOfferingUsagePoliciesActionsRetrieveData, MarketplaceOfferingUsagePoliciesActionsRetrieveResponses, MarketplaceOfferingUsagePoliciesActionsHeadData, MarketplaceOfferingUsagePoliciesActionsHeadResponses, MarketplaceOfferingUserRolesListData, MarketplaceOfferingUserRolesListResponses, MarketplaceOfferingUserRolesHeadData, MarketplaceOfferingUserRolesHeadResponses, MarketplaceOfferingUserRolesCreateData, MarketplaceOfferingUserRolesCreateResponses, MarketplaceOfferingUserRolesDestroyData, MarketplaceOfferingUserRolesDestroyResponses, MarketplaceOfferingUserRolesRetrieveData, MarketplaceOfferingUserRolesRetrieveResponses, MarketplaceOfferingUserRolesPartialUpdateData, MarketplaceOfferingUserRolesPartialUpdateResponses, MarketplaceOfferingUserRolesUpdateData, MarketplaceOfferingUserRolesUpdateResponses, MarketplaceOfferingUsersListData, MarketplaceOfferingUsersListResponses, MarketplaceOfferingUsersHeadData, MarketplaceOfferingUsersHeadResponses, MarketplaceOfferingUsersCreateData, MarketplaceOfferingUsersCreateResponses, MarketplaceOfferingUsersDestroyData, MarketplaceOfferingUsersDestroyResponses, MarketplaceOfferingUsersRetrieveData, MarketplaceOfferingUsersRetrieveResponses, MarketplaceOfferingUsersPartialUpdateData, MarketplaceOfferingUsersPartialUpdateResponses, MarketplaceOfferingUsersUpdateData, MarketplaceOfferingUsersUpdateResponses, MarketplaceOfferingUsersBeginCreatingData, MarketplaceOfferingUsersBeginCreatingResponses, MarketplaceOfferingUsersSetOkData, MarketplaceOfferingUsersSetOkResponses, MarketplaceOfferingUsersSetPendingAccountLinkingData, MarketplaceOfferingUsersSetPendingAccountLinkingResponses, MarketplaceOfferingUsersSetPendingAdditionalValidationData, MarketplaceOfferingUsersSetPendingAdditionalValidationResponses, MarketplaceOfferingUsersSetValidationCompleteData, MarketplaceOfferingUsersSetValidationCompleteResponses, MarketplaceOfferingUsersUpdateRestrictedData, MarketplaceOfferingUsersUpdateRestrictedResponses, MarketplaceOrdersListData, MarketplaceOrdersListResponses, MarketplaceOrdersHeadData, MarketplaceOrdersHeadResponses, MarketplaceOrdersCreateData, MarketplaceOrdersCreateResponses, MarketplaceOrdersDestroyData, MarketplaceOrdersDestroyResponses, MarketplaceOrdersRetrieveData, MarketplaceOrdersRetrieveResponses, MarketplaceOrdersApproveByConsumerData, MarketplaceOrdersApproveByConsumerResponses, MarketplaceOrdersApproveByProviderData, MarketplaceOrdersApproveByProviderResponses, MarketplaceOrdersCancelData, MarketplaceOrdersCancelResponses, MarketplaceOrdersOfferingRetrieveData, MarketplaceOrdersOfferingRetrieveResponses, MarketplaceOrdersRejectByConsumerData, MarketplaceOrdersRejectByConsumerResponses, MarketplaceOrdersRejectByProviderData, MarketplaceOrdersRejectByProviderResponses, MarketplaceOrdersSetStateDoneData, MarketplaceOrdersSetStateDoneResponses, MarketplaceOrdersSetStateErredData, MarketplaceOrdersSetStateErredResponses, MarketplaceOrdersSetStateExecutingData, MarketplaceOrdersSetStateExecutingResponses, MarketplaceOrdersUnlinkData, MarketplaceOrdersUnlinkResponses, MarketplaceOrdersUnlinkErrors, MarketplacePlanComponentsListData, MarketplacePlanComponentsListResponses, MarketplacePlanComponentsHeadData, MarketplacePlanComponentsHeadResponses, MarketplacePlanComponentsRetrieveData, MarketplacePlanComponentsRetrieveResponses, MarketplacePlansListData, MarketplacePlansListResponses, MarketplacePlansHeadData, MarketplacePlansHeadResponses, MarketplacePlansCreateData, MarketplacePlansCreateResponses, MarketplacePlansDestroyData, MarketplacePlansDestroyResponses, MarketplacePlansRetrieveData, MarketplacePlansRetrieveResponses, MarketplacePlansPartialUpdateData, MarketplacePlansPartialUpdateResponses, MarketplacePlansUpdateData, MarketplacePlansUpdateResponses, MarketplacePlansArchiveData, MarketplacePlansArchiveResponses, MarketplacePlansDeleteOrganizationGroupsData, MarketplacePlansDeleteOrganizationGroupsResponses, MarketplacePlansUpdateOrganizationGroupsData, MarketplacePlansUpdateOrganizationGroupsResponses, MarketplacePlansUpdatePricesData, MarketplacePlansUpdatePricesResponses, MarketplacePlansUpdateQuotasData, MarketplacePlansUpdateQuotasResponses, MarketplacePlansUsageStatsListData, MarketplacePlansUsageStatsListResponses, MarketplacePlansUsageStatsHeadData, MarketplacePlansUsageStatsHeadResponses, MarketplacePluginsListData, MarketplacePluginsListResponses, MarketplaceProjectEstimatedCostPoliciesListData, MarketplaceProjectEstimatedCostPoliciesListResponses, MarketplaceProjectEstimatedCostPoliciesHeadData, MarketplaceProjectEstimatedCostPoliciesHeadResponses, MarketplaceProjectEstimatedCostPoliciesCreateData, MarketplaceProjectEstimatedCostPoliciesCreateResponses, MarketplaceProjectEstimatedCostPoliciesDestroyData, MarketplaceProjectEstimatedCostPoliciesDestroyResponses, MarketplaceProjectEstimatedCostPoliciesRetrieveData, MarketplaceProjectEstimatedCostPoliciesRetrieveResponses, MarketplaceProjectEstimatedCostPoliciesPartialUpdateData, MarketplaceProjectEstimatedCostPoliciesPartialUpdateResponses, MarketplaceProjectEstimatedCostPoliciesUpdateData, MarketplaceProjectEstimatedCostPoliciesUpdateResponses, MarketplaceProjectEstimatedCostPoliciesActionsRetrieveData, MarketplaceProjectEstimatedCostPoliciesActionsRetrieveResponses, MarketplaceProjectEstimatedCostPoliciesActionsHeadData, MarketplaceProjectEstimatedCostPoliciesActionsHeadResponses, MarketplaceProjectServiceAccountsListData, MarketplaceProjectServiceAccountsListResponses, MarketplaceProjectServiceAccountsHeadData, MarketplaceProjectServiceAccountsHeadResponses, MarketplaceProjectServiceAccountsCreateData, MarketplaceProjectServiceAccountsCreateResponses, MarketplaceProjectServiceAccountsDestroyData, MarketplaceProjectServiceAccountsDestroyResponses, MarketplaceProjectServiceAccountsRetrieveData, MarketplaceProjectServiceAccountsRetrieveResponses, MarketplaceProjectServiceAccountsPartialUpdateData, MarketplaceProjectServiceAccountsPartialUpdateResponses, MarketplaceProjectServiceAccountsUpdateData, MarketplaceProjectServiceAccountsUpdateResponses, MarketplaceProjectServiceAccountsRotateApiKeyData, MarketplaceProjectServiceAccountsRotateApiKeyResponses, MarketplaceProjectUpdateRequestsListData, MarketplaceProjectUpdateRequestsListResponses, MarketplaceProjectUpdateRequestsHeadData, MarketplaceProjectUpdateRequestsHeadResponses, MarketplaceProjectUpdateRequestsRetrieveData, MarketplaceProjectUpdateRequestsRetrieveResponses, MarketplaceProjectUpdateRequestsApproveData, MarketplaceProjectUpdateRequestsApproveResponses, MarketplaceProjectUpdateRequestsRejectData, MarketplaceProjectUpdateRequestsRejectResponses, MarketplaceProviderOfferingsListData, MarketplaceProviderOfferingsListResponses, MarketplaceProviderOfferingsHeadData, MarketplaceProviderOfferingsHeadResponses, MarketplaceProviderOfferingsCreateData, MarketplaceProviderOfferingsCreateResponses, MarketplaceProviderOfferingsDestroyData, MarketplaceProviderOfferingsDestroyResponses, MarketplaceProviderOfferingsRetrieveData, MarketplaceProviderOfferingsRetrieveResponses, MarketplaceProviderOfferingsActivateData, MarketplaceProviderOfferingsActivateResponses, MarketplaceProviderOfferingsAddEndpointData, MarketplaceProviderOfferingsAddEndpointResponses, MarketplaceProviderOfferingsAddUserData, MarketplaceProviderOfferingsAddUserResponses, MarketplaceProviderOfferingsArchiveData, MarketplaceProviderOfferingsArchiveResponses, MarketplaceProviderOfferingsComponentStatsListData, MarketplaceProviderOfferingsComponentStatsListResponses, MarketplaceProviderOfferingsCostsListData, MarketplaceProviderOfferingsCostsListResponses, MarketplaceProviderOfferingsCreateOfferingComponentData, MarketplaceProviderOfferingsCreateOfferingComponentResponses, MarketplaceProviderOfferingsCustomersListData, MarketplaceProviderOfferingsCustomersListResponses, MarketplaceProviderOfferingsDeleteEndpointData, MarketplaceProviderOfferingsDeleteEndpointResponses, MarketplaceProviderOfferingsDeleteImageData, MarketplaceProviderOfferingsDeleteImageResponses, MarketplaceProviderOfferingsDeleteOrganizationGroupsData, MarketplaceProviderOfferingsDeleteOrganizationGroupsResponses, MarketplaceProviderOfferingsDeleteThumbnailData, MarketplaceProviderOfferingsDeleteThumbnailResponses, MarketplaceProviderOfferingsDeleteUserData, MarketplaceProviderOfferingsDeleteUserResponses, MarketplaceProviderOfferingsDraftData, MarketplaceProviderOfferingsDraftResponses, MarketplaceProviderOfferingsGlauthUsersConfigRetrieveData, MarketplaceProviderOfferingsGlauthUsersConfigRetrieveResponses, MarketplaceProviderOfferingsImportResourceData, MarketplaceProviderOfferingsImportResourceResponses, MarketplaceProviderOfferingsImportableResourcesListData, MarketplaceProviderOfferingsImportableResourcesListResponses, MarketplaceProviderOfferingsListCustomerProjectsListData, MarketplaceProviderOfferingsListCustomerProjectsListResponses, MarketplaceProviderOfferingsListCustomerServiceAccountsRetrieveData, MarketplaceProviderOfferingsListCustomerServiceAccountsRetrieveResponses, MarketplaceProviderOfferingsListCustomerUsersListData, MarketplaceProviderOfferingsListCustomerUsersListResponses, MarketplaceProviderOfferingsListProjectServiceAccountsRetrieveData, MarketplaceProviderOfferingsListProjectServiceAccountsRetrieveResponses, MarketplaceProviderOfferingsListUsersListData, MarketplaceProviderOfferingsListUsersListResponses, MarketplaceProviderOfferingsMoveOfferingData, MarketplaceProviderOfferingsMoveOfferingResponses, MarketplaceProviderOfferingsOrdersListData, MarketplaceProviderOfferingsOrdersListResponses, MarketplaceProviderOfferingsOrdersRetrieveData, MarketplaceProviderOfferingsOrdersRetrieveResponses, MarketplaceProviderOfferingsPauseData, MarketplaceProviderOfferingsPauseResponses, MarketplaceProviderOfferingsRefreshOfferingUsernamesData, MarketplaceProviderOfferingsRefreshOfferingUsernamesResponses, MarketplaceProviderOfferingsRemoveOfferingComponentData, MarketplaceProviderOfferingsRemoveOfferingComponentResponses, MarketplaceProviderOfferingsSetBackendMetadataData, MarketplaceProviderOfferingsSetBackendMetadataResponses, MarketplaceProviderOfferingsStatsRetrieveData, MarketplaceProviderOfferingsStatsRetrieveResponses, MarketplaceProviderOfferingsSyncData, MarketplaceProviderOfferingsSyncResponses, MarketplaceProviderOfferingsUnpauseData, MarketplaceProviderOfferingsUnpauseResponses, MarketplaceProviderOfferingsUpdateAttributesData, MarketplaceProviderOfferingsUpdateAttributesResponses, MarketplaceProviderOfferingsUpdateDescriptionData, MarketplaceProviderOfferingsUpdateDescriptionResponses, MarketplaceProviderOfferingsUpdateImageData, MarketplaceProviderOfferingsUpdateImageResponses, MarketplaceProviderOfferingsUpdateIntegrationData, MarketplaceProviderOfferingsUpdateIntegrationResponses, MarketplaceProviderOfferingsUpdateLocationData, MarketplaceProviderOfferingsUpdateLocationResponses, MarketplaceProviderOfferingsUpdateOfferingComponentData, MarketplaceProviderOfferingsUpdateOfferingComponentResponses, MarketplaceProviderOfferingsUpdateOptionsData, MarketplaceProviderOfferingsUpdateOptionsResponses, MarketplaceProviderOfferingsUpdateOrganizationGroupsData, MarketplaceProviderOfferingsUpdateOrganizationGroupsResponses, MarketplaceProviderOfferingsUpdateOverviewData, MarketplaceProviderOfferingsUpdateOverviewResponses, MarketplaceProviderOfferingsUpdateResourceOptionsData, MarketplaceProviderOfferingsUpdateResourceOptionsResponses, MarketplaceProviderOfferingsUpdateThumbnailData, MarketplaceProviderOfferingsUpdateThumbnailResponses, MarketplaceProviderOfferingsUpdateUserData, MarketplaceProviderOfferingsUpdateUserResponses, MarketplaceProviderOfferingsUserHasResourceAccessRetrieveData, MarketplaceProviderOfferingsUserHasResourceAccessRetrieveResponses, MarketplaceProviderOfferingsGroupsListData, MarketplaceProviderOfferingsGroupsListResponses, MarketplaceProviderOfferingsGroupsHeadData, MarketplaceProviderOfferingsGroupsHeadResponses, MarketplaceProviderResourcesListData, MarketplaceProviderResourcesListResponses, MarketplaceProviderResourcesHeadData, MarketplaceProviderResourcesHeadResponses, MarketplaceProviderResourcesRetrieveData, MarketplaceProviderResourcesRetrieveResponses, MarketplaceProviderResourcesPartialUpdateData, MarketplaceProviderResourcesPartialUpdateResponses, MarketplaceProviderResourcesUpdateData, MarketplaceProviderResourcesUpdateResponses, MarketplaceProviderResourcesDetailsRetrieveData, MarketplaceProviderResourcesDetailsRetrieveResponses, MarketplaceProviderResourcesGlauthUsersConfigRetrieveData, MarketplaceProviderResourcesGlauthUsersConfigRetrieveResponses, MarketplaceProviderResourcesMoveResourceData, MarketplaceProviderResourcesMoveResourceResponses, MarketplaceProviderResourcesOfferingRetrieveData, MarketplaceProviderResourcesOfferingRetrieveResponses, MarketplaceProviderResourcesOfferingForSubresourcesListData, MarketplaceProviderResourcesOfferingForSubresourcesListResponses, MarketplaceProviderResourcesPlanPeriodsListData, MarketplaceProviderResourcesPlanPeriodsListResponses, MarketplaceProviderResourcesPullData, MarketplaceProviderResourcesPullResponses, MarketplaceProviderResourcesRefreshLastSyncData, MarketplaceProviderResourcesRefreshLastSyncResponses, MarketplaceProviderResourcesSetAsErredData, MarketplaceProviderResourcesSetAsErredResponses, MarketplaceProviderResourcesSetAsOkData, MarketplaceProviderResourcesSetAsOkResponses, MarketplaceProviderResourcesSetBackendIdData, MarketplaceProviderResourcesSetBackendIdResponses, MarketplaceProviderResourcesSetBackendMetadataData, MarketplaceProviderResourcesSetBackendMetadataResponses, MarketplaceProviderResourcesSetEndDateByProviderData, MarketplaceProviderResourcesSetEndDateByProviderResponses, MarketplaceProviderResourcesSetEndDateByStaffData, MarketplaceProviderResourcesSetEndDateByStaffResponses, MarketplaceProviderResourcesSetLimitsData, MarketplaceProviderResourcesSetLimitsResponses, MarketplaceProviderResourcesSetSlugData, MarketplaceProviderResourcesSetSlugResponses, MarketplaceProviderResourcesSubmitReportData, MarketplaceProviderResourcesSubmitReportResponses, MarketplaceProviderResourcesTeamListData, MarketplaceProviderResourcesTeamListResponses, MarketplaceProviderResourcesTerminateData, MarketplaceProviderResourcesTerminateResponses, MarketplaceProviderResourcesUnlinkData, MarketplaceProviderResourcesUnlinkResponses, MarketplacePublicApiCheckSignatureData, MarketplacePublicApiCheckSignatureResponses, MarketplacePublicApiSetUsageData, MarketplacePublicApiSetUsageResponses, MarketplacePublicOfferingsListData, MarketplacePublicOfferingsListResponses, MarketplacePublicOfferingsHeadData, MarketplacePublicOfferingsHeadResponses, MarketplacePublicOfferingsRetrieveData, MarketplacePublicOfferingsRetrieveResponses, MarketplacePublicOfferingsPlansListData, MarketplacePublicOfferingsPlansListResponses, MarketplacePublicOfferingsPlansRetrieveData, MarketplacePublicOfferingsPlansRetrieveResponses, MarketplaceRelatedCustomersListData, MarketplaceRelatedCustomersListResponses, MarketplaceRemoteSynchronisationsListData, MarketplaceRemoteSynchronisationsListResponses, MarketplaceRemoteSynchronisationsHeadData, MarketplaceRemoteSynchronisationsHeadResponses, MarketplaceRemoteSynchronisationsCreateData, MarketplaceRemoteSynchronisationsCreateResponses, MarketplaceRemoteSynchronisationsDestroyData, MarketplaceRemoteSynchronisationsDestroyResponses, MarketplaceRemoteSynchronisationsRetrieveData, MarketplaceRemoteSynchronisationsRetrieveResponses, MarketplaceRemoteSynchronisationsPartialUpdateData, MarketplaceRemoteSynchronisationsPartialUpdateResponses, MarketplaceRemoteSynchronisationsUpdateData, MarketplaceRemoteSynchronisationsUpdateResponses, MarketplaceRemoteSynchronisationsRunSynchronisationData, MarketplaceRemoteSynchronisationsRunSynchronisationResponses, MarketplaceResourceOfferingsListData, MarketplaceResourceOfferingsListResponses, MarketplaceResourceUsersListData, MarketplaceResourceUsersListResponses, MarketplaceResourceUsersHeadData, MarketplaceResourceUsersHeadResponses, MarketplaceResourceUsersCreateData, MarketplaceResourceUsersCreateResponses, MarketplaceResourceUsersDestroyData, MarketplaceResourceUsersDestroyResponses, MarketplaceResourceUsersRetrieveData, MarketplaceResourceUsersRetrieveResponses, MarketplaceResourcesListData, MarketplaceResourcesListResponses, MarketplaceResourcesHeadData, MarketplaceResourcesHeadResponses, MarketplaceResourcesRetrieveData, MarketplaceResourcesRetrieveResponses, MarketplaceResourcesPartialUpdateData, MarketplaceResourcesPartialUpdateResponses, MarketplaceResourcesUpdateData, MarketplaceResourcesUpdateResponses, MarketplaceResourcesDetailsRetrieveData, MarketplaceResourcesDetailsRetrieveResponses, MarketplaceResourcesGlauthUsersConfigRetrieveData, MarketplaceResourcesGlauthUsersConfigRetrieveResponses, MarketplaceResourcesMoveResourceData, MarketplaceResourcesMoveResourceResponses, MarketplaceResourcesOfferingRetrieveData, MarketplaceResourcesOfferingRetrieveResponses, MarketplaceResourcesOfferingForSubresourcesListData, MarketplaceResourcesOfferingForSubresourcesListResponses, MarketplaceResourcesPlanPeriodsListData, MarketplaceResourcesPlanPeriodsListResponses, MarketplaceResourcesPullData, MarketplaceResourcesPullResponses, MarketplaceResourcesSetEndDateByStaffData, MarketplaceResourcesSetEndDateByStaffResponses, MarketplaceResourcesSetSlugData, MarketplaceResourcesSetSlugResponses, MarketplaceResourcesSwitchPlanData, MarketplaceResourcesSwitchPlanResponses, MarketplaceResourcesTeamListData, MarketplaceResourcesTeamListResponses, MarketplaceResourcesTerminateData, MarketplaceResourcesTerminateResponses, MarketplaceResourcesUnlinkData, MarketplaceResourcesUnlinkResponses, MarketplaceResourcesUpdateLimitsData, MarketplaceResourcesUpdateLimitsResponses, MarketplaceResourcesUpdateOptionsData, MarketplaceResourcesUpdateOptionsResponses, MarketplaceResourcesSuggestNameData, MarketplaceResourcesSuggestNameResponses, MarketplaceRobotAccountsListData, MarketplaceRobotAccountsListResponses, MarketplaceRobotAccountsHeadData, MarketplaceRobotAccountsHeadResponses, MarketplaceRobotAccountsCreateData, MarketplaceRobotAccountsCreateResponses, MarketplaceRobotAccountsDestroyData, MarketplaceRobotAccountsDestroyResponses, MarketplaceRobotAccountsRetrieveData, MarketplaceRobotAccountsRetrieveResponses, MarketplaceRobotAccountsPartialUpdateData, MarketplaceRobotAccountsPartialUpdateResponses, MarketplaceRobotAccountsUpdateData, MarketplaceRobotAccountsUpdateResponses, MarketplaceRobotAccountsSetStateCreatingData, MarketplaceRobotAccountsSetStateCreatingResponses, MarketplaceRobotAccountsSetStateCreatingErrors, MarketplaceRobotAccountsSetStateDeletedData, MarketplaceRobotAccountsSetStateDeletedResponses, MarketplaceRobotAccountsSetStateErredData, MarketplaceRobotAccountsSetStateErredResponses, MarketplaceRobotAccountsSetStateOkData, MarketplaceRobotAccountsSetStateOkResponses, MarketplaceRobotAccountsSetStateRequestDeletionData, MarketplaceRobotAccountsSetStateRequestDeletionResponses, MarketplaceRuntimeStatesListData, MarketplaceRuntimeStatesListResponses, MarketplaceScreenshotsListData, MarketplaceScreenshotsListResponses, MarketplaceScreenshotsHeadData, MarketplaceScreenshotsHeadResponses, MarketplaceScreenshotsCreateData, MarketplaceScreenshotsCreateResponses, MarketplaceScreenshotsDestroyData, MarketplaceScreenshotsDestroyResponses, MarketplaceScreenshotsRetrieveData, MarketplaceScreenshotsRetrieveResponses, MarketplaceScreenshotsPartialUpdateData, MarketplaceScreenshotsPartialUpdateResponses, MarketplaceScreenshotsUpdateData, MarketplaceScreenshotsUpdateResponses, MarketplaceScriptAsyncDryRunListData, MarketplaceScriptAsyncDryRunListResponses, MarketplaceScriptAsyncDryRunHeadData, MarketplaceScriptAsyncDryRunHeadResponses, MarketplaceScriptAsyncDryRunRetrieveData, MarketplaceScriptAsyncDryRunRetrieveResponses, MarketplaceScriptDryRunAsyncRunData, MarketplaceScriptDryRunAsyncRunResponses, MarketplaceScriptDryRunRunData, MarketplaceScriptDryRunRunResponses, MarketplaceScriptSyncResourceData, MarketplaceScriptSyncResourceResponses, MarketplaceScriptSyncResourceErrors, MarketplaceSectionsListData, MarketplaceSectionsListResponses, MarketplaceSectionsHeadData, MarketplaceSectionsHeadResponses, MarketplaceSectionsCreateData, MarketplaceSectionsCreateResponses, MarketplaceSectionsDestroyData, MarketplaceSectionsDestroyResponses, MarketplaceSectionsRetrieveData, MarketplaceSectionsRetrieveResponses, MarketplaceSectionsPartialUpdateData, MarketplaceSectionsPartialUpdateResponses, MarketplaceSectionsUpdateData, MarketplaceSectionsUpdateResponses, MarketplaceServiceProvidersListData, MarketplaceServiceProvidersListResponses, MarketplaceServiceProvidersHeadData, MarketplaceServiceProvidersHeadResponses, MarketplaceServiceProvidersCreateData, MarketplaceServiceProvidersCreateResponses, MarketplaceServiceProvidersCustomerProjectsListData, MarketplaceServiceProvidersCustomerProjectsListResponses, MarketplaceServiceProvidersCustomersListData, MarketplaceServiceProvidersCustomersListResponses, MarketplaceServiceProvidersKeysListData, MarketplaceServiceProvidersKeysListResponses, MarketplaceServiceProvidersOfferingsListData, MarketplaceServiceProvidersOfferingsListResponses, MarketplaceServiceProvidersProjectPermissionsListData, MarketplaceServiceProvidersProjectPermissionsListResponses, MarketplaceServiceProvidersProjectsListData, MarketplaceServiceProvidersProjectsListResponses, MarketplaceServiceProvidersUserCustomersListData, MarketplaceServiceProvidersUserCustomersListResponses, MarketplaceServiceProvidersUsersListData, MarketplaceServiceProvidersUsersListResponses, MarketplaceServiceProvidersDestroyData, MarketplaceServiceProvidersDestroyResponses, MarketplaceServiceProvidersRetrieveData, MarketplaceServiceProvidersRetrieveResponses, MarketplaceServiceProvidersPartialUpdateData, MarketplaceServiceProvidersPartialUpdateResponses, MarketplaceServiceProvidersUpdateData, MarketplaceServiceProvidersUpdateResponses, MarketplaceServiceProvidersAddUserData, MarketplaceServiceProvidersAddUserResponses, ServiceProviderApiSecretCodeRetrieveData, ServiceProviderApiSecretCodeRetrieveResponses, ServiceProviderApiSecretCodeGenerateData, ServiceProviderApiSecretCodeGenerateResponses, MarketplaceServiceProvidersDeleteUserData, MarketplaceServiceProvidersDeleteUserResponses, MarketplaceServiceProvidersListUsersListData, MarketplaceServiceProvidersListUsersListResponses, MarketplaceServiceProvidersRevenueListData, MarketplaceServiceProvidersRevenueListResponses, MarketplaceServiceProvidersRobotAccountCustomersListData, MarketplaceServiceProvidersRobotAccountCustomersListResponses, MarketplaceServiceProvidersRobotAccountProjectsListData, MarketplaceServiceProvidersRobotAccountProjectsListResponses, MarketplaceServiceProvidersSetOfferingsUsernameData, MarketplaceServiceProvidersSetOfferingsUsernameResponses, MarketplaceServiceProvidersStatRetrieveData, MarketplaceServiceProvidersStatRetrieveResponses, MarketplaceServiceProvidersUpdateUserData, MarketplaceServiceProvidersUpdateUserResponses, MarketplaceStatsComponentUsagesListData, MarketplaceStatsComponentUsagesListResponses, MarketplaceStatsComponentUsagesHeadData, MarketplaceStatsComponentUsagesHeadResponses, MarketplaceStatsComponentUsagesPerMonthListData, MarketplaceStatsComponentUsagesPerMonthListResponses, MarketplaceStatsComponentUsagesPerMonthHeadData, MarketplaceStatsComponentUsagesPerMonthHeadResponses, MarketplaceStatsComponentUsagesPerProjectListData, MarketplaceStatsComponentUsagesPerProjectListResponses, MarketplaceStatsComponentUsagesPerProjectHeadData, MarketplaceStatsComponentUsagesPerProjectHeadResponses, MarketplaceStatsCountActiveResourcesGroupedByOfferingListData, MarketplaceStatsCountActiveResourcesGroupedByOfferingListResponses, MarketplaceStatsCountActiveResourcesGroupedByOfferingHeadData, MarketplaceStatsCountActiveResourcesGroupedByOfferingHeadResponses, MarketplaceStatsCountActiveResourcesGroupedByOfferingCountryListData, MarketplaceStatsCountActiveResourcesGroupedByOfferingCountryListResponses, MarketplaceStatsCountActiveResourcesGroupedByOfferingCountryHeadData, MarketplaceStatsCountActiveResourcesGroupedByOfferingCountryHeadResponses, MarketplaceStatsCountActiveResourcesGroupedByOrganizationGroupListData, MarketplaceStatsCountActiveResourcesGroupedByOrganizationGroupListResponses, MarketplaceStatsCountActiveResourcesGroupedByOrganizationGroupHeadData, MarketplaceStatsCountActiveResourcesGroupedByOrganizationGroupHeadResponses, MarketplaceStatsCountProjectsGroupedByProviderAndIndustryFlagListData, MarketplaceStatsCountProjectsGroupedByProviderAndIndustryFlagListResponses, MarketplaceStatsCountProjectsGroupedByProviderAndIndustryFlagHeadData, MarketplaceStatsCountProjectsGroupedByProviderAndIndustryFlagHeadResponses, MarketplaceStatsCountProjectsGroupedByProviderAndOecdListData, MarketplaceStatsCountProjectsGroupedByProviderAndOecdListResponses, MarketplaceStatsCountProjectsGroupedByProviderAndOecdHeadData, MarketplaceStatsCountProjectsGroupedByProviderAndOecdHeadResponses, MarketplaceStatsCountProjectsOfServiceProvidersListData, MarketplaceStatsCountProjectsOfServiceProvidersListResponses, MarketplaceStatsCountProjectsOfServiceProvidersHeadData, MarketplaceStatsCountProjectsOfServiceProvidersHeadResponses, MarketplaceStatsCountProjectsOfServiceProvidersGroupedByOecdListData, MarketplaceStatsCountProjectsOfServiceProvidersGroupedByOecdListResponses, MarketplaceStatsCountProjectsOfServiceProvidersGroupedByOecdHeadData, MarketplaceStatsCountProjectsOfServiceProvidersGroupedByOecdHeadResponses, MarketplaceStatsCountUniqueUsersConnectedWithActiveResourcesOfServiceProviderListData, MarketplaceStatsCountUniqueUsersConnectedWithActiveResourcesOfServiceProviderListResponses, MarketplaceStatsCountUniqueUsersConnectedWithActiveResourcesOfServiceProviderHeadData, MarketplaceStatsCountUniqueUsersConnectedWithActiveResourcesOfServiceProviderHeadResponses, MarketplaceStatsCountUsersOfServiceProvidersListData, MarketplaceStatsCountUsersOfServiceProvidersListResponses, MarketplaceStatsCountUsersOfServiceProvidersHeadData, MarketplaceStatsCountUsersOfServiceProvidersHeadResponses, MarketplaceStatsCustomerMemberCountListData, MarketplaceStatsCustomerMemberCountListResponses, MarketplaceStatsCustomerMemberCountHeadData, MarketplaceStatsCustomerMemberCountHeadResponses, MarketplaceStatsOfferingsCounterStatsListData, MarketplaceStatsOfferingsCounterStatsListResponses, MarketplaceStatsOfferingsCounterStatsHeadData, MarketplaceStatsOfferingsCounterStatsHeadResponses, MarketplaceStatsOrganizationProjectCountListData, MarketplaceStatsOrganizationProjectCountListResponses, MarketplaceStatsOrganizationProjectCountHeadData, MarketplaceStatsOrganizationProjectCountHeadResponses, MarketplaceStatsOrganizationResourceCountListData, MarketplaceStatsOrganizationResourceCountListResponses, MarketplaceStatsOrganizationResourceCountHeadData, MarketplaceStatsOrganizationResourceCountHeadResponses, MarketplaceStatsProjectsLimitsGroupedByIndustryFlagRetrieveData, MarketplaceStatsProjectsLimitsGroupedByIndustryFlagRetrieveResponses, MarketplaceStatsProjectsLimitsGroupedByIndustryFlagHeadData, MarketplaceStatsProjectsLimitsGroupedByIndustryFlagHeadResponses, MarketplaceStatsProjectsLimitsGroupedByOecdRetrieveData, MarketplaceStatsProjectsLimitsGroupedByOecdRetrieveResponses, MarketplaceStatsProjectsLimitsGroupedByOecdHeadData, MarketplaceStatsProjectsLimitsGroupedByOecdHeadResponses, MarketplaceStatsProjectsUsagesGroupedByIndustryFlagRetrieveData, MarketplaceStatsProjectsUsagesGroupedByIndustryFlagRetrieveResponses, MarketplaceStatsProjectsUsagesGroupedByIndustryFlagHeadData, MarketplaceStatsProjectsUsagesGroupedByIndustryFlagHeadResponses, MarketplaceStatsProjectsUsagesGroupedByOecdRetrieveData, MarketplaceStatsProjectsUsagesGroupedByOecdRetrieveResponses, MarketplaceStatsProjectsUsagesGroupedByOecdHeadData, MarketplaceStatsProjectsUsagesGroupedByOecdHeadResponses, MarketplaceStatsResourcesLimitsListData, MarketplaceStatsResourcesLimitsListResponses, MarketplaceStatsResourcesLimitsHeadData, MarketplaceStatsResourcesLimitsHeadResponses, MarketplaceStatsTotalCostOfActiveResourcesPerOfferingListData, MarketplaceStatsTotalCostOfActiveResourcesPerOfferingListResponses, MarketplaceStatsTotalCostOfActiveResourcesPerOfferingHeadData, MarketplaceStatsTotalCostOfActiveResourcesPerOfferingHeadResponses, MediaRetrieveData, MediaRetrieveResponses, NotificationMessagesListData, NotificationMessagesListResponses, NotificationMessagesHeadData, NotificationMessagesHeadResponses, NotificationMessagesCreateData, NotificationMessagesCreateResponses, NotificationMessagesTemplatesListData, NotificationMessagesTemplatesListResponses, NotificationMessagesTemplatesHeadData, NotificationMessagesTemplatesHeadResponses, NotificationMessagesTemplatesCreateData, NotificationMessagesTemplatesCreateResponses, NotificationMessagesTemplatesDestroyData, NotificationMessagesTemplatesDestroyResponses, NotificationMessagesTemplatesRetrieveData, NotificationMessagesTemplatesRetrieveResponses, NotificationMessagesTemplatesPartialUpdateData, NotificationMessagesTemplatesPartialUpdateResponses, NotificationMessagesTemplatesUpdateData, NotificationMessagesTemplatesUpdateResponses, NotificationMessagesTemplatesOverrideData, NotificationMessagesTemplatesOverrideResponses, NotificationMessagesDestroyData, NotificationMessagesDestroyResponses, NotificationMessagesRetrieveData, NotificationMessagesRetrieveResponses, NotificationMessagesPartialUpdateData, NotificationMessagesPartialUpdateResponses, NotificationMessagesUpdateData, NotificationMessagesUpdateResponses, NotificationMessagesDisableData, NotificationMessagesDisableResponses, NotificationMessagesEnableData, NotificationMessagesEnableResponses, OpenstackBackupsListData, OpenstackBackupsListResponses, OpenstackBackupsHeadData, OpenstackBackupsHeadResponses, OpenstackBackupsDestroyData, OpenstackBackupsDestroyResponses, OpenstackBackupsRetrieveData, OpenstackBackupsRetrieveResponses, OpenstackBackupsPartialUpdateData, OpenstackBackupsPartialUpdateResponses, OpenstackBackupsUpdateData, OpenstackBackupsUpdateResponses, OpenstackBackupsPullData, OpenstackBackupsPullResponses, OpenstackBackupsRestoreData, OpenstackBackupsRestoreResponses, OpenstackBackupsUnlinkData, OpenstackBackupsUnlinkResponses, OpenstackFlavorsListData, OpenstackFlavorsListResponses, OpenstackFlavorsHeadData, OpenstackFlavorsHeadResponses, OpenstackFlavorsRetrieveData, OpenstackFlavorsRetrieveResponses, OpenstackFlavorsUsageStatsRetrieveData, OpenstackFlavorsUsageStatsRetrieveResponses, OpenstackFlavorsUsageStatsHeadData, OpenstackFlavorsUsageStatsHeadResponses, OpenstackFloatingIpsListData, OpenstackFloatingIpsListResponses, OpenstackFloatingIpsHeadData, OpenstackFloatingIpsHeadResponses, OpenstackFloatingIpsDestroyData, OpenstackFloatingIpsDestroyResponses, OpenstackFloatingIpsRetrieveData, OpenstackFloatingIpsRetrieveResponses, OpenstackFloatingIpsAttachToPortData, OpenstackFloatingIpsAttachToPortResponses, OpenstackFloatingIpsDetachFromPortData, OpenstackFloatingIpsDetachFromPortResponses, OpenstackFloatingIpsPullData, OpenstackFloatingIpsPullResponses, OpenstackFloatingIpsUnlinkData, OpenstackFloatingIpsUnlinkResponses, OpenstackFloatingIpsUpdateDescriptionData, OpenstackFloatingIpsUpdateDescriptionResponses, OpenstackImagesListData, OpenstackImagesListResponses, OpenstackImagesHeadData, OpenstackImagesHeadResponses, OpenstackImagesRetrieveData, OpenstackImagesRetrieveResponses, OpenstackImagesUsageStatsRetrieveData, OpenstackImagesUsageStatsRetrieveResponses, OpenstackImagesUsageStatsHeadData, OpenstackImagesUsageStatsHeadResponses, OpenstackInstanceAvailabilityZonesListData, OpenstackInstanceAvailabilityZonesListResponses, OpenstackInstanceAvailabilityZonesHeadData, OpenstackInstanceAvailabilityZonesHeadResponses, OpenstackInstanceAvailabilityZonesRetrieveData, OpenstackInstanceAvailabilityZonesRetrieveResponses, OpenstackInstancesListData, OpenstackInstancesListResponses, OpenstackInstancesHeadData, OpenstackInstancesHeadResponses, OpenstackInstancesRetrieveData, OpenstackInstancesRetrieveResponses, OpenstackInstancesPartialUpdateData, OpenstackInstancesPartialUpdateResponses, OpenstackInstancesUpdateData, OpenstackInstancesUpdateResponses, OpenstackInstancesBackupData, OpenstackInstancesBackupResponses, OpenstackInstancesChangeFlavorData, OpenstackInstancesChangeFlavorResponses, OpenstackInstancesConsoleRetrieveData, OpenstackInstancesConsoleRetrieveResponses, OpenstackInstancesConsoleLogRetrieveData, OpenstackInstancesConsoleLogRetrieveResponses, OpenstackInstancesFloatingIpsListData, OpenstackInstancesFloatingIpsListResponses, OpenstackInstancesPortsListData, OpenstackInstancesPortsListResponses, OpenstackInstancesPullData, OpenstackInstancesPullResponses, OpenstackInstancesRestartData, OpenstackInstancesRestartResponses, OpenstackInstancesStartData, OpenstackInstancesStartResponses, OpenstackInstancesStopData, OpenstackInstancesStopResponses, OpenstackInstancesUnlinkData, OpenstackInstancesUnlinkResponses, OpenstackInstancesUpdateAllowedAddressPairsData, OpenstackInstancesUpdateAllowedAddressPairsResponses, OpenstackInstancesUpdateFloatingIpsData, OpenstackInstancesUpdateFloatingIpsResponses, OpenstackInstancesUpdatePortsData, OpenstackInstancesUpdatePortsResponses, OpenstackInstancesUpdateSecurityGroupsData, OpenstackInstancesUpdateSecurityGroupsResponses, OpenstackMarketplaceTenantsListData, OpenstackMarketplaceTenantsListResponses, OpenstackMarketplaceTenantsHeadData, OpenstackMarketplaceTenantsHeadResponses, OpenstackMarketplaceTenantsRetrieveData, OpenstackMarketplaceTenantsRetrieveResponses, OpenstackMarketplaceTenantsCreateImageData, OpenstackMarketplaceTenantsCreateImageResponses, OpenstackMarketplaceTenantsUploadImageDataData, OpenstackMarketplaceTenantsUploadImageDataResponses, OpenstackMigrationsListData, OpenstackMigrationsListResponses, OpenstackMigrationsHeadData, OpenstackMigrationsHeadResponses, OpenstackMigrationsCreateData, OpenstackMigrationsCreateResponses, OpenstackMigrationsDestroyData, OpenstackMigrationsDestroyResponses, OpenstackMigrationsRetrieveData, OpenstackMigrationsRetrieveResponses, OpenstackMigrationsPartialUpdateData, OpenstackMigrationsPartialUpdateResponses, OpenstackMigrationsUpdateData, OpenstackMigrationsUpdateResponses, OpenstackNetworkRbacPoliciesListData, OpenstackNetworkRbacPoliciesListResponses, OpenstackNetworkRbacPoliciesHeadData, OpenstackNetworkRbacPoliciesHeadResponses, OpenstackNetworkRbacPoliciesRetrieveData, OpenstackNetworkRbacPoliciesRetrieveResponses, OpenstackNetworksListData, OpenstackNetworksListResponses, OpenstackNetworksHeadData, OpenstackNetworksHeadResponses, OpenstackNetworksDestroyData, OpenstackNetworksDestroyResponses, OpenstackNetworksRetrieveData, OpenstackNetworksRetrieveResponses, OpenstackNetworksPartialUpdateData, OpenstackNetworksPartialUpdateResponses, OpenstackNetworksUpdateData, OpenstackNetworksUpdateResponses, OpenstackNetworksCreateSubnetData, OpenstackNetworksCreateSubnetResponses, OpenstackNetworksPullData, OpenstackNetworksPullResponses, OpenstackNetworksRbacPolicyCreateData, OpenstackNetworksRbacPolicyCreateResponses, OpenstackNetworksRbacPolicyDeleteDestroyData, OpenstackNetworksRbacPolicyDeleteDestroyResponses, OpenstackNetworksSetMtuData, OpenstackNetworksSetMtuResponses, OpenstackNetworksUnlinkData, OpenstackNetworksUnlinkResponses, OpenstackPortsListData, OpenstackPortsListResponses, OpenstackPortsHeadData, OpenstackPortsHeadResponses, OpenstackPortsCreateData, OpenstackPortsCreateResponses, OpenstackPortsDestroyData, OpenstackPortsDestroyResponses, OpenstackPortsRetrieveData, OpenstackPortsRetrieveResponses, OpenstackPortsPartialUpdateData, OpenstackPortsPartialUpdateResponses, OpenstackPortsUpdateData, OpenstackPortsUpdateResponses, OpenstackPortsDisablePortData, OpenstackPortsDisablePortResponses, OpenstackPortsDisablePortSecurityData, OpenstackPortsDisablePortSecurityResponses, OpenstackPortsEnablePortData, OpenstackPortsEnablePortResponses, OpenstackPortsEnablePortSecurityData, OpenstackPortsEnablePortSecurityResponses, OpenstackPortsPullData, OpenstackPortsPullResponses, OpenstackPortsUnlinkData, OpenstackPortsUnlinkResponses, OpenstackPortsUpdatePortIpData, OpenstackPortsUpdatePortIpResponses, OpenstackPortsUpdateSecurityGroupsData, OpenstackPortsUpdateSecurityGroupsResponses, OpenstackRoutersListData, OpenstackRoutersListResponses, OpenstackRoutersHeadData, OpenstackRoutersHeadResponses, OpenstackRoutersCreateData, OpenstackRoutersCreateResponses, OpenstackRoutersDestroyData, OpenstackRoutersDestroyResponses, OpenstackRoutersRetrieveData, OpenstackRoutersRetrieveResponses, OpenstackRoutersAddRouterInterfaceData, OpenstackRoutersAddRouterInterfaceResponses, OpenstackRoutersRemoveRouterInterfaceData, OpenstackRoutersRemoveRouterInterfaceResponses, OpenstackRoutersSetRoutesData, OpenstackRoutersSetRoutesResponses, OpenstackSecurityGroupsListData, OpenstackSecurityGroupsListResponses, OpenstackSecurityGroupsHeadData, OpenstackSecurityGroupsHeadResponses, OpenstackSecurityGroupsDestroyData, OpenstackSecurityGroupsDestroyResponses, OpenstackSecurityGroupsRetrieveData, OpenstackSecurityGroupsRetrieveResponses, OpenstackSecurityGroupsPartialUpdateData, OpenstackSecurityGroupsPartialUpdateResponses, OpenstackSecurityGroupsUpdateData, OpenstackSecurityGroupsUpdateResponses, OpenstackSecurityGroupsPullData, OpenstackSecurityGroupsPullResponses, OpenstackSecurityGroupsSetRulesData, OpenstackSecurityGroupsSetRulesResponses, OpenstackSecurityGroupsUnlinkData, OpenstackSecurityGroupsUnlinkResponses, OpenstackServerGroupsListData, OpenstackServerGroupsListResponses, OpenstackServerGroupsHeadData, OpenstackServerGroupsHeadResponses, OpenstackServerGroupsCreateData, OpenstackServerGroupsCreateResponses, OpenstackServerGroupsDestroyData, OpenstackServerGroupsDestroyResponses, OpenstackServerGroupsRetrieveData, OpenstackServerGroupsRetrieveResponses, OpenstackServerGroupsPartialUpdateData, OpenstackServerGroupsPartialUpdateResponses, OpenstackServerGroupsUpdateData, OpenstackServerGroupsUpdateResponses, OpenstackServerGroupsPullData, OpenstackServerGroupsPullResponses, OpenstackServerGroupsUnlinkData, OpenstackServerGroupsUnlinkResponses, OpenstackSnapshotsListData, OpenstackSnapshotsListResponses, OpenstackSnapshotsHeadData, OpenstackSnapshotsHeadResponses, OpenstackSnapshotsDestroyData, OpenstackSnapshotsDestroyResponses, OpenstackSnapshotsRetrieveData, OpenstackSnapshotsRetrieveResponses, OpenstackSnapshotsPartialUpdateData, OpenstackSnapshotsPartialUpdateResponses, OpenstackSnapshotsUpdateData, OpenstackSnapshotsUpdateResponses, OpenstackSnapshotsPullData, OpenstackSnapshotsPullResponses, OpenstackSnapshotsRestorationsListData, OpenstackSnapshotsRestorationsListResponses, OpenstackSnapshotsRestoreData, OpenstackSnapshotsRestoreResponses, OpenstackSnapshotsUnlinkData, OpenstackSnapshotsUnlinkResponses, OpenstackSubnetsListData, OpenstackSubnetsListResponses, OpenstackSubnetsHeadData, OpenstackSubnetsHeadResponses, OpenstackSubnetsDestroyData, OpenstackSubnetsDestroyResponses, OpenstackSubnetsRetrieveData, OpenstackSubnetsRetrieveResponses, OpenstackSubnetsPartialUpdateData, OpenstackSubnetsPartialUpdateResponses, OpenstackSubnetsUpdateData, OpenstackSubnetsUpdateResponses, OpenstackSubnetsConnectData, OpenstackSubnetsConnectResponses, OpenstackSubnetsDisconnectData, OpenstackSubnetsDisconnectResponses, OpenstackSubnetsPullData, OpenstackSubnetsPullResponses, OpenstackSubnetsUnlinkData, OpenstackSubnetsUnlinkResponses, OpenstackTenantsListData, OpenstackTenantsListResponses, OpenstackTenantsHeadData, OpenstackTenantsHeadResponses, OpenstackTenantsCreateData, OpenstackTenantsCreateResponses, OpenstackTenantsDestroyData, OpenstackTenantsDestroyResponses, OpenstackTenantsRetrieveData, OpenstackTenantsRetrieveResponses, OpenstackTenantsPartialUpdateData, OpenstackTenantsPartialUpdateResponses, OpenstackTenantsUpdateData, OpenstackTenantsUpdateResponses, OpenstackTenantsBackendInstancesListData, OpenstackTenantsBackendInstancesListResponses, OpenstackTenantsBackendVolumesListData, OpenstackTenantsBackendVolumesListResponses, OpenstackTenantsChangePasswordData, OpenstackTenantsChangePasswordResponses, OpenstackTenantsCreateFloatingIpData, OpenstackTenantsCreateFloatingIpResponses, OpenstackTenantsCreateNetworkData, OpenstackTenantsCreateNetworkResponses, OpenstackTenantsCreateSecurityGroupData, OpenstackTenantsCreateSecurityGroupResponses, OpenstackTenantsCreateServerGroupData, OpenstackTenantsCreateServerGroupResponses, OpenstackTenantsPullData, OpenstackTenantsPullResponses, OpenstackTenantsPullFloatingIpsData, OpenstackTenantsPullFloatingIpsResponses, OpenstackTenantsPullQuotasData, OpenstackTenantsPullQuotasResponses, OpenstackTenantsPullSecurityGroupsData, OpenstackTenantsPullSecurityGroupsResponses, OpenstackTenantsPullServerGroupsData, OpenstackTenantsPullServerGroupsResponses, OpenstackTenantsSetQuotasData, OpenstackTenantsSetQuotasResponses, OpenstackTenantsUnlinkData, OpenstackTenantsUnlinkResponses, OpenstackVolumeAvailabilityZonesListData, OpenstackVolumeAvailabilityZonesListResponses, OpenstackVolumeAvailabilityZonesHeadData, OpenstackVolumeAvailabilityZonesHeadResponses, OpenstackVolumeAvailabilityZonesRetrieveData, OpenstackVolumeAvailabilityZonesRetrieveResponses, OpenstackVolumeTypesListData, OpenstackVolumeTypesListResponses, OpenstackVolumeTypesHeadData, OpenstackVolumeTypesHeadResponses, OpenstackVolumeTypesRetrieveData, OpenstackVolumeTypesRetrieveResponses, OpenstackVolumeTypesNamesRetrieveData, OpenstackVolumeTypesNamesRetrieveResponses, OpenstackVolumeTypesNamesHeadData, OpenstackVolumeTypesNamesHeadResponses, OpenstackVolumesListData, OpenstackVolumesListResponses, OpenstackVolumesHeadData, OpenstackVolumesHeadResponses, OpenstackVolumesRetrieveData, OpenstackVolumesRetrieveResponses, OpenstackVolumesPartialUpdateData, OpenstackVolumesPartialUpdateResponses, OpenstackVolumesUpdateData, OpenstackVolumesUpdateResponses, OpenstackVolumesAttachData, OpenstackVolumesAttachResponses, OpenstackVolumesDetachData, OpenstackVolumesDetachResponses, OpenstackVolumesExtendData, OpenstackVolumesExtendResponses, OpenstackVolumesPullData, OpenstackVolumesPullResponses, OpenstackVolumesRetypeData, OpenstackVolumesRetypeResponses, OpenstackVolumesSnapshotData, OpenstackVolumesSnapshotResponses, OpenstackVolumesUnlinkData, OpenstackVolumesUnlinkResponses, OrganizationGroupsListData, OrganizationGroupsListResponses, OrganizationGroupsHeadData, OrganizationGroupsHeadResponses, OrganizationGroupsCreateData, OrganizationGroupsCreateResponses, OrganizationGroupsDestroyData, OrganizationGroupsDestroyResponses, OrganizationGroupsRetrieveData, OrganizationGroupsRetrieveResponses, OrganizationGroupsPartialUpdateData, OrganizationGroupsPartialUpdateResponses, OrganizationGroupsUpdateData, OrganizationGroupsUpdateResponses, OverrideSettingsRetrieveData, OverrideSettingsRetrieveResponses, OverrideSettingsData, OverrideSettingsResponses, PaymentProfilesListData, PaymentProfilesListResponses, PaymentProfilesHeadData, PaymentProfilesHeadResponses, PaymentProfilesCreateData, PaymentProfilesCreateResponses, PaymentProfilesDestroyData, PaymentProfilesDestroyResponses, PaymentProfilesRetrieveData, PaymentProfilesRetrieveResponses, PaymentProfilesPartialUpdateData, PaymentProfilesPartialUpdateResponses, PaymentProfilesUpdateData, PaymentProfilesUpdateResponses, PaymentProfilesEnableData, PaymentProfilesEnableResponses, PaymentsListData, PaymentsListResponses, PaymentsHeadData, PaymentsHeadResponses, PaymentsCreateData, PaymentsCreateResponses, PaymentsDestroyData, PaymentsDestroyResponses, PaymentsRetrieveData, PaymentsRetrieveResponses, PaymentsPartialUpdateData, PaymentsPartialUpdateResponses, PaymentsUpdateData, PaymentsUpdateResponses, PaymentsLinkToInvoiceData, PaymentsLinkToInvoiceResponses, PaymentsUnlinkFromInvoiceData, PaymentsUnlinkFromInvoiceResponses, ProjectCreditsListData, ProjectCreditsListResponses, ProjectCreditsHeadData, ProjectCreditsHeadResponses, ProjectCreditsCreateData, ProjectCreditsCreateResponses, ProjectCreditsDestroyData, ProjectCreditsDestroyResponses, ProjectCreditsRetrieveData, ProjectCreditsRetrieveResponses, ProjectCreditsPartialUpdateData, ProjectCreditsPartialUpdateResponses, ProjectCreditsUpdateData, ProjectCreditsUpdateResponses, ProjectQuotasListData, ProjectQuotasListResponses, ProjectQuotasHeadData, ProjectQuotasHeadResponses, ProjectTypesListData, ProjectTypesListResponses, ProjectTypesHeadData, ProjectTypesHeadResponses, ProjectTypesRetrieveData, ProjectTypesRetrieveResponses, ProjectsListData, ProjectsListResponses, ProjectsHeadData, ProjectsHeadResponses, ProjectsCreateData, ProjectsCreateResponses, ProjectsDestroyData, ProjectsDestroyResponses, ProjectsRetrieveData, ProjectsRetrieveResponses, ProjectsPartialUpdateData, ProjectsPartialUpdateResponses, ProjectsUpdateData, ProjectsUpdateResponses, ProjectsAddUserData, ProjectsAddUserResponses, ProjectsDeleteUserData, ProjectsDeleteUserResponses, ProjectsListUsersListData, ProjectsListUsersListResponses, ProjectsMoveProjectData, ProjectsMoveProjectResponses, ProjectsOtherUsersListData, ProjectsOtherUsersListResponses, ProjectsStatsRetrieveData, ProjectsStatsRetrieveResponses, ProjectsSyncUserRolesData, ProjectsSyncUserRolesResponses, ProjectsUpdateUserData, ProjectsUpdateUserResponses, PromotionsCampaignsListData, PromotionsCampaignsListResponses, PromotionsCampaignsHeadData, PromotionsCampaignsHeadResponses, PromotionsCampaignsCreateData, PromotionsCampaignsCreateResponses, PromotionsCampaignsDestroyData, PromotionsCampaignsDestroyResponses, PromotionsCampaignsRetrieveData, PromotionsCampaignsRetrieveResponses, PromotionsCampaignsUpdateData, PromotionsCampaignsUpdateResponses, PromotionsCampaignsActivateData, PromotionsCampaignsActivateResponses, PromotionsCampaignsActivateErrors, PromotionsCampaignsOrdersListData, PromotionsCampaignsOrdersListResponses, PromotionsCampaignsResourcesListData, PromotionsCampaignsResourcesListResponses, PromotionsCampaignsTerminateData, PromotionsCampaignsTerminateResponses, PromotionsCampaignsTerminateErrors, ProposalProposalsListData, ProposalProposalsListResponses, ProposalProposalsHeadData, ProposalProposalsHeadResponses, ProposalProposalsCreateData, ProposalProposalsCreateResponses, ProposalProposalsDestroyData, ProposalProposalsDestroyResponses, ProposalProposalsRetrieveData, ProposalProposalsRetrieveResponses, ProposalProposalsAddUserData, ProposalProposalsAddUserResponses, ProposalProposalsApproveData, ProposalProposalsApproveResponses, ProposalProposalsAttachDocumentData, ProposalProposalsAttachDocumentResponses, ProposalProposalsChecklistRetrieveData, ProposalProposalsChecklistRetrieveResponses, ProposalProposalsChecklistRetrieveErrors, ProposalProposalsChecklistReviewRetrieveData, ProposalProposalsChecklistReviewRetrieveResponses, ProposalProposalsChecklistReviewRetrieveErrors, ProposalProposalsCompletionReviewStatusRetrieveData, ProposalProposalsCompletionReviewStatusRetrieveResponses, ProposalProposalsCompletionReviewStatusRetrieveErrors, ProposalProposalsCompletionStatusRetrieveData, ProposalProposalsCompletionStatusRetrieveResponses, ProposalProposalsCompletionStatusRetrieveErrors, ProposalProposalsDeleteUserData, ProposalProposalsDeleteUserResponses, ProposalProposalsListUsersListData, ProposalProposalsListUsersListResponses, ProposalProposalsRejectData, ProposalProposalsRejectResponses, ProposalProposalsResourcesListData, ProposalProposalsResourcesListResponses, ProposalProposalsResourcesSetData, ProposalProposalsResourcesSetResponses, ProposalProposalsResourcesDestroyData, ProposalProposalsResourcesDestroyResponses, ProposalProposalsResourcesRetrieveData, ProposalProposalsResourcesRetrieveResponses, ProposalProposalsResourcesPartialUpdateData, ProposalProposalsResourcesPartialUpdateResponses, ProposalProposalsResourcesUpdateData, ProposalProposalsResourcesUpdateResponses, ProposalProposalsSubmitData, ProposalProposalsSubmitResponses, ProposalProposalsSubmitAnswersData, ProposalProposalsSubmitAnswersResponses, ProposalProposalsSubmitAnswersErrors, ProposalProposalsUpdateProjectDetailsData, ProposalProposalsUpdateProjectDetailsResponses, ProposalProposalsUpdateUserData, ProposalProposalsUpdateUserResponses, ProposalProtectedCallsListData, ProposalProtectedCallsListResponses, ProposalProtectedCallsHeadData, ProposalProtectedCallsHeadResponses, ProposalProtectedCallsCreateData, ProposalProtectedCallsCreateResponses, ProposalProtectedCallsDestroyData, ProposalProtectedCallsDestroyResponses, ProposalProtectedCallsRetrieveData, ProposalProtectedCallsRetrieveResponses, ProposalProtectedCallsPartialUpdateData, ProposalProtectedCallsPartialUpdateResponses, ProposalProtectedCallsUpdateData, ProposalProtectedCallsUpdateResponses, ProposalProtectedCallsActivateData, ProposalProtectedCallsActivateResponses, ProposalProtectedCallsAddUserData, ProposalProtectedCallsAddUserResponses, ProposalProtectedCallsArchiveData, ProposalProtectedCallsArchiveResponses, ProposalProtectedCallsAttachDocumentsData, ProposalProtectedCallsAttachDocumentsResponses, ProposalProtectedCallsComplianceOverviewRetrieveData, ProposalProtectedCallsComplianceOverviewRetrieveResponses, ProposalProtectedCallsDeleteUserData, ProposalProtectedCallsDeleteUserResponses, ProposalProtectedCallsDetachDocumentsData, ProposalProtectedCallsDetachDocumentsResponses, ProposalProtectedCallsListUsersListData, ProposalProtectedCallsListUsersListResponses, ProposalProtectedCallsOfferingsListData, ProposalProtectedCallsOfferingsListResponses, ProposalProtectedCallsOfferingsSetData, ProposalProtectedCallsOfferingsSetResponses, ProposalProtectedCallsOfferingsDestroyData, ProposalProtectedCallsOfferingsDestroyResponses, ProposalProtectedCallsOfferingsRetrieveData, ProposalProtectedCallsOfferingsRetrieveResponses, ProposalProtectedCallsOfferingsPartialUpdateData, ProposalProtectedCallsOfferingsPartialUpdateResponses, ProposalProtectedCallsOfferingsUpdateData, ProposalProtectedCallsOfferingsUpdateResponses, ProposalProtectedCallsProposalsComplianceAnswersListData, ProposalProtectedCallsProposalsComplianceAnswersListResponses, ProposalProtectedCallsResourceTemplatesListData, ProposalProtectedCallsResourceTemplatesListResponses, ProposalProtectedCallsResourceTemplatesSetData, ProposalProtectedCallsResourceTemplatesSetResponses, ProposalProtectedCallsResourceTemplatesDestroyData, ProposalProtectedCallsResourceTemplatesDestroyResponses, ProposalProtectedCallsResourceTemplatesRetrieveData, ProposalProtectedCallsResourceTemplatesRetrieveResponses, ProposalProtectedCallsResourceTemplatesPartialUpdateData, ProposalProtectedCallsResourceTemplatesPartialUpdateResponses, ProposalProtectedCallsResourceTemplatesUpdateData, ProposalProtectedCallsResourceTemplatesUpdateResponses, ProposalProtectedCallsReviewProposalComplianceData, ProposalProtectedCallsReviewProposalComplianceResponses, ProposalProtectedCallsRoundsListData, ProposalProtectedCallsRoundsListResponses, ProposalProtectedCallsRoundsSetData, ProposalProtectedCallsRoundsSetResponses, ProposalProtectedCallsRoundsDestroyData, ProposalProtectedCallsRoundsDestroyResponses, ProposalProtectedCallsRoundsRetrieveData, ProposalProtectedCallsRoundsRetrieveResponses, ProposalProtectedCallsRoundsPartialUpdateData, ProposalProtectedCallsRoundsPartialUpdateResponses, ProposalProtectedCallsRoundsUpdateData, ProposalProtectedCallsRoundsUpdateResponses, ProposalProtectedCallsRoundsCloseData, ProposalProtectedCallsRoundsCloseResponses, ProposalProtectedCallsUpdateUserData, ProposalProtectedCallsUpdateUserResponses, ProposalPublicCallsListData, ProposalPublicCallsListResponses, ProposalPublicCallsHeadData, ProposalPublicCallsHeadResponses, ProposalPublicCallsRetrieveData, ProposalPublicCallsRetrieveResponses, ProposalRequestedOfferingsListData, ProposalRequestedOfferingsListResponses, ProposalRequestedOfferingsHeadData, ProposalRequestedOfferingsHeadResponses, ProposalRequestedOfferingsRetrieveData, ProposalRequestedOfferingsRetrieveResponses, ProposalRequestedOfferingsAcceptData, ProposalRequestedOfferingsAcceptResponses, ProposalRequestedOfferingsCancelData, ProposalRequestedOfferingsCancelResponses, ProposalRequestedResourcesListData, ProposalRequestedResourcesListResponses, ProposalRequestedResourcesHeadData, ProposalRequestedResourcesHeadResponses, ProposalRequestedResourcesRetrieveData, ProposalRequestedResourcesRetrieveResponses, ProposalReviewsListData, ProposalReviewsListResponses, ProposalReviewsHeadData, ProposalReviewsHeadResponses, ProposalReviewsCreateData, ProposalReviewsCreateResponses, ProposalReviewsDestroyData, ProposalReviewsDestroyResponses, ProposalReviewsRetrieveData, ProposalReviewsRetrieveResponses, ProposalReviewsPartialUpdateData, ProposalReviewsPartialUpdateResponses, ProposalReviewsUpdateData, ProposalReviewsUpdateResponses, ProposalReviewsAcceptData, ProposalReviewsAcceptResponses, ProposalReviewsRejectData, ProposalReviewsRejectResponses, ProposalReviewsSubmitData, ProposalReviewsSubmitResponses, ProviderInvoiceItemsListData, ProviderInvoiceItemsListResponses, ProviderInvoiceItemsHeadData, ProviderInvoiceItemsHeadResponses, ProviderInvoiceItemsRetrieveData, ProviderInvoiceItemsRetrieveResponses, QueryData, QueryResponses, QueryErrors, RabbitmqUserStatsListData, RabbitmqUserStatsListResponses, RabbitmqVhostStatsListData, RabbitmqVhostStatsListResponses, RancherAppsListData, RancherAppsListResponses, RancherAppsHeadData, RancherAppsHeadResponses, RancherAppsCreateData, RancherAppsCreateResponses, RancherAppsDestroyData, RancherAppsDestroyResponses, RancherAppsRetrieveData, RancherAppsRetrieveResponses, RancherAppsPartialUpdateData, RancherAppsPartialUpdateResponses, RancherAppsUpdateData, RancherAppsUpdateResponses, RancherAppsPullData, RancherAppsPullResponses, RancherAppsUnlinkData, RancherAppsUnlinkResponses, RancherCatalogsListData, RancherCatalogsListResponses, RancherCatalogsHeadData, RancherCatalogsHeadResponses, RancherCatalogsCreateData, RancherCatalogsCreateResponses, RancherCatalogsDestroyData, RancherCatalogsDestroyResponses, RancherCatalogsRetrieveData, RancherCatalogsRetrieveResponses, RancherCatalogsPartialUpdateData, RancherCatalogsPartialUpdateResponses, RancherCatalogsUpdateData, RancherCatalogsUpdateResponses, RancherCatalogsRefreshData, RancherCatalogsRefreshResponses, RancherClusterSecurityGroupsListData, RancherClusterSecurityGroupsListResponses, RancherClusterSecurityGroupsHeadData, RancherClusterSecurityGroupsHeadResponses, RancherClusterSecurityGroupsRetrieveData, RancherClusterSecurityGroupsRetrieveResponses, RancherClusterSecurityGroupsPartialUpdateData, RancherClusterSecurityGroupsPartialUpdateResponses, RancherClusterSecurityGroupsUpdateData, RancherClusterSecurityGroupsUpdateResponses, RancherClusterTemplatesListData, RancherClusterTemplatesListResponses, RancherClusterTemplatesHeadData, RancherClusterTemplatesHeadResponses, RancherClusterTemplatesRetrieveData, RancherClusterTemplatesRetrieveResponses, RancherClustersListData, RancherClustersListResponses, RancherClustersHeadData, RancherClustersHeadResponses, RancherClustersCreateData, RancherClustersCreateResponses, RancherClustersDestroyData, RancherClustersDestroyResponses, RancherClustersRetrieveData, RancherClustersRetrieveResponses, RancherClustersPartialUpdateData, RancherClustersPartialUpdateResponses, RancherClustersUpdateData, RancherClustersUpdateResponses, RancherClustersCreateManagementSecurityGroupData, RancherClustersCreateManagementSecurityGroupResponses, RancherClustersImportYamlData, RancherClustersImportYamlResponses, RancherClustersPullData, RancherClustersPullResponses, RancherClustersUnlinkData, RancherClustersUnlinkResponses, RancherHpasListData, RancherHpasListResponses, RancherHpasHeadData, RancherHpasHeadResponses, RancherHpasCreateData, RancherHpasCreateResponses, RancherHpasDestroyData, RancherHpasDestroyResponses, RancherHpasRetrieveData, RancherHpasRetrieveResponses, RancherHpasPartialUpdateData, RancherHpasPartialUpdateResponses, RancherHpasUpdateData, RancherHpasUpdateResponses, RancherHpasPullData, RancherHpasPullResponses, RancherHpasUnlinkData, RancherHpasUnlinkResponses, RancherHpasYamlRetrieveData, RancherHpasYamlRetrieveResponses, RancherHpasYamlUpdateData, RancherHpasYamlUpdateResponses, RancherIngressesListData, RancherIngressesListResponses, RancherIngressesHeadData, RancherIngressesHeadResponses, RancherIngressesCreateData, RancherIngressesCreateResponses, RancherIngressesDestroyData, RancherIngressesDestroyResponses, RancherIngressesRetrieveData, RancherIngressesRetrieveResponses, RancherIngressesPartialUpdateData, RancherIngressesPartialUpdateResponses, RancherIngressesUpdateData, RancherIngressesUpdateResponses, RancherIngressesPullData, RancherIngressesPullResponses, RancherIngressesUnlinkData, RancherIngressesUnlinkResponses, RancherIngressesYamlRetrieveData, RancherIngressesYamlRetrieveResponses, RancherIngressesYamlUpdateData, RancherIngressesYamlUpdateResponses, RancherNamespacesListData, RancherNamespacesListResponses, RancherNamespacesHeadData, RancherNamespacesHeadResponses, RancherNamespacesRetrieveData, RancherNamespacesRetrieveResponses, RancherNodesListData, RancherNodesListResponses, RancherNodesHeadData, RancherNodesHeadResponses, RancherNodesCreateData, RancherNodesCreateResponses, RancherNodesDestroyData, RancherNodesDestroyResponses, RancherNodesRetrieveData, RancherNodesRetrieveResponses, RancherNodesConsoleRetrieveData, RancherNodesConsoleRetrieveResponses, RancherNodesConsoleLogRetrieveData, RancherNodesConsoleLogRetrieveResponses, RancherNodesConsoleLogRetrieveErrors, RancherNodesLinkOpenstackData, RancherNodesLinkOpenstackResponses, RancherNodesPullData, RancherNodesPullResponses, RancherNodesUnlinkData, RancherNodesUnlinkResponses, RancherNodesUnlinkOpenstackData, RancherNodesUnlinkOpenstackResponses, RancherProjectsListData, RancherProjectsListResponses, RancherProjectsHeadData, RancherProjectsHeadResponses, RancherProjectsRetrieveData, RancherProjectsRetrieveResponses, RancherProjectsSecretsRetrieveData, RancherProjectsSecretsRetrieveResponses, RancherRoleTemplatesListData, RancherRoleTemplatesListResponses, RancherRoleTemplatesHeadData, RancherRoleTemplatesHeadResponses, RancherRoleTemplatesRetrieveData, RancherRoleTemplatesRetrieveResponses, RancherServicesListData, RancherServicesListResponses, RancherServicesHeadData, RancherServicesHeadResponses, RancherServicesCreateData, RancherServicesCreateResponses, RancherServicesDestroyData, RancherServicesDestroyResponses, RancherServicesRetrieveData, RancherServicesRetrieveResponses, RancherServicesPartialUpdateData, RancherServicesPartialUpdateResponses, RancherServicesUpdateData, RancherServicesUpdateResponses, RancherServicesPullData, RancherServicesPullResponses, RancherServicesUnlinkData, RancherServicesUnlinkResponses, RancherServicesYamlRetrieveData, RancherServicesYamlRetrieveResponses, RancherServicesYamlUpdateData, RancherServicesYamlUpdateResponses, RancherTemplateVersionsRetrieveData, RancherTemplateVersionsRetrieveResponses, RancherTemplatesListData, RancherTemplatesListResponses, RancherTemplatesHeadData, RancherTemplatesHeadResponses, RancherTemplatesRetrieveData, RancherTemplatesRetrieveResponses, RancherUsersListData, RancherUsersListResponses, RancherUsersHeadData, RancherUsersHeadResponses, RancherUsersRetrieveData, RancherUsersRetrieveResponses, RancherWorkloadsListData, RancherWorkloadsListResponses, RancherWorkloadsHeadData, RancherWorkloadsHeadResponses, RancherWorkloadsCreateData, RancherWorkloadsCreateResponses, RancherWorkloadsDestroyData, RancherWorkloadsDestroyResponses, RancherWorkloadsRetrieveData, RancherWorkloadsRetrieveResponses, RancherWorkloadsPartialUpdateData, RancherWorkloadsPartialUpdateResponses, RancherWorkloadsUpdateData, RancherWorkloadsUpdateResponses, RancherWorkloadsRedeployData, RancherWorkloadsRedeployResponses, RancherWorkloadsYamlRetrieveData, RancherWorkloadsYamlRetrieveResponses, RancherWorkloadsYamlUpdateData, RancherWorkloadsYamlUpdateResponses, RemoteEduteamsData, RemoteEduteamsResponses, RemoteWaldurApiCancelTerminationData, RemoteWaldurApiCancelTerminationResponses, RemoteWaldurApiImportOfferingData, RemoteWaldurApiImportOfferingResponses, RemoteWaldurApiPullOfferingDetailsData, RemoteWaldurApiPullOfferingDetailsResponses, RemoteWaldurApiPullOfferingInvoicesData, RemoteWaldurApiPullOfferingInvoicesResponses, RemoteWaldurApiPullOfferingOrdersData, RemoteWaldurApiPullOfferingOrdersResponses, RemoteWaldurApiPullOfferingResourcesData, RemoteWaldurApiPullOfferingResourcesResponses, RemoteWaldurApiPullOfferingRobotAccountsData, RemoteWaldurApiPullOfferingRobotAccountsResponses, RemoteWaldurApiPullOfferingUsageData, RemoteWaldurApiPullOfferingUsageResponses, RemoteWaldurApiPullOfferingUsersData, RemoteWaldurApiPullOfferingUsersResponses, RemoteWaldurApiPullOrderData, RemoteWaldurApiPullOrderResponses, RemoteWaldurApiPushProjectDataData, RemoteWaldurApiPushProjectDataResponses, RemoteWaldurApiRemoteCategoriesData, RemoteWaldurApiRemoteCategoriesResponses, RemoteWaldurApiRemoteCustomersData, RemoteWaldurApiRemoteCustomersResponses, RemoteWaldurApiSharedOfferingsData, RemoteWaldurApiSharedOfferingsResponses, RemoteWaldurApiSyncResourceData, RemoteWaldurApiSyncResourceResponses, RemoteWaldurApiSyncResourceProjectPermissionsData, RemoteWaldurApiSyncResourceProjectPermissionsResponses, RolesListData, RolesListResponses, RolesHeadData, RolesHeadResponses, RolesCreateData, RolesCreateResponses, RolesDestroyData, RolesDestroyResponses, RolesRetrieveData, RolesRetrieveResponses, RolesPartialUpdateData, RolesPartialUpdateResponses, RolesUpdateData, RolesUpdateResponses, RolesDisableData, RolesDisableResponses, RolesEnableData, RolesEnableResponses, RolesUpdateDescriptionsUpdateData, RolesUpdateDescriptionsUpdateResponses, ServiceSettingsListData, ServiceSettingsListResponses, ServiceSettingsHeadData, ServiceSettingsHeadResponses, ServiceSettingsRetrieveData, ServiceSettingsRetrieveResponses, SlurmAllocationUserUsageListData, SlurmAllocationUserUsageListResponses, SlurmAllocationUserUsageHeadData, SlurmAllocationUserUsageHeadResponses, SlurmAllocationUserUsageRetrieveData, SlurmAllocationUserUsageRetrieveResponses, SlurmAllocationsListData, SlurmAllocationsListResponses, SlurmAllocationsHeadData, SlurmAllocationsHeadResponses, SlurmAllocationsCreateData, SlurmAllocationsCreateResponses, SlurmAllocationsDestroyData, SlurmAllocationsDestroyResponses, SlurmAllocationsRetrieveData, SlurmAllocationsRetrieveResponses, SlurmAllocationsPartialUpdateData, SlurmAllocationsPartialUpdateResponses, SlurmAllocationsUpdateData, SlurmAllocationsUpdateResponses, SlurmAllocationsPullData, SlurmAllocationsPullResponses, SlurmAllocationsSetLimitsData, SlurmAllocationsSetLimitsResponses, SlurmAllocationsUnlinkData, SlurmAllocationsUnlinkResponses, SlurmAssociationsListData, SlurmAssociationsListResponses, SlurmAssociationsHeadData, SlurmAssociationsHeadResponses, SlurmAssociationsRetrieveData, SlurmAssociationsRetrieveResponses, SlurmJobsListData, SlurmJobsListResponses, SlurmJobsHeadData, SlurmJobsHeadResponses, SlurmJobsCreateData, SlurmJobsCreateResponses, SlurmJobsDestroyData, SlurmJobsDestroyResponses, SlurmJobsRetrieveData, SlurmJobsRetrieveResponses, SlurmJobsPartialUpdateData, SlurmJobsPartialUpdateResponses, SlurmJobsUpdateData, SlurmJobsUpdateResponses, SlurmJobsPullData, SlurmJobsPullResponses, SlurmJobsUnlinkData, SlurmJobsUnlinkResponses, SupportAttachmentsListData, SupportAttachmentsListResponses, SupportAttachmentsHeadData, SupportAttachmentsHeadResponses, SupportAttachmentsCreateData, SupportAttachmentsCreateResponses, SupportAttachmentsDestroyData, SupportAttachmentsDestroyResponses, SupportAttachmentsRetrieveData, SupportAttachmentsRetrieveResponses, SupportCommentsListData, SupportCommentsListResponses, SupportCommentsHeadData, SupportCommentsHeadResponses, SupportCommentsDestroyData, SupportCommentsDestroyResponses, SupportCommentsRetrieveData, SupportCommentsRetrieveResponses, SupportCommentsPartialUpdateData, SupportCommentsPartialUpdateResponses, SupportCommentsUpdateData, SupportCommentsUpdateResponses, SupportFeedbackAverageReportRetrieveData, SupportFeedbackAverageReportRetrieveResponses, SupportFeedbackReportRetrieveData, SupportFeedbackReportRetrieveResponses, SupportFeedbacksListData, SupportFeedbacksListResponses, SupportFeedbacksHeadData, SupportFeedbacksHeadResponses, SupportFeedbacksCreateData, SupportFeedbacksCreateResponses, SupportFeedbacksRetrieveData, SupportFeedbacksRetrieveResponses, SupportIssuesListData, SupportIssuesListResponses, SupportIssuesHeadData, SupportIssuesHeadResponses, SupportIssuesCreateData, SupportIssuesCreateResponses, SupportIssuesDestroyData, SupportIssuesDestroyResponses, SupportIssuesRetrieveData, SupportIssuesRetrieveResponses, SupportIssuesPartialUpdateData, SupportIssuesPartialUpdateResponses, SupportIssuesUpdateData, SupportIssuesUpdateResponses, SupportIssuesCommentData, SupportIssuesCommentResponses, SupportIssuesSyncData, SupportIssuesSyncResponses, SupportJiraWebhookData, SupportJiraWebhookResponses, SupportPrioritiesListData, SupportPrioritiesListResponses, SupportPrioritiesHeadData, SupportPrioritiesHeadResponses, SupportPrioritiesRetrieveData, SupportPrioritiesRetrieveResponses, SupportSmaxWebhookData, SupportSmaxWebhookResponses, SupportStatisticsRetrieveData, SupportStatisticsRetrieveResponses, SupportTemplatesListData, SupportTemplatesListResponses, SupportTemplatesHeadData, SupportTemplatesHeadResponses, SupportTemplatesCreateData, SupportTemplatesCreateResponses, SupportTemplatesDestroyData, SupportTemplatesDestroyResponses, SupportTemplatesRetrieveData, SupportTemplatesRetrieveResponses, SupportTemplatesPartialUpdateData, SupportTemplatesPartialUpdateResponses, SupportTemplatesUpdateData, SupportTemplatesUpdateResponses, SupportTemplatesCreateAttachmentsData, SupportTemplatesCreateAttachmentsResponses, SupportTemplatesCreateAttachmentsErrors, SupportTemplatesDeleteAttachmentsData, SupportTemplatesDeleteAttachmentsResponses, SupportUsersListData, SupportUsersListResponses, SupportUsersHeadData, SupportUsersHeadResponses, SupportUsersRetrieveData, SupportUsersRetrieveResponses, SupportZammadWebhookData, SupportZammadWebhookResponses, SyncIssuesRetrieveData, SyncIssuesRetrieveResponses, SyncIssuesRetrieveErrors, SyncIssuesData, SyncIssuesResponses, SyncIssuesErrors, UserAgreementsListData, UserAgreementsListResponses, UserAgreementsHeadData, UserAgreementsHeadResponses, UserAgreementsCreateData, UserAgreementsCreateResponses, UserAgreementsDestroyData, UserAgreementsDestroyResponses, UserAgreementsRetrieveData, UserAgreementsRetrieveResponses, UserAgreementsPartialUpdateData, UserAgreementsPartialUpdateResponses, UserAgreementsUpdateData, UserAgreementsUpdateResponses, UserGroupInvitationsListData, UserGroupInvitationsListResponses, UserGroupInvitationsHeadData, UserGroupInvitationsHeadResponses, UserGroupInvitationsCreateData, UserGroupInvitationsCreateResponses, UserGroupInvitationsRetrieveData, UserGroupInvitationsRetrieveResponses, UserGroupInvitationsCancelData, UserGroupInvitationsCancelResponses, UserGroupInvitationsProjectsListData, UserGroupInvitationsProjectsListResponses, UserGroupInvitationsSubmitRequestData, UserGroupInvitationsSubmitRequestResponses, UserInvitationsListData, UserInvitationsListResponses, UserInvitationsHeadData, UserInvitationsHeadResponses, UserInvitationsCreateData, UserInvitationsCreateResponses, UserInvitationsRetrieveData, UserInvitationsRetrieveResponses, UserInvitationsAcceptData, UserInvitationsAcceptResponses, UserInvitationsCancelData, UserInvitationsCancelResponses, UserInvitationsCheckData, UserInvitationsCheckResponses, UserInvitationsDeleteData, UserInvitationsDeleteResponses, UserInvitationsDetailsRetrieveData, UserInvitationsDetailsRetrieveResponses, UserInvitationsSendData, UserInvitationsSendResponses, UserInvitationsApproveData, UserInvitationsApproveResponses, UserInvitationsRejectData, UserInvitationsRejectResponses, UserPermissionRequestsListData, UserPermissionRequestsListResponses, UserPermissionRequestsHeadData, UserPermissionRequestsHeadResponses, UserPermissionRequestsRetrieveData, UserPermissionRequestsRetrieveResponses, UserPermissionRequestsApproveData, UserPermissionRequestsApproveResponses, UserPermissionRequestsRejectData, UserPermissionRequestsRejectResponses, UserPermissionsListData, UserPermissionsListResponses, UserPermissionsHeadData, UserPermissionsHeadResponses, UserPermissionsRetrieveData, UserPermissionsRetrieveResponses, UsersListData, UsersListResponses, UsersHeadData, UsersHeadResponses, UsersCreateData, UsersCreateResponses, UsersDestroyData, UsersDestroyResponses, UsersRetrieveData, UsersRetrieveResponses, UsersPartialUpdateData, UsersPartialUpdateResponses, UsersUpdateData, UsersUpdateResponses, UsersCancelChangeEmailData, UsersCancelChangeEmailResponses, UsersChangeEmailData, UsersChangeEmailResponses, UsersChangePasswordData, UsersChangePasswordResponses, UsersPullRemoteUserData, UsersPullRemoteUserResponses, UsersRefreshTokenData, UsersRefreshTokenResponses, UsersTokenRetrieveData, UsersTokenRetrieveResponses, UsersConfirmEmailData, UsersConfirmEmailResponses, UsersMeRetrieveData, UsersMeRetrieveResponses, UsersMeHeadData, UsersMeHeadResponses, VersionRetrieveData, VersionRetrieveResponses, VmwareClustersListData, VmwareClustersListResponses, VmwareClustersHeadData, VmwareClustersHeadResponses, VmwareClustersRetrieveData, VmwareClustersRetrieveResponses, VmwareDatastoresListData, VmwareDatastoresListResponses, VmwareDatastoresHeadData, VmwareDatastoresHeadResponses, VmwareDatastoresRetrieveData, VmwareDatastoresRetrieveResponses, VmwareDisksListData, VmwareDisksListResponses, VmwareDisksHeadData, VmwareDisksHeadResponses, VmwareDisksDestroyData, VmwareDisksDestroyResponses, VmwareDisksRetrieveData, VmwareDisksRetrieveResponses, VmwareDisksExtendData, VmwareDisksExtendResponses, VmwareDisksPullData, VmwareDisksPullResponses, VmwareDisksUnlinkData, VmwareDisksUnlinkResponses, VmwareFoldersListData, VmwareFoldersListResponses, VmwareFoldersHeadData, VmwareFoldersHeadResponses, VmwareFoldersRetrieveData, VmwareFoldersRetrieveResponses, VmwareLimitsRetrieveData, VmwareLimitsRetrieveResponses, VmwareNetworksListData, VmwareNetworksListResponses, VmwareNetworksHeadData, VmwareNetworksHeadResponses, VmwareNetworksRetrieveData, VmwareNetworksRetrieveResponses, VmwarePortsListData, VmwarePortsListResponses, VmwarePortsHeadData, VmwarePortsHeadResponses, VmwarePortsDestroyData, VmwarePortsDestroyResponses, VmwarePortsRetrieveData, VmwarePortsRetrieveResponses, VmwarePortsPullData, VmwarePortsPullResponses, VmwarePortsUnlinkData, VmwarePortsUnlinkResponses, VmwareTemplatesListData, VmwareTemplatesListResponses, VmwareTemplatesHeadData, VmwareTemplatesHeadResponses, VmwareTemplatesRetrieveData, VmwareTemplatesRetrieveResponses, VmwareVirtualMachineListData, VmwareVirtualMachineListResponses, VmwareVirtualMachineHeadData, VmwareVirtualMachineHeadResponses, VmwareVirtualMachineCreateData, VmwareVirtualMachineCreateResponses, VmwareVirtualMachineDestroyData, VmwareVirtualMachineDestroyResponses, VmwareVirtualMachineRetrieveData, VmwareVirtualMachineRetrieveResponses, VmwareVirtualMachinePartialUpdateData, VmwareVirtualMachinePartialUpdateResponses, VmwareVirtualMachineUpdateData, VmwareVirtualMachineUpdateResponses, VmwareVirtualMachineConsoleRetrieveData, VmwareVirtualMachineConsoleRetrieveResponses, VmwareVirtualMachineCreateDiskData, VmwareVirtualMachineCreateDiskResponses, VmwareVirtualMachineCreatePortData, VmwareVirtualMachineCreatePortResponses, VmwareVirtualMachinePullData, VmwareVirtualMachinePullResponses, VmwareVirtualMachineRebootGuestData, VmwareVirtualMachineRebootGuestResponses, VmwareVirtualMachineResetData, VmwareVirtualMachineResetResponses, VmwareVirtualMachineShutdownGuestData, VmwareVirtualMachineShutdownGuestResponses, VmwareVirtualMachineStartData, VmwareVirtualMachineStartResponses, VmwareVirtualMachineStopData, VmwareVirtualMachineStopResponses, VmwareVirtualMachineSuspendData, VmwareVirtualMachineSuspendResponses, VmwareVirtualMachineUnlinkData, VmwareVirtualMachineUnlinkResponses, VmwareVirtualMachineWebConsoleRetrieveData, VmwareVirtualMachineWebConsoleRetrieveResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const apiAuthEduteamsCompleteRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthEduteamsCompleteRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAuthEduteamsCompleteRetrieveResponses, unknown, ThrowOnError>({
        url: '/api-auth/eduteams/complete/',
        ...options
    });
};

/**
 * Redirect user to OIDC authorization endpoint
 */
export const apiAuthEduteamsInitRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthEduteamsInitRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAuthEduteamsInitRetrieveResponses, unknown, ThrowOnError>({
        url: '/api-auth/eduteams/init/',
        ...options
    });
};

export const apiAuthKeycloakCompleteRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthKeycloakCompleteRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAuthKeycloakCompleteRetrieveResponses, unknown, ThrowOnError>({
        url: '/api-auth/keycloak/complete/',
        ...options
    });
};

/**
 * Redirect user to OIDC authorization endpoint
 */
export const apiAuthKeycloakInitRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthKeycloakInitRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAuthKeycloakInitRetrieveResponses, unknown, ThrowOnError>({
        url: '/api-auth/keycloak/init/',
        ...options
    });
};

/**
 * Logout from the system. If single logout is supported, returns logout URL.
 */
export const apiAuthLogout = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ApiAuthLogoutResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api-auth/logout/',
        ...options
    });
};

export const apiAuthPassword = <ThrowOnError extends boolean = false>(options: Options<ApiAuthPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiAuthPasswordResponses, ApiAuthPasswordErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api-auth/password/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const apiAuthSaml2Login = <ThrowOnError extends boolean = false>(options: Options<ApiAuthSaml2LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiAuthSaml2LoginResponses, unknown, ThrowOnError>({
        url: '/api-auth/saml2/login/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const apiAuthSaml2LoginComplete = <ThrowOnError extends boolean = false>(options: Options<ApiAuthSaml2LoginCompleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiAuthSaml2LoginCompleteResponses, unknown, ThrowOnError>({
        url: '/api-auth/saml2/login/complete/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const apiAuthSaml2LogoutRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthSaml2LogoutRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAuthSaml2LogoutRetrieveResponses, unknown, ThrowOnError>({
        url: '/api-auth/saml2/logout/',
        ...options
    });
};

/**
 * For IdPs which send GET requests
 */
export const apiAuthSaml2LogoutCompleteRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthSaml2LogoutCompleteRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAuthSaml2LogoutCompleteRetrieveResponses, unknown, ThrowOnError>({
        url: '/api-auth/saml2/logout/complete/',
        ...options
    });
};

/**
 * For IdPs which send POST requests
 */
export const apiAuthSaml2LogoutComplete = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthSaml2LogoutCompleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ApiAuthSaml2LogoutCompleteResponses, unknown, ThrowOnError>({
        url: '/api-auth/saml2/logout/complete/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const apiAuthSaml2ProvidersList = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthSaml2ProvidersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAuthSaml2ProvidersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api-auth/saml2/providers/',
        ...options
    });
};

export const apiAuthTaraCompleteRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthTaraCompleteRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAuthTaraCompleteRetrieveResponses, unknown, ThrowOnError>({
        url: '/api-auth/tara/complete/',
        ...options
    });
};

/**
 * Redirect user to OIDC authorization endpoint
 */
export const apiAuthTaraInitRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthTaraInitRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAuthTaraInitRetrieveResponses, unknown, ThrowOnError>({
        url: '/api-auth/tara/init/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const accessSubnetsList = <ThrowOnError extends boolean = false>(options?: Options<AccessSubnetsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AccessSubnetsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/access-subnets/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const accessSubnetsHead = <ThrowOnError extends boolean = false>(options?: Options<AccessSubnetsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AccessSubnetsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/access-subnets/',
        ...options
    });
};

export const accessSubnetsCreate = <ThrowOnError extends boolean = false>(options: Options<AccessSubnetsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AccessSubnetsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/access-subnets/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const accessSubnetsDestroy = <ThrowOnError extends boolean = false>(options: Options<AccessSubnetsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AccessSubnetsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/access-subnets/{uuid}/',
        ...options
    });
};

export const accessSubnetsRetrieve = <ThrowOnError extends boolean = false>(options: Options<AccessSubnetsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AccessSubnetsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/access-subnets/{uuid}/',
        ...options
    });
};

export const accessSubnetsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AccessSubnetsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AccessSubnetsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/access-subnets/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const accessSubnetsUpdate = <ThrowOnError extends boolean = false>(options: Options<AccessSubnetsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AccessSubnetsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/access-subnets/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const adminAnnouncementsList = <ThrowOnError extends boolean = false>(options?: Options<AdminAnnouncementsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AdminAnnouncementsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin-announcements/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const adminAnnouncementsHead = <ThrowOnError extends boolean = false>(options?: Options<AdminAnnouncementsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AdminAnnouncementsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin-announcements/',
        ...options
    });
};

export const adminAnnouncementsCreate = <ThrowOnError extends boolean = false>(options: Options<AdminAnnouncementsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AdminAnnouncementsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin-announcements/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const adminAnnouncementsDestroy = <ThrowOnError extends boolean = false>(options: Options<AdminAnnouncementsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AdminAnnouncementsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin-announcements/{uuid}/',
        ...options
    });
};

export const adminAnnouncementsRetrieve = <ThrowOnError extends boolean = false>(options: Options<AdminAnnouncementsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AdminAnnouncementsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin-announcements/{uuid}/',
        ...options
    });
};

export const adminAnnouncementsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AdminAnnouncementsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AdminAnnouncementsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin-announcements/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const adminAnnouncementsUpdate = <ThrowOnError extends boolean = false>(options: Options<AdminAnnouncementsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AdminAnnouncementsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin-announcements/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const authTokensList = <ThrowOnError extends boolean = false>(options?: Options<AuthTokensListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthTokensListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth-tokens/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const authTokensHead = <ThrowOnError extends boolean = false>(options?: Options<AuthTokensHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AuthTokensHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth-tokens/',
        ...options
    });
};

export const authTokensDestroy = <ThrowOnError extends boolean = false>(options: Options<AuthTokensDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AuthTokensDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth-tokens/{user_id}/',
        ...options
    });
};

export const authTokensRetrieve = <ThrowOnError extends boolean = false>(options: Options<AuthTokensRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AuthTokensRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth-tokens/{user_id}/',
        ...options
    });
};

export const authValimoCreate = <ThrowOnError extends boolean = false>(options: Options<AuthValimoCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthValimoCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth-valimo/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 *
 * To get PKI login status and details - issue post request against /api/auth-valimo/result/
 * with uuid in parameters.
 *
 * Possible states:
 * - Scheduled - login process is scheduled
 * - Processing - login is in progress
 * - OK - login was successful. Response will contain token.
 * - Canceled - login was canceled by user or timed out. Field details will contain additional info.
 * - Erred - unexpected exception happened during login process.
 *
 */
export const authValimoResult = <ThrowOnError extends boolean = false>(options: Options<AuthValimoResultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthValimoResultResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth-valimo/result/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Manage autoprovisioning rules.
 */
export const autoprovisioningRulesList = <ThrowOnError extends boolean = false>(options?: Options<AutoprovisioningRulesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AutoprovisioningRulesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/autoprovisioning-rules/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const autoprovisioningRulesHead = <ThrowOnError extends boolean = false>(options?: Options<AutoprovisioningRulesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AutoprovisioningRulesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/autoprovisioning-rules/',
        ...options
    });
};

/**
 * Manage autoprovisioning rules.
 */
export const autoprovisioningRulesCreate = <ThrowOnError extends boolean = false>(options: Options<AutoprovisioningRulesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AutoprovisioningRulesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/autoprovisioning-rules/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Manage autoprovisioning rules.
 */
export const autoprovisioningRulesDestroy = <ThrowOnError extends boolean = false>(options: Options<AutoprovisioningRulesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AutoprovisioningRulesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/autoprovisioning-rules/{uuid}/',
        ...options
    });
};

/**
 * Manage autoprovisioning rules.
 */
export const autoprovisioningRulesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AutoprovisioningRulesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AutoprovisioningRulesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/autoprovisioning-rules/{uuid}/',
        ...options
    });
};

/**
 * Manage autoprovisioning rules.
 */
export const autoprovisioningRulesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AutoprovisioningRulesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AutoprovisioningRulesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/autoprovisioning-rules/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Manage autoprovisioning rules.
 */
export const autoprovisioningRulesUpdate = <ThrowOnError extends boolean = false>(options: Options<AutoprovisioningRulesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AutoprovisioningRulesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/autoprovisioning-rules/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const awsImagesList = <ThrowOnError extends boolean = false>(options?: Options<AwsImagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AwsImagesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-images/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const awsImagesHead = <ThrowOnError extends boolean = false>(options?: Options<AwsImagesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AwsImagesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-images/',
        ...options
    });
};

export const awsImagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AwsImagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AwsImagesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-images/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const awsInstancesList = <ThrowOnError extends boolean = false>(options?: Options<AwsInstancesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AwsInstancesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-instances/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const awsInstancesHead = <ThrowOnError extends boolean = false>(options?: Options<AwsInstancesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AwsInstancesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-instances/',
        ...options
    });
};

export const awsInstancesCreate = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsInstancesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-instances/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const awsInstancesDestroy = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AwsInstancesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-instances/{uuid}/',
        ...options
    });
};

export const awsInstancesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AwsInstancesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-instances/{uuid}/',
        ...options
    });
};

export const awsInstancesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AwsInstancesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-instances/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const awsInstancesUpdate = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AwsInstancesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-instances/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const awsInstancesPull = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsInstancesPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-instances/{uuid}/pull/',
        ...options
    });
};

export const awsInstancesResize = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesResizeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsInstancesResizeResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-instances/{uuid}/resize/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const awsInstancesRestart = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesRestartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsInstancesRestartResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-instances/{uuid}/restart/',
        ...options
    });
};

export const awsInstancesStart = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsInstancesStartResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-instances/{uuid}/start/',
        ...options
    });
};

export const awsInstancesStop = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsInstancesStopResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-instances/{uuid}/stop/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const awsInstancesUnlink = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsInstancesUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-instances/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const awsRegionsList = <ThrowOnError extends boolean = false>(options?: Options<AwsRegionsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AwsRegionsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-regions/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const awsRegionsHead = <ThrowOnError extends boolean = false>(options?: Options<AwsRegionsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AwsRegionsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-regions/',
        ...options
    });
};

export const awsRegionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<AwsRegionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AwsRegionsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-regions/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const awsSizesList = <ThrowOnError extends boolean = false>(options?: Options<AwsSizesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AwsSizesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-sizes/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const awsSizesHead = <ThrowOnError extends boolean = false>(options?: Options<AwsSizesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AwsSizesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-sizes/',
        ...options
    });
};

export const awsSizesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AwsSizesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AwsSizesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-sizes/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const awsVolumesList = <ThrowOnError extends boolean = false>(options?: Options<AwsVolumesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AwsVolumesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-volumes/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const awsVolumesHead = <ThrowOnError extends boolean = false>(options?: Options<AwsVolumesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AwsVolumesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-volumes/',
        ...options
    });
};

export const awsVolumesCreate = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsVolumesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-volumes/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const awsVolumesDestroy = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AwsVolumesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-volumes/{uuid}/',
        ...options
    });
};

export const awsVolumesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AwsVolumesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-volumes/{uuid}/',
        ...options
    });
};

export const awsVolumesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AwsVolumesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-volumes/{uuid}/',
        ...options
    });
};

export const awsVolumesUpdate = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AwsVolumesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-volumes/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const awsVolumesAttach = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesAttachData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsVolumesAttachResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-volumes/{uuid}/attach/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const awsVolumesDetach = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesDetachData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsVolumesDetachResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-volumes/{uuid}/detach/',
        ...options
    });
};

export const awsVolumesPull = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsVolumesPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-volumes/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const awsVolumesUnlink = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsVolumesUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/aws-volumes/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const azureImagesList = <ThrowOnError extends boolean = false>(options?: Options<AzureImagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AzureImagesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-images/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const azureImagesHead = <ThrowOnError extends boolean = false>(options?: Options<AzureImagesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AzureImagesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-images/',
        ...options
    });
};

export const azureImagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AzureImagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzureImagesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-images/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const azureLocationsList = <ThrowOnError extends boolean = false>(options?: Options<AzureLocationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AzureLocationsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-locations/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const azureLocationsHead = <ThrowOnError extends boolean = false>(options?: Options<AzureLocationsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AzureLocationsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-locations/',
        ...options
    });
};

export const azureLocationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<AzureLocationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzureLocationsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-locations/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const azurePublicIpsList = <ThrowOnError extends boolean = false>(options?: Options<AzurePublicIpsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AzurePublicIpsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-public-ips/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const azurePublicIpsHead = <ThrowOnError extends boolean = false>(options?: Options<AzurePublicIpsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AzurePublicIpsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-public-ips/',
        ...options
    });
};

export const azurePublicIpsCreate = <ThrowOnError extends boolean = false>(options: Options<AzurePublicIpsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzurePublicIpsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-public-ips/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const azurePublicIpsDestroy = <ThrowOnError extends boolean = false>(options: Options<AzurePublicIpsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AzurePublicIpsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-public-ips/{uuid}/',
        ...options
    });
};

export const azurePublicIpsRetrieve = <ThrowOnError extends boolean = false>(options: Options<AzurePublicIpsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzurePublicIpsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-public-ips/{uuid}/',
        ...options
    });
};

export const azurePublicIpsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AzurePublicIpsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AzurePublicIpsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-public-ips/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const azurePublicIpsUpdate = <ThrowOnError extends boolean = false>(options: Options<AzurePublicIpsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AzurePublicIpsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-public-ips/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const azurePublicIpsPull = <ThrowOnError extends boolean = false>(options: Options<AzurePublicIpsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzurePublicIpsPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-public-ips/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const azurePublicIpsUnlink = <ThrowOnError extends boolean = false>(options: Options<AzurePublicIpsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzurePublicIpsUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-public-ips/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const azureResourceGroupsList = <ThrowOnError extends boolean = false>(options?: Options<AzureResourceGroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AzureResourceGroupsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-resource-groups/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const azureResourceGroupsHead = <ThrowOnError extends boolean = false>(options?: Options<AzureResourceGroupsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AzureResourceGroupsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-resource-groups/',
        ...options
    });
};

export const azureResourceGroupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<AzureResourceGroupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzureResourceGroupsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-resource-groups/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const azureSizesList = <ThrowOnError extends boolean = false>(options?: Options<AzureSizesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AzureSizesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sizes/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const azureSizesHead = <ThrowOnError extends boolean = false>(options?: Options<AzureSizesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AzureSizesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sizes/',
        ...options
    });
};

export const azureSizesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AzureSizesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzureSizesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sizes/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const azureSqlDatabasesList = <ThrowOnError extends boolean = false>(options?: Options<AzureSqlDatabasesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AzureSqlDatabasesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-databases/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const azureSqlDatabasesHead = <ThrowOnError extends boolean = false>(options?: Options<AzureSqlDatabasesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AzureSqlDatabasesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-databases/',
        ...options
    });
};

export const azureSqlDatabasesCreate = <ThrowOnError extends boolean = false>(options: Options<AzureSqlDatabasesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureSqlDatabasesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-databases/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const azureSqlDatabasesDestroy = <ThrowOnError extends boolean = false>(options: Options<AzureSqlDatabasesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AzureSqlDatabasesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-databases/{uuid}/',
        ...options
    });
};

export const azureSqlDatabasesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AzureSqlDatabasesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzureSqlDatabasesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-databases/{uuid}/',
        ...options
    });
};

export const azureSqlDatabasesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AzureSqlDatabasesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AzureSqlDatabasesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-databases/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const azureSqlDatabasesUpdate = <ThrowOnError extends boolean = false>(options: Options<AzureSqlDatabasesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AzureSqlDatabasesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-databases/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const azureSqlDatabasesPull = <ThrowOnError extends boolean = false>(options: Options<AzureSqlDatabasesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureSqlDatabasesPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-databases/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const azureSqlDatabasesUnlink = <ThrowOnError extends boolean = false>(options: Options<AzureSqlDatabasesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureSqlDatabasesUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-databases/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const azureSqlServersList = <ThrowOnError extends boolean = false>(options?: Options<AzureSqlServersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AzureSqlServersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-servers/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const azureSqlServersHead = <ThrowOnError extends boolean = false>(options?: Options<AzureSqlServersHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AzureSqlServersHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-servers/',
        ...options
    });
};

export const azureSqlServersCreate = <ThrowOnError extends boolean = false>(options: Options<AzureSqlServersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureSqlServersCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-servers/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const azureSqlServersDestroy = <ThrowOnError extends boolean = false>(options: Options<AzureSqlServersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AzureSqlServersDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-servers/{uuid}/',
        ...options
    });
};

export const azureSqlServersRetrieve = <ThrowOnError extends boolean = false>(options: Options<AzureSqlServersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzureSqlServersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-servers/{uuid}/',
        ...options
    });
};

export const azureSqlServersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AzureSqlServersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AzureSqlServersPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-servers/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const azureSqlServersUpdate = <ThrowOnError extends boolean = false>(options: Options<AzureSqlServersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AzureSqlServersUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-servers/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const azureSqlServersCreateDatabase = <ThrowOnError extends boolean = false>(options: Options<AzureSqlServersCreateDatabaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureSqlServersCreateDatabaseResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-servers/{uuid}/create_database/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const azureSqlServersPull = <ThrowOnError extends boolean = false>(options: Options<AzureSqlServersPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureSqlServersPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-servers/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const azureSqlServersUnlink = <ThrowOnError extends boolean = false>(options: Options<AzureSqlServersUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureSqlServersUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-sql-servers/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const azureVirtualmachinesList = <ThrowOnError extends boolean = false>(options?: Options<AzureVirtualmachinesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AzureVirtualmachinesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-virtualmachines/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const azureVirtualmachinesHead = <ThrowOnError extends boolean = false>(options?: Options<AzureVirtualmachinesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<AzureVirtualmachinesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-virtualmachines/',
        ...options
    });
};

export const azureVirtualmachinesCreate = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureVirtualmachinesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-virtualmachines/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const azureVirtualmachinesDestroy = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AzureVirtualmachinesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/',
        ...options
    });
};

export const azureVirtualmachinesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzureVirtualmachinesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/',
        ...options
    });
};

export const azureVirtualmachinesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AzureVirtualmachinesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const azureVirtualmachinesUpdate = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AzureVirtualmachinesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const azureVirtualmachinesPull = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureVirtualmachinesPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/pull/',
        ...options
    });
};

export const azureVirtualmachinesRestart = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesRestartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureVirtualmachinesRestartResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/restart/',
        ...options
    });
};

export const azureVirtualmachinesStart = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureVirtualmachinesStartResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/start/',
        ...options
    });
};

export const azureVirtualmachinesStop = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureVirtualmachinesStopResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/stop/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const azureVirtualmachinesUnlink = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureVirtualmachinesUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const backendResourceRequestsList = <ThrowOnError extends boolean = false>(options?: Options<BackendResourceRequestsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BackendResourceRequestsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/backend-resource-requests/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const backendResourceRequestsHead = <ThrowOnError extends boolean = false>(options?: Options<BackendResourceRequestsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<BackendResourceRequestsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/backend-resource-requests/',
        ...options
    });
};

export const backendResourceRequestsCreate = <ThrowOnError extends boolean = false>(options: Options<BackendResourceRequestsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BackendResourceRequestsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/backend-resource-requests/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const backendResourceRequestsRetrieve = <ThrowOnError extends boolean = false>(options: Options<BackendResourceRequestsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BackendResourceRequestsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/backend-resource-requests/{uuid}/',
        ...options
    });
};

export const backendResourceRequestsSetDone = <ThrowOnError extends boolean = false>(options: Options<BackendResourceRequestsSetDoneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BackendResourceRequestsSetDoneResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/backend-resource-requests/{uuid}/set_done/',
        ...options
    });
};

export const backendResourceRequestsSetErred = <ThrowOnError extends boolean = false>(options: Options<BackendResourceRequestsSetErredData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BackendResourceRequestsSetErredResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/backend-resource-requests/{uuid}/set_erred/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const backendResourceRequestsStartProcessing = <ThrowOnError extends boolean = false>(options: Options<BackendResourceRequestsStartProcessingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BackendResourceRequestsStartProcessingResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/backend-resource-requests/{uuid}/start_processing/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const backendResourcesList = <ThrowOnError extends boolean = false>(options?: Options<BackendResourcesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BackendResourcesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/backend-resources/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const backendResourcesHead = <ThrowOnError extends boolean = false>(options?: Options<BackendResourcesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<BackendResourcesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/backend-resources/',
        ...options
    });
};

export const backendResourcesCreate = <ThrowOnError extends boolean = false>(options: Options<BackendResourcesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BackendResourcesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/backend-resources/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const backendResourcesDestroy = <ThrowOnError extends boolean = false>(options: Options<BackendResourcesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BackendResourcesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/backend-resources/{uuid}/',
        ...options
    });
};

export const backendResourcesRetrieve = <ThrowOnError extends boolean = false>(options: Options<BackendResourcesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BackendResourcesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/backend-resources/{uuid}/',
        ...options
    });
};

export const backendResourcesImportResource = <ThrowOnError extends boolean = false>(options: Options<BackendResourcesImportResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BackendResourcesImportResourceResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/backend-resources/{uuid}/import_resource/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const billingTotalCostRetrieve = <ThrowOnError extends boolean = false>(options?: Options<BillingTotalCostRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BillingTotalCostRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/billing-total-cost/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const bookingOfferingsList = <ThrowOnError extends boolean = false>(options?: Options<BookingOfferingsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BookingOfferingsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/booking-offerings/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const bookingOfferingsHead = <ThrowOnError extends boolean = false>(options?: Options<BookingOfferingsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<BookingOfferingsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/booking-offerings/',
        ...options
    });
};

export const bookingOfferingsRetrieve = <ThrowOnError extends boolean = false>(options: Options<BookingOfferingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BookingOfferingsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/booking-offerings/{uuid}/',
        ...options
    });
};

export const bookingOfferingsGoogleCalendarSync = <ThrowOnError extends boolean = false>(options: Options<BookingOfferingsGoogleCalendarSyncData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BookingOfferingsGoogleCalendarSyncResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/booking-offerings/{uuid}/google_calendar_sync/',
        ...options
    });
};

export const bookingOfferingsShareGoogleCalendar = <ThrowOnError extends boolean = false>(options: Options<BookingOfferingsShareGoogleCalendarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BookingOfferingsShareGoogleCalendarResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/booking-offerings/{uuid}/share_google_calendar/',
        ...options
    });
};

export const bookingOfferingsUnshareGoogleCalendar = <ThrowOnError extends boolean = false>(options: Options<BookingOfferingsUnshareGoogleCalendarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BookingOfferingsUnshareGoogleCalendarResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/booking-offerings/{uuid}/unshare_google_calendar/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const bookingResourcesList = <ThrowOnError extends boolean = false>(options?: Options<BookingResourcesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BookingResourcesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/booking-resources/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const bookingResourcesHead = <ThrowOnError extends boolean = false>(options?: Options<BookingResourcesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<BookingResourcesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/booking-resources/',
        ...options
    });
};

export const bookingResourcesRetrieve = <ThrowOnError extends boolean = false>(options: Options<BookingResourcesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BookingResourcesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/booking-resources/{uuid}/',
        ...options
    });
};

export const bookingResourcesAccept = <ThrowOnError extends boolean = false>(options: Options<BookingResourcesAcceptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BookingResourcesAcceptResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/booking-resources/{uuid}/accept/',
        ...options
    });
};

export const bookingResourcesReject = <ThrowOnError extends boolean = false>(options: Options<BookingResourcesRejectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BookingResourcesRejectResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/booking-resources/{uuid}/reject/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const broadcastMessageTemplatesList = <ThrowOnError extends boolean = false>(options?: Options<BroadcastMessageTemplatesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BroadcastMessageTemplatesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-message-templates/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const broadcastMessageTemplatesHead = <ThrowOnError extends boolean = false>(options?: Options<BroadcastMessageTemplatesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<BroadcastMessageTemplatesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-message-templates/',
        ...options
    });
};

export const broadcastMessageTemplatesCreate = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessageTemplatesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BroadcastMessageTemplatesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-message-templates/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const broadcastMessageTemplatesDestroy = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessageTemplatesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BroadcastMessageTemplatesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-message-templates/{uuid}/',
        ...options
    });
};

export const broadcastMessageTemplatesRetrieve = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessageTemplatesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BroadcastMessageTemplatesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-message-templates/{uuid}/',
        ...options
    });
};

export const broadcastMessageTemplatesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessageTemplatesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BroadcastMessageTemplatesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-message-templates/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const broadcastMessageTemplatesUpdate = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessageTemplatesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BroadcastMessageTemplatesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-message-templates/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const broadcastMessagesList = <ThrowOnError extends boolean = false>(options?: Options<BroadcastMessagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BroadcastMessagesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-messages/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const broadcastMessagesHead = <ThrowOnError extends boolean = false>(options?: Options<BroadcastMessagesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<BroadcastMessagesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-messages/',
        ...options
    });
};

export const broadcastMessagesCreate = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessagesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BroadcastMessagesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-messages/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const broadcastMessagesDestroy = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessagesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BroadcastMessagesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-messages/{uuid}/',
        ...options
    });
};

export const broadcastMessagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BroadcastMessagesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-messages/{uuid}/',
        ...options
    });
};

export const broadcastMessagesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessagesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BroadcastMessagesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-messages/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const broadcastMessagesUpdate = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessagesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BroadcastMessagesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-messages/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const broadcastMessagesSchedule = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessagesScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BroadcastMessagesScheduleResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-messages/{uuid}/schedule/',
        ...options
    });
};

export const broadcastMessagesSend = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessagesSendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BroadcastMessagesSendResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-messages/{uuid}/send/',
        ...options
    });
};

export const broadcastMessagesRecipientsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<BroadcastMessagesRecipientsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BroadcastMessagesRecipientsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-messages/recipients/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const broadcastMessagesRecipientsHead = <ThrowOnError extends boolean = false>(options?: Options<BroadcastMessagesRecipientsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<BroadcastMessagesRecipientsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/broadcast-messages/recipients/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const callManagingOrganisationsList = <ThrowOnError extends boolean = false>(options?: Options<CallManagingOrganisationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CallManagingOrganisationsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-managing-organisations/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const callManagingOrganisationsHead = <ThrowOnError extends boolean = false>(options?: Options<CallManagingOrganisationsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<CallManagingOrganisationsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-managing-organisations/',
        ...options
    });
};

export const callManagingOrganisationsCreate = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CallManagingOrganisationsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-managing-organisations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const callManagingOrganisationsDestroy = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CallManagingOrganisationsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/',
        ...options
    });
};

export const callManagingOrganisationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CallManagingOrganisationsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/',
        ...options
    });
};

export const callManagingOrganisationsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CallManagingOrganisationsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const callManagingOrganisationsUpdate = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CallManagingOrganisationsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const callManagingOrganisationsAddUser = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsAddUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CallManagingOrganisationsAddUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/add_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const callManagingOrganisationsDeleteUser = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CallManagingOrganisationsDeleteUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/delete_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const callManagingOrganisationsListUsersList = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsListUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CallManagingOrganisationsListUsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/list_users/',
        ...options
    });
};

/**
 * Return statistics for call managing organisation.
 */
export const callManagingOrganisationsStatsRetrieve = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsStatsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CallManagingOrganisationsStatsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/stats/',
        ...options
    });
};

export const callManagingOrganisationsUpdateUser = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CallManagingOrganisationsUpdateUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/update_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const callProposalProjectRoleMappingsList = <ThrowOnError extends boolean = false>(options?: Options<CallProposalProjectRoleMappingsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CallProposalProjectRoleMappingsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-proposal-project-role-mappings/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const callProposalProjectRoleMappingsHead = <ThrowOnError extends boolean = false>(options?: Options<CallProposalProjectRoleMappingsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<CallProposalProjectRoleMappingsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-proposal-project-role-mappings/',
        ...options
    });
};

export const callProposalProjectRoleMappingsCreate = <ThrowOnError extends boolean = false>(options: Options<CallProposalProjectRoleMappingsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CallProposalProjectRoleMappingsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-proposal-project-role-mappings/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const callProposalProjectRoleMappingsDestroy = <ThrowOnError extends boolean = false>(options: Options<CallProposalProjectRoleMappingsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CallProposalProjectRoleMappingsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-proposal-project-role-mappings/{uuid}/',
        ...options
    });
};

export const callProposalProjectRoleMappingsRetrieve = <ThrowOnError extends boolean = false>(options: Options<CallProposalProjectRoleMappingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CallProposalProjectRoleMappingsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-proposal-project-role-mappings/{uuid}/',
        ...options
    });
};

export const callProposalProjectRoleMappingsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<CallProposalProjectRoleMappingsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CallProposalProjectRoleMappingsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-proposal-project-role-mappings/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const callProposalProjectRoleMappingsUpdate = <ThrowOnError extends boolean = false>(options: Options<CallProposalProjectRoleMappingsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CallProposalProjectRoleMappingsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-proposal-project-role-mappings/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const callRoundsList = <ThrowOnError extends boolean = false>(options?: Options<CallRoundsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CallRoundsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-rounds/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const callRoundsHead = <ThrowOnError extends boolean = false>(options?: Options<CallRoundsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<CallRoundsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-rounds/',
        ...options
    });
};

export const callRoundsRetrieve = <ThrowOnError extends boolean = false>(options: Options<CallRoundsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CallRoundsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-rounds/{uuid}/',
        ...options
    });
};

/**
 * Return list of reviewers for round.
 */
export const callRoundsReviewersList = <ThrowOnError extends boolean = false>(options: Options<CallRoundsReviewersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CallRoundsReviewersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/call-rounds/{uuid}/reviewers/',
        ...options
    });
};

export const celeryStatsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<CeleryStatsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CeleryStatsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/celery-stats/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const componentUserUsageLimitsList = <ThrowOnError extends boolean = false>(options?: Options<ComponentUserUsageLimitsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ComponentUserUsageLimitsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/component-user-usage-limits/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const componentUserUsageLimitsHead = <ThrowOnError extends boolean = false>(options?: Options<ComponentUserUsageLimitsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<ComponentUserUsageLimitsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/component-user-usage-limits/',
        ...options
    });
};

export const componentUserUsageLimitsCreate = <ThrowOnError extends boolean = false>(options: Options<ComponentUserUsageLimitsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ComponentUserUsageLimitsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/component-user-usage-limits/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const componentUserUsageLimitsDestroy = <ThrowOnError extends boolean = false>(options: Options<ComponentUserUsageLimitsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ComponentUserUsageLimitsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/component-user-usage-limits/{uuid}/',
        ...options
    });
};

export const componentUserUsageLimitsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ComponentUserUsageLimitsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComponentUserUsageLimitsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/component-user-usage-limits/{uuid}/',
        ...options
    });
};

export const componentUserUsageLimitsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ComponentUserUsageLimitsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ComponentUserUsageLimitsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/component-user-usage-limits/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const componentUserUsageLimitsUpdate = <ThrowOnError extends boolean = false>(options: Options<ComponentUserUsageLimitsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ComponentUserUsageLimitsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/component-user-usage-limits/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieve public settings
 */
export const configurationRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ConfigurationRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ConfigurationRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/configuration/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const customerCreditsList = <ThrowOnError extends boolean = false>(options?: Options<CustomerCreditsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CustomerCreditsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer-credits/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const customerCreditsHead = <ThrowOnError extends boolean = false>(options?: Options<CustomerCreditsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<CustomerCreditsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer-credits/',
        ...options
    });
};

export const customerCreditsCreate = <ThrowOnError extends boolean = false>(options: Options<CustomerCreditsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CustomerCreditsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer-credits/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const customerCreditsDestroy = <ThrowOnError extends boolean = false>(options: Options<CustomerCreditsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CustomerCreditsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer-credits/{uuid}/',
        ...options
    });
};

export const customerCreditsRetrieve = <ThrowOnError extends boolean = false>(options: Options<CustomerCreditsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CustomerCreditsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer-credits/{uuid}/',
        ...options
    });
};

export const customerCreditsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<CustomerCreditsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CustomerCreditsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer-credits/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const customerCreditsUpdate = <ThrowOnError extends boolean = false>(options: Options<CustomerCreditsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CustomerCreditsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer-credits/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const customerCreditsApplyCompensations = <ThrowOnError extends boolean = false>(options: Options<CustomerCreditsApplyCompensationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CustomerCreditsApplyCompensationsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer-credits/{uuid}/apply_compensations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const customerCreditsClearCompensations = <ThrowOnError extends boolean = false>(options: Options<CustomerCreditsClearCompensationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CustomerCreditsClearCompensationsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer-credits/{uuid}/clear_compensations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get credit consumption history grouped by month.
 */
export const customerCreditsConsumptionsList = <ThrowOnError extends boolean = false>(options: Options<CustomerCreditsConsumptionsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CustomerCreditsConsumptionsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer-credits/{uuid}/consumptions/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const customerPermissionsReviewsList = <ThrowOnError extends boolean = false>(options?: Options<CustomerPermissionsReviewsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CustomerPermissionsReviewsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer-permissions-reviews/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const customerPermissionsReviewsHead = <ThrowOnError extends boolean = false>(options?: Options<CustomerPermissionsReviewsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<CustomerPermissionsReviewsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer-permissions-reviews/',
        ...options
    });
};

export const customerPermissionsReviewsRetrieve = <ThrowOnError extends boolean = false>(options: Options<CustomerPermissionsReviewsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CustomerPermissionsReviewsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer-permissions-reviews/{uuid}/',
        ...options
    });
};

/**
 * Close customer permission review.
 */
export const customerPermissionsReviewsClose = <ThrowOnError extends boolean = false>(options: Options<CustomerPermissionsReviewsCloseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CustomerPermissionsReviewsCloseResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer-permissions-reviews/{uuid}/close/',
        ...options
    });
};

/**
 * List customer quotas.
 */
export const customerQuotasList = <ThrowOnError extends boolean = false>(options?: Options<CustomerQuotasListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CustomerQuotasListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer-quotas/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const customerQuotasHead = <ThrowOnError extends boolean = false>(options?: Options<CustomerQuotasHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<CustomerQuotasHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customer-quotas/',
        ...options
    });
};

/**
 * To get a list of customers, run GET against /api/customers/ as authenticated user. Note that a user can
 * only see connected customers:
 *
 * - customers that the user owns
 * - customers that have a project where user has a role
 *
 * Staff also can filter customers by user UUID, for example /api/customers/?user_uuid=<UUID>
 *
 * Staff also can filter customers by exists accounting_start_date, for example:
 *
 * The first category:
 * /api/customers/?accounting_is_running=True
 * has accounting_start_date empty (i.e. accounting starts at once)
 * has accounting_start_date in the past (i.e. has already started).
 *
 * Those that are not in the first:
 * /api/customers/?accounting_is_running=False # exists accounting_start_date
 */
export const customersList = <ThrowOnError extends boolean = false>(options?: Options<CustomersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CustomersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customers/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const customersHead = <ThrowOnError extends boolean = false>(options?: Options<CustomersHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<CustomersHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customers/',
        ...options
    });
};

/**
 * A new customer can only be created by users with staff privilege
 */
export const customersCreate = <ThrowOnError extends boolean = false>(options: Options<CustomersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CustomersCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customers/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * If a customer has connected projects, deletion request will fail with 409 response code.
 */
export const customersDestroy = <ThrowOnError extends boolean = false>(options: Options<CustomersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CustomersDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customers/{uuid}/',
        ...options
    });
};

export const customersRetrieve = <ThrowOnError extends boolean = false>(options: Options<CustomersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CustomersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customers/{uuid}/',
        ...options
    });
};

export const customersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<CustomersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CustomersPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customers/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const customersUpdate = <ThrowOnError extends boolean = false>(options: Options<CustomersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CustomersUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customers/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const customersAddUser = <ThrowOnError extends boolean = false>(options: Options<CustomersAddUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CustomersAddUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customers/{uuid}/add_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const customersDeleteUser = <ThrowOnError extends boolean = false>(options: Options<CustomersDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CustomersDeleteUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customers/{uuid}/delete_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const customersListUsersList = <ThrowOnError extends boolean = false>(options: Options<CustomersListUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CustomersListUsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customers/{uuid}/list_users/',
        ...options
    });
};

/**
 * Return statistics about customer resources usage
 */
export const customersStatsRetrieve = <ThrowOnError extends boolean = false>(options: Options<CustomersStatsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CustomersStatsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customers/{uuid}/stats/',
        ...options
    });
};

/**
 * Update organization groups for customer
 */
export const customersUpdateOrganizationGroups = <ThrowOnError extends boolean = false>(options: Options<CustomersUpdateOrganizationGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CustomersUpdateOrganizationGroupsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customers/{uuid}/update_organization_groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const customersUpdateUser = <ThrowOnError extends boolean = false>(options: Options<CustomersUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CustomersUpdateUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customers/{uuid}/update_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * A list of users connected to the customer.
 */
export const customersUsersList = <ThrowOnError extends boolean = false>(options: Options<CustomersUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CustomersUsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customers/{uuid}/users/',
        ...options
    });
};

/**
 * Return list of countries
 */
export const customersCountriesList = <ThrowOnError extends boolean = false>(options?: Options<CustomersCountriesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CustomersCountriesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customers/countries/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const customersCountriesHead = <ThrowOnError extends boolean = false>(options?: Options<CustomersCountriesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<CustomersCountriesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/customers/countries/',
        ...options
    });
};

export const dailyQuotasRetrieve = <ThrowOnError extends boolean = false>(options?: Options<DailyQuotasRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DailyQuotasRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/daily-quotas/',
        ...options
    });
};

export const databaseStatsList = <ThrowOnError extends boolean = false>(options?: Options<DatabaseStatsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DatabaseStatsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/database-stats/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const digitaloceanDropletsList = <ThrowOnError extends boolean = false>(options?: Options<DigitaloceanDropletsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DigitaloceanDropletsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-droplets/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const digitaloceanDropletsHead = <ThrowOnError extends boolean = false>(options?: Options<DigitaloceanDropletsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<DigitaloceanDropletsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-droplets/',
        ...options
    });
};

export const digitaloceanDropletsCreate = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DigitaloceanDropletsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-droplets/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const digitaloceanDropletsDestroy = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DigitaloceanDropletsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/',
        ...options
    });
};

export const digitaloceanDropletsRetrieve = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DigitaloceanDropletsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/',
        ...options
    });
};

export const digitaloceanDropletsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<DigitaloceanDropletsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const digitaloceanDropletsUpdate = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<DigitaloceanDropletsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const digitaloceanDropletsPull = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DigitaloceanDropletsPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/pull/',
        ...options
    });
};

/**
 * To resize droplet, submit a POST request to the instance URL, specifying URI of a target size.
 *
 * Pass {'disk': true} along with target size in order to perform permanent resizing,
 * which allows you to resize your disk space as well as CPU and RAM.
 * After increasing the disk size, you will not be able to decrease it.
 *
 * Pass {'disk': false} along with target size in order to perform flexible resizing,
 * which only upgrades your CPU and RAM. This option is reversible.
 *
 * Note that instance must be OFFLINE.
 */
export const digitaloceanDropletsResize = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsResizeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DigitaloceanDropletsResizeResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/resize/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const digitaloceanDropletsRestart = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsRestartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DigitaloceanDropletsRestartResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/restart/',
        ...options
    });
};

export const digitaloceanDropletsStart = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DigitaloceanDropletsStartResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/start/',
        ...options
    });
};

export const digitaloceanDropletsStop = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DigitaloceanDropletsStopResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/stop/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const digitaloceanDropletsUnlink = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DigitaloceanDropletsUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const digitaloceanImagesList = <ThrowOnError extends boolean = false>(options?: Options<DigitaloceanImagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DigitaloceanImagesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-images/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const digitaloceanImagesHead = <ThrowOnError extends boolean = false>(options?: Options<DigitaloceanImagesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<DigitaloceanImagesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-images/',
        ...options
    });
};

export const digitaloceanImagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanImagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DigitaloceanImagesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-images/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const digitaloceanRegionsList = <ThrowOnError extends boolean = false>(options?: Options<DigitaloceanRegionsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DigitaloceanRegionsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-regions/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const digitaloceanRegionsHead = <ThrowOnError extends boolean = false>(options?: Options<DigitaloceanRegionsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<DigitaloceanRegionsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-regions/',
        ...options
    });
};

export const digitaloceanRegionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanRegionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DigitaloceanRegionsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-regions/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const digitaloceanSizesList = <ThrowOnError extends boolean = false>(options?: Options<DigitaloceanSizesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DigitaloceanSizesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-sizes/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const digitaloceanSizesHead = <ThrowOnError extends boolean = false>(options?: Options<DigitaloceanSizesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<DigitaloceanSizesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-sizes/',
        ...options
    });
};

export const digitaloceanSizesRetrieve = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanSizesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DigitaloceanSizesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/digitalocean-sizes/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const emailLogsList = <ThrowOnError extends boolean = false>(options?: Options<EmailLogsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EmailLogsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/email-logs/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const emailLogsHead = <ThrowOnError extends boolean = false>(options?: Options<EmailLogsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<EmailLogsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/email-logs/',
        ...options
    });
};

export const emailLogsRetrieve = <ThrowOnError extends boolean = false>(options: Options<EmailLogsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EmailLogsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/email-logs/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const eventSubscriptionsList = <ThrowOnError extends boolean = false>(options?: Options<EventSubscriptionsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EventSubscriptionsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/event-subscriptions/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const eventSubscriptionsHead = <ThrowOnError extends boolean = false>(options?: Options<EventSubscriptionsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<EventSubscriptionsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/event-subscriptions/',
        ...options
    });
};

export const eventSubscriptionsCreate = <ThrowOnError extends boolean = false>(options?: Options<EventSubscriptionsCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<EventSubscriptionsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/event-subscriptions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const eventSubscriptionsDestroy = <ThrowOnError extends boolean = false>(options: Options<EventSubscriptionsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<EventSubscriptionsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/event-subscriptions/{uuid}/',
        ...options
    });
};

export const eventSubscriptionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<EventSubscriptionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EventSubscriptionsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/event-subscriptions/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const eventsList = <ThrowOnError extends boolean = false>(options?: Options<EventsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EventsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/events/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const eventsHead = <ThrowOnError extends boolean = false>(options?: Options<EventsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<EventsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/events/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const eventsStatsList = <ThrowOnError extends boolean = false>(options?: Options<EventsStatsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EventsStatsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/events-stats/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const eventsStatsHead = <ThrowOnError extends boolean = false>(options?: Options<EventsStatsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<EventsStatsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/events-stats/',
        ...options
    });
};

export const eventsRetrieve = <ThrowOnError extends boolean = false>(options: Options<EventsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EventsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/events/{id}/',
        ...options
    });
};

export const eventsCountRetrieve = <ThrowOnError extends boolean = false>(options?: Options<EventsCountRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EventsCountRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/events/count/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const eventsCountHead = <ThrowOnError extends boolean = false>(options?: Options<EventsCountHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<EventsCountHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/events/count/',
        ...options
    });
};

/**
 * Returns a list of groups with event types.
 * Group is used in exclude_features query param.
 */
export const eventsEventGroupsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<EventsEventGroupsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EventsEventGroupsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/events/event_groups/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const eventsEventGroupsHead = <ThrowOnError extends boolean = false>(options?: Options<EventsEventGroupsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<EventsEventGroupsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/events/event_groups/',
        ...options
    });
};

/**
 * Returns a list of scope types acceptable by events filter.
 */
export const eventsScopeTypesRetrieve = <ThrowOnError extends boolean = false>(options?: Options<EventsScopeTypesRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EventsScopeTypesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/events/scope_types/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const eventsScopeTypesHead = <ThrowOnError extends boolean = false>(options?: Options<EventsScopeTypesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<EventsScopeTypesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/events/scope_types/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const externalLinksList = <ThrowOnError extends boolean = false>(options?: Options<ExternalLinksListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ExternalLinksListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/external-links/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const externalLinksHead = <ThrowOnError extends boolean = false>(options?: Options<ExternalLinksHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<ExternalLinksHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/external-links/',
        ...options
    });
};

export const externalLinksCreate = <ThrowOnError extends boolean = false>(options: Options<ExternalLinksCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExternalLinksCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/external-links/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const externalLinksDestroy = <ThrowOnError extends boolean = false>(options: Options<ExternalLinksDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ExternalLinksDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/external-links/{uuid}/',
        ...options
    });
};

export const externalLinksRetrieve = <ThrowOnError extends boolean = false>(options: Options<ExternalLinksRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExternalLinksRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/external-links/{uuid}/',
        ...options
    });
};

export const externalLinksPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ExternalLinksPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ExternalLinksPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/external-links/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const externalLinksUpdate = <ThrowOnError extends boolean = false>(options: Options<ExternalLinksUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ExternalLinksUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/external-links/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Override feature values
 */
export const featureValues = <ThrowOnError extends boolean = false>(options?: Options<FeatureValuesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<FeatureValuesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/feature-values/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const financialReportsList = <ThrowOnError extends boolean = false>(options?: Options<FinancialReportsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FinancialReportsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/financial-reports/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const financialReportsHead = <ThrowOnError extends boolean = false>(options?: Options<FinancialReportsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<FinancialReportsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/financial-reports/',
        ...options
    });
};

export const financialReportsRetrieve = <ThrowOnError extends boolean = false>(options: Options<FinancialReportsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FinancialReportsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/financial-reports/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const freeipaProfilesList = <ThrowOnError extends boolean = false>(options?: Options<FreeipaProfilesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FreeipaProfilesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/freeipa-profiles/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const freeipaProfilesHead = <ThrowOnError extends boolean = false>(options?: Options<FreeipaProfilesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<FreeipaProfilesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/freeipa-profiles/',
        ...options
    });
};

export const freeipaProfilesCreate = <ThrowOnError extends boolean = false>(options: Options<FreeipaProfilesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FreeipaProfilesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/freeipa-profiles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const freeipaProfilesRetrieve = <ThrowOnError extends boolean = false>(options: Options<FreeipaProfilesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FreeipaProfilesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/freeipa-profiles/{uuid}/',
        ...options
    });
};

export const freeipaProfilesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<FreeipaProfilesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<FreeipaProfilesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/freeipa-profiles/{uuid}/',
        ...options
    });
};

export const freeipaProfilesUpdate = <ThrowOnError extends boolean = false>(options: Options<FreeipaProfilesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<FreeipaProfilesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/freeipa-profiles/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update SSH keys for profile.
 */
export const freeipaProfilesUpdateSshKeys = <ThrowOnError extends boolean = false>(options: Options<FreeipaProfilesUpdateSshKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FreeipaProfilesUpdateSshKeysResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/freeipa-profiles/{uuid}/update_ssh_keys/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const googleAuthList = <ThrowOnError extends boolean = false>(options?: Options<GoogleAuthListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GoogleAuthListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/google-auth/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const googleAuthHead = <ThrowOnError extends boolean = false>(options?: Options<GoogleAuthHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<GoogleAuthHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/google-auth/',
        ...options
    });
};

export const googleAuthRetrieve = <ThrowOnError extends boolean = false>(options: Options<GoogleAuthRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GoogleAuthRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/google-auth/{uuid}/',
        ...options
    });
};

export const googleAuthAuthorizeRetrieve = <ThrowOnError extends boolean = false>(options: Options<GoogleAuthAuthorizeRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GoogleAuthAuthorizeRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/google-auth/{uuid}/authorize/',
        ...options
    });
};

/**
 * Callback endpoint for Google authorization.
 */
export const googleAuthCallbackRetrieve = <ThrowOnError extends boolean = false>(options: Options<GoogleAuthCallbackRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GoogleAuthCallbackRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/google-auth/callback/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const googleAuthCallbackHead = <ThrowOnError extends boolean = false>(options: Options<GoogleAuthCallbackHeadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<GoogleAuthCallbackHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/google-auth/callback/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const hooksList = <ThrowOnError extends boolean = false>(options?: Options<HooksListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HooksListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/hooks/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const hooksHead = <ThrowOnError extends boolean = false>(options?: Options<HooksHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<HooksHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/hooks/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const hooksEmailList = <ThrowOnError extends boolean = false>(options?: Options<HooksEmailListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HooksEmailListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/hooks-email/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const hooksEmailHead = <ThrowOnError extends boolean = false>(options?: Options<HooksEmailHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<HooksEmailHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/hooks-email/',
        ...options
    });
};

export const hooksEmailCreate = <ThrowOnError extends boolean = false>(options: Options<HooksEmailCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<HooksEmailCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/hooks-email/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const hooksEmailDestroy = <ThrowOnError extends boolean = false>(options: Options<HooksEmailDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<HooksEmailDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/hooks-email/{uuid}/',
        ...options
    });
};

export const hooksEmailRetrieve = <ThrowOnError extends boolean = false>(options: Options<HooksEmailRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<HooksEmailRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/hooks-email/{uuid}/',
        ...options
    });
};

export const hooksEmailPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<HooksEmailPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<HooksEmailPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/hooks-email/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const hooksEmailUpdate = <ThrowOnError extends boolean = false>(options: Options<HooksEmailUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<HooksEmailUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/hooks-email/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const hooksWebList = <ThrowOnError extends boolean = false>(options?: Options<HooksWebListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HooksWebListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/hooks-web/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const hooksWebHead = <ThrowOnError extends boolean = false>(options?: Options<HooksWebHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<HooksWebHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/hooks-web/',
        ...options
    });
};

/**
 * When hook is activated, POST request is issued against destination URL with the following data:
 *
 * .. code-block:: javascript
 *
 * {
 * "timestamp": "2015-07-14T12:12:56.000000",
 * "message": "Customer ABC LLC has been updated.",
 * "type": "customer_update_succeeded",
 * "context": {
 * "user_native_name": "Walter Lebrowski",
 * "customer_contact_details": "",
 * "user_username": "Walter",
 * "user_uuid": "1c3323fc4ae44120b57ec40dea1be6e6",
 * "customer_uuid": "4633bbbb0b3a4b91bffc0e18f853de85",
 * "ip_address": "8.8.8.8",
 * "user_full_name": "Walter Lebrowski",
 * "customer_abbreviation": "ABC LLC",
 * "customer_name": "ABC LLC"
 * },
 * "levelname": "INFO"
 * }
 *
 * Note that context depends on event type.
 */
export const hooksWebCreate = <ThrowOnError extends boolean = false>(options: Options<HooksWebCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<HooksWebCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/hooks-web/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const hooksWebDestroy = <ThrowOnError extends boolean = false>(options: Options<HooksWebDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<HooksWebDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/hooks-web/{uuid}/',
        ...options
    });
};

export const hooksWebRetrieve = <ThrowOnError extends boolean = false>(options: Options<HooksWebRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<HooksWebRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/hooks-web/{uuid}/',
        ...options
    });
};

export const hooksWebPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<HooksWebPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<HooksWebPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/hooks-web/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const hooksWebUpdate = <ThrowOnError extends boolean = false>(options: Options<HooksWebUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<HooksWebUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/hooks-web/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const identityProvidersList = <ThrowOnError extends boolean = false>(options?: Options<IdentityProvidersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IdentityProvidersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity-providers/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const identityProvidersHead = <ThrowOnError extends boolean = false>(options?: Options<IdentityProvidersHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<IdentityProvidersHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity-providers/',
        ...options
    });
};

export const identityProvidersCreate = <ThrowOnError extends boolean = false>(options: Options<IdentityProvidersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IdentityProvidersCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity-providers/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const identityProvidersDestroy = <ThrowOnError extends boolean = false>(options: Options<IdentityProvidersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<IdentityProvidersDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity-providers/{provider}/',
        ...options
    });
};

export const identityProvidersRetrieve = <ThrowOnError extends boolean = false>(options: Options<IdentityProvidersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IdentityProvidersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity-providers/{provider}/',
        ...options
    });
};

export const identityProvidersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<IdentityProvidersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<IdentityProvidersPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity-providers/{provider}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const identityProvidersUpdate = <ThrowOnError extends boolean = false>(options: Options<IdentityProvidersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<IdentityProvidersUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity-providers/{provider}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const invoiceItemsList = <ThrowOnError extends boolean = false>(options?: Options<InvoiceItemsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InvoiceItemsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const invoiceItemsHead = <ThrowOnError extends boolean = false>(options?: Options<InvoiceItemsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<InvoiceItemsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/',
        ...options
    });
};

export const invoiceItemsDestroy = <ThrowOnError extends boolean = false>(options: Options<InvoiceItemsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<InvoiceItemsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/{uuid}/',
        ...options
    });
};

export const invoiceItemsRetrieve = <ThrowOnError extends boolean = false>(options: Options<InvoiceItemsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InvoiceItemsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/{uuid}/',
        ...options
    });
};

export const invoiceItemsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<InvoiceItemsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<InvoiceItemsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const invoiceItemsUpdate = <ThrowOnError extends boolean = false>(options: Options<InvoiceItemsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<InvoiceItemsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const invoiceItemsConsumptionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<InvoiceItemsConsumptionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InvoiceItemsConsumptionsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/{uuid}/consumptions/',
        ...options
    });
};

/**
 * Create compensation invoice item for selected invoice item.
 */
export const invoiceItemsCreateCompensation = <ThrowOnError extends boolean = false>(options: Options<InvoiceItemsCreateCompensationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InvoiceItemsCreateCompensationResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/{uuid}/create_compensation/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Move invoice item from one invoice to another one.
 */
export const invoiceItemsMigrateTo = <ThrowOnError extends boolean = false>(options: Options<InvoiceItemsMigrateToData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InvoiceItemsMigrateToResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/{uuid}/migrate_to/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get costs breakdown for a project by year and month.
 */
export const invoiceItemsCostsList = <ThrowOnError extends boolean = false>(options?: Options<InvoiceItemsCostsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InvoiceItemsCostsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/costs/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const invoiceItemsCostsHead = <ThrowOnError extends boolean = false>(options?: Options<InvoiceItemsCostsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<InvoiceItemsCostsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/costs/',
        ...options
    });
};

export const invoiceItemsCustomerCostsForPeriodRetrieve = <ThrowOnError extends boolean = false>(options?: Options<InvoiceItemsCustomerCostsForPeriodRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InvoiceItemsCustomerCostsForPeriodRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/customer_costs_for_period/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const invoiceItemsCustomerCostsForPeriodHead = <ThrowOnError extends boolean = false>(options?: Options<InvoiceItemsCustomerCostsForPeriodHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<InvoiceItemsCustomerCostsForPeriodHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/customer_costs_for_period/',
        ...options
    });
};

/**
 * Get resource cost breakdown for a project over a specified period.
 */
export const invoiceItemsProjectCostsForPeriodRetrieve = <ThrowOnError extends boolean = false>(options?: Options<InvoiceItemsProjectCostsForPeriodRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InvoiceItemsProjectCostsForPeriodRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/project_costs_for_period/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const invoiceItemsProjectCostsForPeriodHead = <ThrowOnError extends boolean = false>(options?: Options<InvoiceItemsProjectCostsForPeriodHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<InvoiceItemsProjectCostsForPeriodHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/project_costs_for_period/',
        ...options
    });
};

/**
 * Calculate total price for filtered invoice items.
 */
export const invoiceItemsTotalPriceRetrieve = <ThrowOnError extends boolean = false>(options?: Options<InvoiceItemsTotalPriceRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InvoiceItemsTotalPriceRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/total_price/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const invoiceItemsTotalPriceHead = <ThrowOnError extends boolean = false>(options?: Options<InvoiceItemsTotalPriceHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<InvoiceItemsTotalPriceHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice-items/total_price/',
        ...options
    });
};

export const invoiceSendFinancialReportByMail = <ThrowOnError extends boolean = false>(options: Options<InvoiceSendFinancialReportByMailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InvoiceSendFinancialReportByMailResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoice/send-financial-report-by-mail/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const invoicesList = <ThrowOnError extends boolean = false>(options?: Options<InvoicesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InvoicesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoices/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const invoicesHead = <ThrowOnError extends boolean = false>(options?: Options<InvoicesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<InvoicesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoices/',
        ...options
    });
};

export const invoicesRetrieve = <ThrowOnError extends boolean = false>(options: Options<InvoicesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InvoicesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoices/{uuid}/',
        ...options
    });
};

/**
 * Get invoice items
 * Retrieve a list of invoice items for the specified invoice.
 */
export const invoicesItemsRetrieve = <ThrowOnError extends boolean = false>(options: Options<InvoicesItemsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InvoicesItemsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoices/{uuid}/items/',
        ...options
    });
};

/**
 * Mark invoice as paid and optionally create payment record with proof of payment.
 */
export const invoicesPaid = <ThrowOnError extends boolean = false>(options: Options<InvoicesPaidData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InvoicesPaidResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoices/{uuid}/paid/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Send invoice notification
 * Schedule sending of a notification for the specified invoice.
 */
export const invoicesSendNotification = <ThrowOnError extends boolean = false>(options: Options<InvoicesSendNotificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InvoicesSendNotificationResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoices/{uuid}/send_notification/',
        ...options
    });
};

/**
 * Set backend ID for invoice.
 */
export const invoicesSetBackendId = <ThrowOnError extends boolean = false>(options: Options<InvoicesSetBackendIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InvoicesSetBackendIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoices/{uuid}/set_backend_id/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Set payment URL for invoice.
 */
export const invoicesSetPaymentUrl = <ThrowOnError extends boolean = false>(options: Options<InvoicesSetPaymentUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InvoicesSetPaymentUrlResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoices/{uuid}/set_payment_url/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Set reference number for invoice.
 */
export const invoicesSetReferenceNumber = <ThrowOnError extends boolean = false>(options: Options<InvoicesSetReferenceNumberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InvoicesSetReferenceNumberResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoices/{uuid}/set_reference_number/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Spendings grouped by offerings and filtered by provider.
 */
export const invoicesStatsList = <ThrowOnError extends boolean = false>(options: Options<InvoicesStatsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InvoicesStatsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoices/{uuid}/stats/',
        ...options
    });
};

/**
 * Analyze invoice trends over time by comparing monthly totals for major customers versus others over the past year.
 */
export const invoicesGrowthRetrieve = <ThrowOnError extends boolean = false>(options?: Options<InvoicesGrowthRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InvoicesGrowthRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoices/growth/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const invoicesGrowthHead = <ThrowOnError extends boolean = false>(options?: Options<InvoicesGrowthHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<InvoicesGrowthHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/invoices/growth/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const keycloakGroupsList = <ThrowOnError extends boolean = false>(options?: Options<KeycloakGroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<KeycloakGroupsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/keycloak-groups/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const keycloakGroupsHead = <ThrowOnError extends boolean = false>(options?: Options<KeycloakGroupsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<KeycloakGroupsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/keycloak-groups/',
        ...options
    });
};

export const keycloakGroupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<KeycloakGroupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<KeycloakGroupsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/keycloak-groups/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const keycloakUserGroupMembershipsList = <ThrowOnError extends boolean = false>(options?: Options<KeycloakUserGroupMembershipsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<KeycloakUserGroupMembershipsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/keycloak-user-group-memberships/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const keycloakUserGroupMembershipsHead = <ThrowOnError extends boolean = false>(options?: Options<KeycloakUserGroupMembershipsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<KeycloakUserGroupMembershipsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/keycloak-user-group-memberships/',
        ...options
    });
};

export const keycloakUserGroupMembershipsCreate = <ThrowOnError extends boolean = false>(options: Options<KeycloakUserGroupMembershipsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<KeycloakUserGroupMembershipsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/keycloak-user-group-memberships/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const keycloakUserGroupMembershipsDestroy = <ThrowOnError extends boolean = false>(options: Options<KeycloakUserGroupMembershipsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<KeycloakUserGroupMembershipsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/keycloak-user-group-memberships/{uuid}/',
        ...options
    });
};

export const keycloakUserGroupMembershipsRetrieve = <ThrowOnError extends boolean = false>(options: Options<KeycloakUserGroupMembershipsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<KeycloakUserGroupMembershipsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/keycloak-user-group-memberships/{uuid}/',
        ...options
    });
};

export const keycloakUserGroupMembershipsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<KeycloakUserGroupMembershipsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<KeycloakUserGroupMembershipsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/keycloak-user-group-memberships/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const keycloakUserGroupMembershipsUpdate = <ThrowOnError extends boolean = false>(options: Options<KeycloakUserGroupMembershipsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<KeycloakUserGroupMembershipsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/keycloak-user-group-memberships/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const keysList = <ThrowOnError extends boolean = false>(options?: Options<KeysListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<KeysListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/keys/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const keysHead = <ThrowOnError extends boolean = false>(options?: Options<KeysHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<KeysHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/keys/',
        ...options
    });
};

export const keysCreate = <ThrowOnError extends boolean = false>(options: Options<KeysCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<KeysCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/keys/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const keysDestroy = <ThrowOnError extends boolean = false>(options: Options<KeysDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<KeysDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/keys/{uuid}/',
        ...options
    });
};

export const keysRetrieve = <ThrowOnError extends boolean = false>(options: Options<KeysRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<KeysRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/keys/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const lexisLinksList = <ThrowOnError extends boolean = false>(options?: Options<LexisLinksListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LexisLinksListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/lexis-links/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const lexisLinksHead = <ThrowOnError extends boolean = false>(options?: Options<LexisLinksHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<LexisLinksHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/lexis-links/',
        ...options
    });
};

export const lexisLinksCreate = <ThrowOnError extends boolean = false>(options: Options<LexisLinksCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LexisLinksCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/lexis-links/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const lexisLinksDestroy = <ThrowOnError extends boolean = false>(options: Options<LexisLinksDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<LexisLinksDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/lexis-links/{uuid}/',
        ...options
    });
};

export const lexisLinksRetrieve = <ThrowOnError extends boolean = false>(options: Options<LexisLinksRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LexisLinksRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/lexis-links/{uuid}/',
        ...options
    });
};

export const lexisLinksPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<LexisLinksPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<LexisLinksPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/lexis-links/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const lexisLinksUpdate = <ThrowOnError extends boolean = false>(options: Options<LexisLinksUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<LexisLinksUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/lexis-links/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const maintenanceAnnouncementOfferingsList = <ThrowOnError extends boolean = false>(options?: Options<MaintenanceAnnouncementOfferingsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MaintenanceAnnouncementOfferingsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcement-offerings/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const maintenanceAnnouncementOfferingsHead = <ThrowOnError extends boolean = false>(options?: Options<MaintenanceAnnouncementOfferingsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MaintenanceAnnouncementOfferingsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcement-offerings/',
        ...options
    });
};

export const maintenanceAnnouncementOfferingsCreate = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementOfferingsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MaintenanceAnnouncementOfferingsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcement-offerings/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const maintenanceAnnouncementOfferingsDestroy = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementOfferingsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MaintenanceAnnouncementOfferingsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcement-offerings/{uuid}/',
        ...options
    });
};

export const maintenanceAnnouncementOfferingsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementOfferingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MaintenanceAnnouncementOfferingsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcement-offerings/{uuid}/',
        ...options
    });
};

export const maintenanceAnnouncementOfferingsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementOfferingsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MaintenanceAnnouncementOfferingsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcement-offerings/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const maintenanceAnnouncementOfferingsUpdate = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementOfferingsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MaintenanceAnnouncementOfferingsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcement-offerings/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const maintenanceAnnouncementTemplateOfferingsList = <ThrowOnError extends boolean = false>(options?: Options<MaintenanceAnnouncementTemplateOfferingsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MaintenanceAnnouncementTemplateOfferingsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcement-template-offerings/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const maintenanceAnnouncementTemplateOfferingsHead = <ThrowOnError extends boolean = false>(options?: Options<MaintenanceAnnouncementTemplateOfferingsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MaintenanceAnnouncementTemplateOfferingsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcement-template-offerings/',
        ...options
    });
};

export const maintenanceAnnouncementTemplateOfferingsCreate = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementTemplateOfferingsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MaintenanceAnnouncementTemplateOfferingsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcement-template-offerings/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const maintenanceAnnouncementTemplateOfferingsDestroy = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementTemplateOfferingsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MaintenanceAnnouncementTemplateOfferingsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcement-template-offerings/{uuid}/',
        ...options
    });
};

export const maintenanceAnnouncementTemplateOfferingsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementTemplateOfferingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MaintenanceAnnouncementTemplateOfferingsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcement-template-offerings/{uuid}/',
        ...options
    });
};

export const maintenanceAnnouncementTemplateOfferingsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementTemplateOfferingsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MaintenanceAnnouncementTemplateOfferingsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcement-template-offerings/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const maintenanceAnnouncementTemplateOfferingsUpdate = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementTemplateOfferingsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MaintenanceAnnouncementTemplateOfferingsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcement-template-offerings/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const maintenanceAnnouncementsList = <ThrowOnError extends boolean = false>(options?: Options<MaintenanceAnnouncementsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MaintenanceAnnouncementsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcements/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const maintenanceAnnouncementsHead = <ThrowOnError extends boolean = false>(options?: Options<MaintenanceAnnouncementsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MaintenanceAnnouncementsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcements/',
        ...options
    });
};

export const maintenanceAnnouncementsCreate = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MaintenanceAnnouncementsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcements/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const maintenanceAnnouncementsTemplateList = <ThrowOnError extends boolean = false>(options?: Options<MaintenanceAnnouncementsTemplateListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MaintenanceAnnouncementsTemplateListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcements-template/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const maintenanceAnnouncementsTemplateHead = <ThrowOnError extends boolean = false>(options?: Options<MaintenanceAnnouncementsTemplateHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MaintenanceAnnouncementsTemplateHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcements-template/',
        ...options
    });
};

export const maintenanceAnnouncementsTemplateCreate = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementsTemplateCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MaintenanceAnnouncementsTemplateCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcements-template/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const maintenanceAnnouncementsTemplateDestroy = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementsTemplateDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MaintenanceAnnouncementsTemplateDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcements-template/{uuid}/',
        ...options
    });
};

export const maintenanceAnnouncementsTemplateRetrieve = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementsTemplateRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MaintenanceAnnouncementsTemplateRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcements-template/{uuid}/',
        ...options
    });
};

export const maintenanceAnnouncementsTemplatePartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementsTemplatePartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MaintenanceAnnouncementsTemplatePartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcements-template/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const maintenanceAnnouncementsTemplateUpdate = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementsTemplateUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MaintenanceAnnouncementsTemplateUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcements-template/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const maintenanceAnnouncementsDestroy = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MaintenanceAnnouncementsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcements/{uuid}/',
        ...options
    });
};

export const maintenanceAnnouncementsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MaintenanceAnnouncementsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcements/{uuid}/',
        ...options
    });
};

export const maintenanceAnnouncementsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MaintenanceAnnouncementsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcements/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const maintenanceAnnouncementsUpdate = <ThrowOnError extends boolean = false>(options: Options<MaintenanceAnnouncementsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MaintenanceAnnouncementsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/maintenance-announcements/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceBookingsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceBookingsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceBookingsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-bookings/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceCategoriesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoriesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCategoriesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-categories/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceCategoriesHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoriesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceCategoriesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-categories/',
        ...options
    });
};

export const marketplaceCategoriesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoriesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceCategoriesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-categories/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceCategoriesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoriesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceCategoriesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-categories/{uuid}/',
        ...options
    });
};

export const marketplaceCategoriesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoriesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceCategoriesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-categories/{uuid}/',
        ...options
    });
};

export const marketplaceCategoriesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoriesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceCategoriesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-categories/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceCategoriesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoriesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceCategoriesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-categories/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceCategoryColumnsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoryColumnsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCategoryColumnsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-columns/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceCategoryColumnsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoryColumnsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceCategoryColumnsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-columns/',
        ...options
    });
};

export const marketplaceCategoryColumnsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryColumnsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceCategoryColumnsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-columns/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceCategoryColumnsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryColumnsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceCategoryColumnsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-columns/{uuid}/',
        ...options
    });
};

export const marketplaceCategoryColumnsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryColumnsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceCategoryColumnsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-columns/{uuid}/',
        ...options
    });
};

export const marketplaceCategoryColumnsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryColumnsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceCategoryColumnsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-columns/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceCategoryColumnsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryColumnsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceCategoryColumnsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-columns/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceCategoryComponentUsagesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoryComponentUsagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCategoryComponentUsagesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-component-usages/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceCategoryComponentUsagesHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoryComponentUsagesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceCategoryComponentUsagesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-component-usages/',
        ...options
    });
};

export const marketplaceCategoryComponentUsagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryComponentUsagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceCategoryComponentUsagesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-component-usages/{id}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceCategoryComponentsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoryComponentsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCategoryComponentsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-components/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceCategoryComponentsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoryComponentsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceCategoryComponentsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-components/',
        ...options
    });
};

export const marketplaceCategoryComponentsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryComponentsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceCategoryComponentsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-components/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceCategoryComponentsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryComponentsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceCategoryComponentsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-components/{id}/',
        ...options
    });
};

export const marketplaceCategoryComponentsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryComponentsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceCategoryComponentsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-components/{id}/',
        ...options
    });
};

export const marketplaceCategoryComponentsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryComponentsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceCategoryComponentsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-components/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceCategoryComponentsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryComponentsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceCategoryComponentsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-components/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceCategoryGroupsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoryGroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCategoryGroupsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-groups/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceCategoryGroupsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoryGroupsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceCategoryGroupsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-groups/',
        ...options
    });
};

export const marketplaceCategoryGroupsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryGroupsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceCategoryGroupsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceCategoryGroupsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryGroupsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceCategoryGroupsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-groups/{uuid}/',
        ...options
    });
};

export const marketplaceCategoryGroupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryGroupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceCategoryGroupsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-groups/{uuid}/',
        ...options
    });
};

export const marketplaceCategoryGroupsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryGroupsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceCategoryGroupsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceCategoryGroupsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryGroupsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceCategoryGroupsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceCategoryHelpArticlesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoryHelpArticlesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCategoryHelpArticlesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-help-articles/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceCategoryHelpArticlesHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoryHelpArticlesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceCategoryHelpArticlesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-help-articles/',
        ...options
    });
};

export const marketplaceCategoryHelpArticlesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryHelpArticlesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceCategoryHelpArticlesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-help-articles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceCategoryHelpArticlesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryHelpArticlesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceCategoryHelpArticlesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-help-articles/{id}/',
        ...options
    });
};

export const marketplaceCategoryHelpArticlesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryHelpArticlesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceCategoryHelpArticlesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-help-articles/{id}/',
        ...options
    });
};

export const marketplaceCategoryHelpArticlesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryHelpArticlesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceCategoryHelpArticlesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-help-articles/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceCategoryHelpArticlesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryHelpArticlesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceCategoryHelpArticlesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-category-help-articles/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceChecklistsAdminList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceChecklistsAdminListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceChecklistsAdminListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceChecklistsAdminHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceChecklistsAdminHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceChecklistsAdminHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin/',
        ...options
    });
};

export const marketplaceChecklistsAdminCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceChecklistsAdminCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceChecklistsAdminQuestionDependenciesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceChecklistsAdminQuestionDependenciesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceChecklistsAdminQuestionDependenciesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-question-dependencies/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceChecklistsAdminQuestionDependenciesHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceChecklistsAdminQuestionDependenciesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceChecklistsAdminQuestionDependenciesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-question-dependencies/',
        ...options
    });
};

export const marketplaceChecklistsAdminQuestionDependenciesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminQuestionDependenciesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceChecklistsAdminQuestionDependenciesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-question-dependencies/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceChecklistsAdminQuestionDependenciesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminQuestionDependenciesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceChecklistsAdminQuestionDependenciesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-question-dependencies/{uuid}/',
        ...options
    });
};

export const marketplaceChecklistsAdminQuestionDependenciesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminQuestionDependenciesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceChecklistsAdminQuestionDependenciesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-question-dependencies/{uuid}/',
        ...options
    });
};

export const marketplaceChecklistsAdminQuestionDependenciesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminQuestionDependenciesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceChecklistsAdminQuestionDependenciesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-question-dependencies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceChecklistsAdminQuestionDependenciesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminQuestionDependenciesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceChecklistsAdminQuestionDependenciesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-question-dependencies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceChecklistsAdminQuestionOptionsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceChecklistsAdminQuestionOptionsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceChecklistsAdminQuestionOptionsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-question-options/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceChecklistsAdminQuestionOptionsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceChecklistsAdminQuestionOptionsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceChecklistsAdminQuestionOptionsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-question-options/',
        ...options
    });
};

export const marketplaceChecklistsAdminQuestionOptionsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminQuestionOptionsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceChecklistsAdminQuestionOptionsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-question-options/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceChecklistsAdminQuestionOptionsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminQuestionOptionsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceChecklistsAdminQuestionOptionsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-question-options/{uuid}/',
        ...options
    });
};

export const marketplaceChecklistsAdminQuestionOptionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminQuestionOptionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceChecklistsAdminQuestionOptionsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-question-options/{uuid}/',
        ...options
    });
};

export const marketplaceChecklistsAdminQuestionOptionsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminQuestionOptionsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceChecklistsAdminQuestionOptionsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-question-options/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceChecklistsAdminQuestionOptionsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminQuestionOptionsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceChecklistsAdminQuestionOptionsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-question-options/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceChecklistsAdminQuestionsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceChecklistsAdminQuestionsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceChecklistsAdminQuestionsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-questions/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceChecklistsAdminQuestionsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceChecklistsAdminQuestionsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceChecklistsAdminQuestionsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-questions/',
        ...options
    });
};

export const marketplaceChecklistsAdminQuestionsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminQuestionsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceChecklistsAdminQuestionsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-questions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceChecklistsAdminQuestionsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminQuestionsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceChecklistsAdminQuestionsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-questions/{uuid}/',
        ...options
    });
};

export const marketplaceChecklistsAdminQuestionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminQuestionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceChecklistsAdminQuestionsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-questions/{uuid}/',
        ...options
    });
};

export const marketplaceChecklistsAdminQuestionsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminQuestionsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceChecklistsAdminQuestionsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-questions/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceChecklistsAdminQuestionsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminQuestionsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceChecklistsAdminQuestionsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin-questions/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceChecklistsAdminDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceChecklistsAdminDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin/{uuid}/',
        ...options
    });
};

export const marketplaceChecklistsAdminRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceChecklistsAdminRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin/{uuid}/',
        ...options
    });
};

export const marketplaceChecklistsAdminPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceChecklistsAdminPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceChecklistsAdminUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceChecklistsAdminUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return checklist questions.
 */
export const marketplaceChecklistsAdminChecklistQuestions = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAdminChecklistQuestionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceChecklistsAdminChecklistQuestionsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-admin/{uuid}/questions/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceChecklistsCategoriesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceChecklistsCategoriesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceChecklistsCategoriesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-categories/',
        ...options
    });
};

export const marketplaceChecklistsCategoriesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsCategoriesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceChecklistsCategoriesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-checklists-categories/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceComponentUsagesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceComponentUsagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceComponentUsagesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-component-usages/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceComponentUsagesHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceComponentUsagesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceComponentUsagesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-component-usages/',
        ...options
    });
};

export const marketplaceComponentUsagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceComponentUsagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceComponentUsagesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-component-usages/{uuid}/',
        ...options
    });
};

export const marketplaceComponentUsagesSetUserUsage = <ThrowOnError extends boolean = false>(options: Options<MarketplaceComponentUsagesSetUserUsageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceComponentUsagesSetUserUsageResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-component-usages/{uuid}/set_user_usage/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceComponentUsagesSetUsage = <ThrowOnError extends boolean = false>(options: Options<MarketplaceComponentUsagesSetUsageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceComponentUsagesSetUsageResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-component-usages/set_usage/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceComponentUserUsagesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceComponentUserUsagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceComponentUserUsagesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-component-user-usages/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceComponentUserUsagesHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceComponentUserUsagesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceComponentUserUsagesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-component-user-usages/',
        ...options
    });
};

export const marketplaceComponentUserUsagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceComponentUserUsagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceComponentUserUsagesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-component-user-usages/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceCustomerEstimatedCostPoliciesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCustomerEstimatedCostPoliciesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCustomerEstimatedCostPoliciesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-estimated-cost-policies/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceCustomerEstimatedCostPoliciesHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCustomerEstimatedCostPoliciesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceCustomerEstimatedCostPoliciesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-estimated-cost-policies/',
        ...options
    });
};

export const marketplaceCustomerEstimatedCostPoliciesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCustomerEstimatedCostPoliciesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceCustomerEstimatedCostPoliciesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-estimated-cost-policies/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceCustomerEstimatedCostPoliciesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCustomerEstimatedCostPoliciesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceCustomerEstimatedCostPoliciesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-estimated-cost-policies/{uuid}/',
        ...options
    });
};

export const marketplaceCustomerEstimatedCostPoliciesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCustomerEstimatedCostPoliciesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceCustomerEstimatedCostPoliciesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-estimated-cost-policies/{uuid}/',
        ...options
    });
};

export const marketplaceCustomerEstimatedCostPoliciesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCustomerEstimatedCostPoliciesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceCustomerEstimatedCostPoliciesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-estimated-cost-policies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceCustomerEstimatedCostPoliciesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCustomerEstimatedCostPoliciesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceCustomerEstimatedCostPoliciesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-estimated-cost-policies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceCustomerEstimatedCostPoliciesActionsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCustomerEstimatedCostPoliciesActionsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCustomerEstimatedCostPoliciesActionsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-estimated-cost-policies/actions/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceCustomerEstimatedCostPoliciesActionsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCustomerEstimatedCostPoliciesActionsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceCustomerEstimatedCostPoliciesActionsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-estimated-cost-policies/actions/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceCustomerServiceAccountsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCustomerServiceAccountsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCustomerServiceAccountsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-service-accounts/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceCustomerServiceAccountsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCustomerServiceAccountsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceCustomerServiceAccountsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-service-accounts/',
        ...options
    });
};

export const marketplaceCustomerServiceAccountsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCustomerServiceAccountsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceCustomerServiceAccountsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-service-accounts/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceCustomerServiceAccountsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCustomerServiceAccountsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceCustomerServiceAccountsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-service-accounts/{uuid}/',
        ...options
    });
};

export const marketplaceCustomerServiceAccountsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCustomerServiceAccountsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceCustomerServiceAccountsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-service-accounts/{uuid}/',
        ...options
    });
};

export const marketplaceCustomerServiceAccountsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCustomerServiceAccountsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceCustomerServiceAccountsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-service-accounts/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceCustomerServiceAccountsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCustomerServiceAccountsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceCustomerServiceAccountsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-service-accounts/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceCustomerServiceAccountsRotateApiKey = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCustomerServiceAccountsRotateApiKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceCustomerServiceAccountsRotateApiKeyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-customer-service-accounts/{uuid}/rotate_api_key/',
        ...options
    });
};

/**
 * Count of resource categories for all resources accessible by user.
 */
export const marketplaceGlobalCategoriesRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceGlobalCategoriesRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceGlobalCategoriesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-global-categories/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceIntegrationStatusesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceIntegrationStatusesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceIntegrationStatusesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-integration-statuses/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceIntegrationStatusesHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceIntegrationStatusesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceIntegrationStatusesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-integration-statuses/',
        ...options
    });
};

export const marketplaceIntegrationStatusesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceIntegrationStatusesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceIntegrationStatusesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-integration-statuses/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceOfferingEstimatedCostPoliciesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingEstimatedCostPoliciesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingEstimatedCostPoliciesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-estimated-cost-policies/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceOfferingEstimatedCostPoliciesHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingEstimatedCostPoliciesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceOfferingEstimatedCostPoliciesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-estimated-cost-policies/',
        ...options
    });
};

export const marketplaceOfferingEstimatedCostPoliciesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingEstimatedCostPoliciesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOfferingEstimatedCostPoliciesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-estimated-cost-policies/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceOfferingEstimatedCostPoliciesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingEstimatedCostPoliciesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceOfferingEstimatedCostPoliciesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-estimated-cost-policies/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingEstimatedCostPoliciesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingEstimatedCostPoliciesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOfferingEstimatedCostPoliciesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-estimated-cost-policies/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingEstimatedCostPoliciesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingEstimatedCostPoliciesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceOfferingEstimatedCostPoliciesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-estimated-cost-policies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceOfferingEstimatedCostPoliciesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingEstimatedCostPoliciesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceOfferingEstimatedCostPoliciesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-estimated-cost-policies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List available actions for OfferingEstimatedCostPolicy
 */
export const marketplaceOfferingEstimatedCostPoliciesActionsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingEstimatedCostPoliciesActionsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingEstimatedCostPoliciesActionsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-estimated-cost-policies/actions/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceOfferingEstimatedCostPoliciesActionsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingEstimatedCostPoliciesActionsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceOfferingEstimatedCostPoliciesActionsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-estimated-cost-policies/actions/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceOfferingFilesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingFilesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingFilesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-files/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceOfferingFilesHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingFilesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceOfferingFilesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-files/',
        ...options
    });
};

export const marketplaceOfferingFilesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingFilesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOfferingFilesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-files/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceOfferingFilesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingFilesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceOfferingFilesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-files/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingFilesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingFilesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOfferingFilesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-files/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceOfferingPermissionsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingPermissionsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingPermissionsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-permissions/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceOfferingPermissionsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingPermissionsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceOfferingPermissionsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-permissions/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceOfferingPermissionsLogList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingPermissionsLogListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingPermissionsLogListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-permissions-log/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceOfferingPermissionsLogHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingPermissionsLogHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceOfferingPermissionsLogHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-permissions-log/',
        ...options
    });
};

export const marketplaceOfferingPermissionsLogRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingPermissionsLogRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOfferingPermissionsLogRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-permissions-log/{id}/',
        ...options
    });
};

export const marketplaceOfferingPermissionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingPermissionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOfferingPermissionsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-permissions/{id}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceOfferingReferralsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingReferralsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingReferralsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-referrals/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceOfferingReferralsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingReferralsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceOfferingReferralsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-referrals/',
        ...options
    });
};

export const marketplaceOfferingReferralsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingReferralsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOfferingReferralsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-referrals/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceOfferingUsagePoliciesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingUsagePoliciesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingUsagePoliciesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-usage-policies/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceOfferingUsagePoliciesHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingUsagePoliciesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceOfferingUsagePoliciesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-usage-policies/',
        ...options
    });
};

export const marketplaceOfferingUsagePoliciesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsagePoliciesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOfferingUsagePoliciesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-usage-policies/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceOfferingUsagePoliciesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsagePoliciesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceOfferingUsagePoliciesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-usage-policies/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingUsagePoliciesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsagePoliciesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOfferingUsagePoliciesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-usage-policies/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingUsagePoliciesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsagePoliciesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceOfferingUsagePoliciesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-usage-policies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceOfferingUsagePoliciesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsagePoliciesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceOfferingUsagePoliciesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-usage-policies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceOfferingUsagePoliciesActionsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingUsagePoliciesActionsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingUsagePoliciesActionsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-usage-policies/actions/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceOfferingUsagePoliciesActionsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingUsagePoliciesActionsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceOfferingUsagePoliciesActionsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-usage-policies/actions/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceOfferingUserRolesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingUserRolesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingUserRolesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-user-roles/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceOfferingUserRolesHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingUserRolesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceOfferingUserRolesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-user-roles/',
        ...options
    });
};

export const marketplaceOfferingUserRolesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUserRolesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOfferingUserRolesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-user-roles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceOfferingUserRolesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUserRolesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceOfferingUserRolesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-user-roles/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingUserRolesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUserRolesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOfferingUserRolesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-user-roles/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingUserRolesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUserRolesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceOfferingUserRolesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-user-roles/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceOfferingUserRolesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUserRolesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceOfferingUserRolesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-user-roles/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceOfferingUsersList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingUsersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingUsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-users/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceOfferingUsersHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingUsersHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceOfferingUsersHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-users/',
        ...options
    });
};

export const marketplaceOfferingUsersCreate = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingUsersCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<MarketplaceOfferingUsersCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceOfferingUsersDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceOfferingUsersDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-users/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingUsersRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOfferingUsersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-users/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingUsersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceOfferingUsersPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-users/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceOfferingUsersUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceOfferingUsersUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-users/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceOfferingUsersBeginCreating = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsersBeginCreatingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOfferingUsersBeginCreatingResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-users/{uuid}/begin_creating/',
        ...options
    });
};

export const marketplaceOfferingUsersSetOk = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsersSetOkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOfferingUsersSetOkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-users/{uuid}/set_ok/',
        ...options
    });
};

export const marketplaceOfferingUsersSetPendingAccountLinking = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsersSetPendingAccountLinkingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOfferingUsersSetPendingAccountLinkingResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-users/{uuid}/set_pending_account_linking/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceOfferingUsersSetPendingAdditionalValidation = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsersSetPendingAdditionalValidationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOfferingUsersSetPendingAdditionalValidationResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-users/{uuid}/set_pending_additional_validation/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceOfferingUsersSetValidationComplete = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsersSetValidationCompleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOfferingUsersSetValidationCompleteResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-users/{uuid}/set_validation_complete/',
        ...options
    });
};

export const marketplaceOfferingUsersUpdateRestricted = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsersUpdateRestrictedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOfferingUsersUpdateRestrictedResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-offering-users/{uuid}/update_restricted/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceOrdersList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOrdersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOrdersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-orders/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceOrdersHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOrdersHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceOrdersHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-orders/',
        ...options
    });
};

export const marketplaceOrdersCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOrdersCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-orders/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceOrdersDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceOrdersDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/',
        ...options
    });
};

export const marketplaceOrdersRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOrdersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/',
        ...options
    });
};

export const marketplaceOrdersApproveByConsumer = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersApproveByConsumerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOrdersApproveByConsumerResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/approve_by_consumer/',
        ...options
    });
};

export const marketplaceOrdersApproveByProvider = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersApproveByProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOrdersApproveByProviderResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/approve_by_provider/',
        ...options
    });
};

export const marketplaceOrdersCancel = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersCancelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOrdersCancelResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/cancel/',
        ...options
    });
};

export const marketplaceOrdersOfferingRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersOfferingRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOrdersOfferingRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/offering/',
        ...options
    });
};

export const marketplaceOrdersRejectByConsumer = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersRejectByConsumerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOrdersRejectByConsumerResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/reject_by_consumer/',
        ...options
    });
};

export const marketplaceOrdersRejectByProvider = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersRejectByProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOrdersRejectByProviderResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/reject_by_provider/',
        ...options
    });
};

export const marketplaceOrdersSetStateDone = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersSetStateDoneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOrdersSetStateDoneResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/set_state_done/',
        ...options
    });
};

export const marketplaceOrdersSetStateErred = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersSetStateErredData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOrdersSetStateErredResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/set_state_erred/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceOrdersSetStateExecuting = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersSetStateExecutingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOrdersSetStateExecutingResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/set_state_executing/',
        ...options
    });
};

export const marketplaceOrdersUnlink = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOrdersUnlinkResponses, MarketplaceOrdersUnlinkErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplacePlanComponentsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplacePlanComponentsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplacePlanComponentsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plan-components/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplacePlanComponentsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplacePlanComponentsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplacePlanComponentsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plan-components/',
        ...options
    });
};

export const marketplacePlanComponentsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlanComponentsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplacePlanComponentsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plan-components/{id}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplacePlansList = <ThrowOnError extends boolean = false>(options?: Options<MarketplacePlansListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplacePlansListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plans/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplacePlansHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplacePlansHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplacePlansHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plans/',
        ...options
    });
};

export const marketplacePlansCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplacePlansCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plans/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplacePlansDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplacePlansDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/',
        ...options
    });
};

export const marketplacePlansRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplacePlansRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/',
        ...options
    });
};

export const marketplacePlansPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplacePlansPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplacePlansUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplacePlansUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplacePlansArchive = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansArchiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplacePlansArchiveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/archive/',
        ...options
    });
};

export const marketplacePlansDeleteOrganizationGroups = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansDeleteOrganizationGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplacePlansDeleteOrganizationGroupsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/delete_organization_groups/',
        ...options
    });
};

export const marketplacePlansUpdateOrganizationGroups = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansUpdateOrganizationGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplacePlansUpdateOrganizationGroupsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/update_organization_groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplacePlansUpdatePrices = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansUpdatePricesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplacePlansUpdatePricesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/update_prices/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplacePlansUpdateQuotas = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansUpdateQuotasData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplacePlansUpdateQuotasResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/update_quotas/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplacePlansUsageStatsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplacePlansUsageStatsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplacePlansUsageStatsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plans/usage_stats/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplacePlansUsageStatsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplacePlansUsageStatsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplacePlansUsageStatsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-plans/usage_stats/',
        ...options
    });
};

export const marketplacePluginsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplacePluginsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplacePluginsListResponses, unknown, ThrowOnError>({
        url: '/api/marketplace-plugins/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceProjectEstimatedCostPoliciesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProjectEstimatedCostPoliciesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceProjectEstimatedCostPoliciesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-estimated-cost-policies/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceProjectEstimatedCostPoliciesHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProjectEstimatedCostPoliciesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceProjectEstimatedCostPoliciesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-estimated-cost-policies/',
        ...options
    });
};

export const marketplaceProjectEstimatedCostPoliciesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectEstimatedCostPoliciesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProjectEstimatedCostPoliciesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-estimated-cost-policies/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProjectEstimatedCostPoliciesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectEstimatedCostPoliciesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceProjectEstimatedCostPoliciesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-estimated-cost-policies/{uuid}/',
        ...options
    });
};

export const marketplaceProjectEstimatedCostPoliciesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectEstimatedCostPoliciesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProjectEstimatedCostPoliciesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-estimated-cost-policies/{uuid}/',
        ...options
    });
};

export const marketplaceProjectEstimatedCostPoliciesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectEstimatedCostPoliciesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceProjectEstimatedCostPoliciesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-estimated-cost-policies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProjectEstimatedCostPoliciesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectEstimatedCostPoliciesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceProjectEstimatedCostPoliciesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-estimated-cost-policies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProjectEstimatedCostPoliciesActionsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProjectEstimatedCostPoliciesActionsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceProjectEstimatedCostPoliciesActionsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-estimated-cost-policies/actions/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceProjectEstimatedCostPoliciesActionsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProjectEstimatedCostPoliciesActionsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceProjectEstimatedCostPoliciesActionsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-estimated-cost-policies/actions/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceProjectServiceAccountsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProjectServiceAccountsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceProjectServiceAccountsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-service-accounts/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceProjectServiceAccountsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProjectServiceAccountsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceProjectServiceAccountsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-service-accounts/',
        ...options
    });
};

export const marketplaceProjectServiceAccountsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectServiceAccountsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProjectServiceAccountsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-service-accounts/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProjectServiceAccountsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectServiceAccountsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceProjectServiceAccountsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-service-accounts/{uuid}/',
        ...options
    });
};

export const marketplaceProjectServiceAccountsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectServiceAccountsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProjectServiceAccountsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-service-accounts/{uuid}/',
        ...options
    });
};

export const marketplaceProjectServiceAccountsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectServiceAccountsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceProjectServiceAccountsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-service-accounts/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProjectServiceAccountsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectServiceAccountsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceProjectServiceAccountsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-service-accounts/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProjectServiceAccountsRotateApiKey = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectServiceAccountsRotateApiKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProjectServiceAccountsRotateApiKeyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-service-accounts/{uuid}/rotate_api_key/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceProjectUpdateRequestsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProjectUpdateRequestsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceProjectUpdateRequestsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-update-requests/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceProjectUpdateRequestsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProjectUpdateRequestsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceProjectUpdateRequestsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-update-requests/',
        ...options
    });
};

export const marketplaceProjectUpdateRequestsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectUpdateRequestsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProjectUpdateRequestsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-update-requests/{uuid}/',
        ...options
    });
};

/**
 * Approve project update request
 */
export const marketplaceProjectUpdateRequestsApprove = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectUpdateRequestsApproveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProjectUpdateRequestsApproveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-update-requests/{uuid}/approve/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reject project update request
 */
export const marketplaceProjectUpdateRequestsReject = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectUpdateRequestsRejectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProjectUpdateRequestsRejectResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-project-update-requests/{uuid}/reject/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceProviderOfferingsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProviderOfferingsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceProviderOfferingsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceProviderOfferingsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProviderOfferingsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceProviderOfferingsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/',
        ...options
    });
};

export const marketplaceProviderOfferingsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderOfferingsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceProviderOfferingsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/',
        ...options
    });
};

export const marketplaceProviderOfferingsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/',
        ...options
    });
};

export const marketplaceProviderOfferingsActivate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsActivateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsActivateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/activate/',
        ...options
    });
};

/**
 * Add endpoint to offering.
 */
export const marketplaceProviderOfferingsAddEndpoint = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsAddEndpointData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsAddEndpointResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/add_endpoint/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderOfferingsAddUser = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsAddUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsAddUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/add_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderOfferingsArchive = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsArchiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsArchiveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/archive/',
        ...options
    });
};

/**
 * Get statistics for offering components.
 */
export const marketplaceProviderOfferingsComponentStatsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsComponentStatsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsComponentStatsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/component_stats/',
        ...options
    });
};

/**
 * Get costs for offering.
 */
export const marketplaceProviderOfferingsCostsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsCostsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsCostsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/costs/',
        ...options
    });
};

export const marketplaceProviderOfferingsCreateOfferingComponent = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsCreateOfferingComponentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsCreateOfferingComponentResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/create_offering_component/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get customers for offering.
 */
export const marketplaceProviderOfferingsCustomersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsCustomersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsCustomersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/customers/',
        ...options
    });
};

/**
 * Delete endpoint from offering.
 */
export const marketplaceProviderOfferingsDeleteEndpoint = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsDeleteEndpointData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsDeleteEndpointResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/delete_endpoint/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete offering image.
 */
export const marketplaceProviderOfferingsDeleteImage = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsDeleteImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsDeleteImageResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/delete_image/',
        ...options
    });
};

/**
 * Delete organization groups for offering.
 */
export const marketplaceProviderOfferingsDeleteOrganizationGroups = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsDeleteOrganizationGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsDeleteOrganizationGroupsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/delete_organization_groups/',
        ...options
    });
};

/**
 * Delete offering thumbnail.
 */
export const marketplaceProviderOfferingsDeleteThumbnail = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsDeleteThumbnailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsDeleteThumbnailResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/delete_thumbnail/',
        ...options
    });
};

export const marketplaceProviderOfferingsDeleteUser = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsDeleteUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/delete_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderOfferingsDraft = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsDraftResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/draft/',
        ...options
    });
};

/**
 * This endpoint provides a config file for GLauth
 * Example: https://github.com/glauth/glauth/blob/master/v2/sample-simple.cfg
 * It is assumed that the config is used by an external agent,
 * which synchronizes data from Waldur to GLauth
 */
export const marketplaceProviderOfferingsGlauthUsersConfigRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsGlauthUsersConfigRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsGlauthUsersConfigRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/glauth_users_config/',
        ...options
    });
};

export const marketplaceProviderOfferingsImportResource = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsImportResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsImportResourceResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/import_resource/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List importable resources for offering.
 */
export const marketplaceProviderOfferingsImportableResourcesList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsImportableResourcesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsImportableResourcesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/importable_resources/',
        ...options
    });
};

export const marketplaceProviderOfferingsListCustomerProjectsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsListCustomerProjectsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsListCustomerProjectsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/list_customer_projects/',
        ...options
    });
};

export const marketplaceProviderOfferingsListCustomerServiceAccountsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsListCustomerServiceAccountsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsListCustomerServiceAccountsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/list_customer_service_accounts/',
        ...options
    });
};

export const marketplaceProviderOfferingsListCustomerUsersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsListCustomerUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsListCustomerUsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/list_customer_users/',
        ...options
    });
};

export const marketplaceProviderOfferingsListProjectServiceAccountsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsListProjectServiceAccountsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsListProjectServiceAccountsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/list_project_service_accounts/',
        ...options
    });
};

export const marketplaceProviderOfferingsListUsersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsListUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsListUsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/list_users/',
        ...options
    });
};

export const marketplaceProviderOfferingsMoveOffering = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsMoveOfferingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsMoveOfferingResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/move_offering/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderOfferingsOrdersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsOrdersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsOrdersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/orders/',
        ...options
    });
};

export const marketplaceProviderOfferingsOrdersRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsOrdersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsOrdersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/orders/{order_uuid}/',
        ...options
    });
};

export const marketplaceProviderOfferingsPause = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsPauseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsPauseResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/pause/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh offering user usernames.
 */
export const marketplaceProviderOfferingsRefreshOfferingUsernames = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsRefreshOfferingUsernamesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsRefreshOfferingUsernamesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/refresh_offering_usernames/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderOfferingsRemoveOfferingComponent = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsRemoveOfferingComponentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsRemoveOfferingComponentResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/remove_offering_component/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderOfferingsSetBackendMetadata = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsSetBackendMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsSetBackendMetadataResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/set_backend_metadata/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderOfferingsStatsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsStatsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsStatsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/stats/',
        ...options
    });
};

export const marketplaceProviderOfferingsSync = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsSyncData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsSyncResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/sync/',
        ...options
    });
};

export const marketplaceProviderOfferingsUnpause = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUnpauseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsUnpauseResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/unpause/',
        ...options
    });
};

/**
 * Update offering attributes.
 */
export const marketplaceProviderOfferingsUpdateAttributes = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateAttributesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsUpdateAttributesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_attributes/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderOfferingsUpdateDescription = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateDescriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsUpdateDescriptionResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_description/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update offering image.
 */
export const marketplaceProviderOfferingsUpdateImage = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsUpdateImageResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_image/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderOfferingsUpdateIntegration = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateIntegrationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsUpdateIntegrationResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_integration/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderOfferingsUpdateLocation = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateLocationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsUpdateLocationResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_location/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderOfferingsUpdateOfferingComponent = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateOfferingComponentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsUpdateOfferingComponentResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_offering_component/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderOfferingsUpdateOptions = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateOptionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsUpdateOptionsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_options/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update organization groups for offering.
 */
export const marketplaceProviderOfferingsUpdateOrganizationGroups = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateOrganizationGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsUpdateOrganizationGroupsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_organization_groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderOfferingsUpdateOverview = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateOverviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsUpdateOverviewResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_overview/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderOfferingsUpdateResourceOptions = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateResourceOptionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsUpdateResourceOptionsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_resource_options/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update offering thumbnail.
 */
export const marketplaceProviderOfferingsUpdateThumbnail = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateThumbnailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsUpdateThumbnailResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_thumbnail/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderOfferingsUpdateUser = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsUpdateUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Check if user has access to offering.
 */
export const marketplaceProviderOfferingsUserHasResourceAccessRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUserHasResourceAccessRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsUserHasResourceAccessRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/user_has_resource_access/',
        ...options
    });
};

export const marketplaceProviderOfferingsGroupsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProviderOfferingsGroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceProviderOfferingsGroupsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/groups/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceProviderOfferingsGroupsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProviderOfferingsGroupsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceProviderOfferingsGroupsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-offerings/groups/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceProviderResourcesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProviderResourcesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceProviderResourcesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceProviderResourcesHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProviderResourcesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceProviderResourcesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/',
        ...options
    });
};

export const marketplaceProviderResourcesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderResourcesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/',
        ...options
    });
};

export const marketplaceProviderResourcesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceProviderResourcesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderResourcesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceProviderResourcesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderResourcesDetailsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesDetailsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderResourcesDetailsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/details/',
        ...options
    });
};

/**
 *
 * This endpoint provides a config file for GLauth.
 * Example: https://github.com/glauth/glauth/blob/master/v2/sample-simple.cfg
 * It is assumed that the config is used by an external agent,
 * which synchronizes data from Waldur to GLauth.
 *
 */
export const marketplaceProviderResourcesGlauthUsersConfigRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesGlauthUsersConfigRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderResourcesGlauthUsersConfigRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/glauth_users_config/',
        ...options
    });
};

/**
 * Move resource to another project.
 */
export const marketplaceProviderResourcesMoveResource = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesMoveResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesMoveResourceResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/move_resource/',
        ...options
    });
};

export const marketplaceProviderResourcesOfferingRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesOfferingRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderResourcesOfferingRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/offering/',
        ...options
    });
};

export const marketplaceProviderResourcesOfferingForSubresourcesList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesOfferingForSubresourcesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderResourcesOfferingForSubresourcesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/offering_for_subresources/',
        ...options
    });
};

export const marketplaceProviderResourcesPlanPeriodsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesPlanPeriodsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderResourcesPlanPeriodsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/plan_periods/',
        ...options
    });
};

/**
 * Starts process of pulling a resource
 */
export const marketplaceProviderResourcesPull = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/pull/',
        ...options
    });
};

/**
 * Refresh the last sync time for a resource.
 */
export const marketplaceProviderResourcesRefreshLastSync = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesRefreshLastSyncData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesRefreshLastSyncResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/refresh_last_sync/',
        ...options
    });
};

/**
 * Set the resource as erred.
 */
export const marketplaceProviderResourcesSetAsErred = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSetAsErredData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesSetAsErredResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/set_as_erred/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Set the resource as OK.
 */
export const marketplaceProviderResourcesSetAsOk = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSetAsOkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesSetAsOkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/set_as_ok/',
        ...options
    });
};

/**
 * Set resource backend ID.
 */
export const marketplaceProviderResourcesSetBackendId = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSetBackendIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesSetBackendIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/set_backend_id/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderResourcesSetBackendMetadata = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSetBackendMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesSetBackendMetadataResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/set_backend_metadata/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderResourcesSetEndDateByProvider = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSetEndDateByProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesSetEndDateByProviderResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/set_end_date_by_provider/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Set end date of the resource by staff.
 */
export const marketplaceProviderResourcesSetEndDateByStaff = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSetEndDateByStaffData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesSetEndDateByStaffResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/set_end_date_by_staff/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceProviderResourcesSetLimits = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSetLimitsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesSetLimitsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/set_limits/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Set slug for resource.
 */
export const marketplaceProviderResourcesSetSlug = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSetSlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesSetSlugResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/set_slug/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Submit resource report.
 */
export const marketplaceProviderResourcesSubmitReport = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSubmitReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesSubmitReportResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/submit_report/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return users connected to the project.
 */
export const marketplaceProviderResourcesTeamList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesTeamListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderResourcesTeamListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/team/',
        ...options
    });
};

/**
 * Create marketplace order for resource termination.
 */
export const marketplaceProviderResourcesTerminate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesTerminateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesTerminateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/terminate/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete marketplace resource and related plugin resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const marketplaceProviderResourcesUnlink = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/unlink/',
        ...options
    });
};

export const marketplacePublicApiCheckSignature = <ThrowOnError extends boolean = false>(options: Options<MarketplacePublicApiCheckSignatureData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplacePublicApiCheckSignatureResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-public-api/check_signature/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplacePublicApiSetUsage = <ThrowOnError extends boolean = false>(options: Options<MarketplacePublicApiSetUsageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplacePublicApiSetUsageResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-public-api/set_usage/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplacePublicOfferingsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplacePublicOfferingsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplacePublicOfferingsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-public-offerings/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplacePublicOfferingsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplacePublicOfferingsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplacePublicOfferingsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-public-offerings/',
        ...options
    });
};

export const marketplacePublicOfferingsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplacePublicOfferingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplacePublicOfferingsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-public-offerings/{uuid}/',
        ...options
    });
};

export const marketplacePublicOfferingsPlansList = <ThrowOnError extends boolean = false>(options: Options<MarketplacePublicOfferingsPlansListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplacePublicOfferingsPlansListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-public-offerings/{uuid}/plans/',
        ...options
    });
};

export const marketplacePublicOfferingsPlansRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplacePublicOfferingsPlansRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplacePublicOfferingsPlansRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-public-offerings/{uuid}/plans/{plan_uuid}/',
        ...options
    });
};

export const marketplaceRelatedCustomersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRelatedCustomersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceRelatedCustomersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-related-customers/{customer_uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceRemoteSynchronisationsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceRemoteSynchronisationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceRemoteSynchronisationsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-remote-synchronisations/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceRemoteSynchronisationsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceRemoteSynchronisationsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceRemoteSynchronisationsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-remote-synchronisations/',
        ...options
    });
};

export const marketplaceRemoteSynchronisationsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRemoteSynchronisationsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceRemoteSynchronisationsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-remote-synchronisations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceRemoteSynchronisationsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRemoteSynchronisationsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceRemoteSynchronisationsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-remote-synchronisations/{uuid}/',
        ...options
    });
};

export const marketplaceRemoteSynchronisationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRemoteSynchronisationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceRemoteSynchronisationsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-remote-synchronisations/{uuid}/',
        ...options
    });
};

export const marketplaceRemoteSynchronisationsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRemoteSynchronisationsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceRemoteSynchronisationsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-remote-synchronisations/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceRemoteSynchronisationsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRemoteSynchronisationsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceRemoteSynchronisationsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-remote-synchronisations/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceRemoteSynchronisationsRunSynchronisation = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRemoteSynchronisationsRunSynchronisationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceRemoteSynchronisationsRunSynchronisationResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-remote-synchronisations/{uuid}/run_synchronisation/',
        ...options
    });
};

export const marketplaceResourceOfferingsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourceOfferingsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourceOfferingsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resource-offerings/{category_uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceResourceUsersList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceResourceUsersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceResourceUsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resource-users/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceResourceUsersHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceResourceUsersHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceResourceUsersHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resource-users/',
        ...options
    });
};

export const marketplaceResourceUsersCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourceUsersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourceUsersCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resource-users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceResourceUsersDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourceUsersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceResourceUsersDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resource-users/{uuid}/',
        ...options
    });
};

export const marketplaceResourceUsersRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourceUsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourceUsersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resource-users/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceResourcesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceResourcesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceResourcesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceResourcesHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceResourcesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceResourcesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/',
        ...options
    });
};

export const marketplaceResourcesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourcesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/',
        ...options
    });
};

export const marketplaceResourcesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceResourcesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceResourcesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceResourcesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceResourcesDetailsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesDetailsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourcesDetailsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/details/',
        ...options
    });
};

/**
 *
 * This endpoint provides a config file for GLauth.
 * Example: https://github.com/glauth/glauth/blob/master/v2/sample-simple.cfg
 * It is assumed that the config is used by an external agent,
 * which synchronizes data from Waldur to GLauth.
 *
 */
export const marketplaceResourcesGlauthUsersConfigRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesGlauthUsersConfigRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourcesGlauthUsersConfigRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/glauth_users_config/',
        ...options
    });
};

/**
 * Move resource to another project.
 */
export const marketplaceResourcesMoveResource = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesMoveResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourcesMoveResourceResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/move_resource/',
        ...options
    });
};

export const marketplaceResourcesOfferingRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesOfferingRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourcesOfferingRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/offering/',
        ...options
    });
};

export const marketplaceResourcesOfferingForSubresourcesList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesOfferingForSubresourcesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourcesOfferingForSubresourcesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/offering_for_subresources/',
        ...options
    });
};

export const marketplaceResourcesPlanPeriodsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesPlanPeriodsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourcesPlanPeriodsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/plan_periods/',
        ...options
    });
};

/**
 * Starts process of pulling a resource
 */
export const marketplaceResourcesPull = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourcesPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/pull/',
        ...options
    });
};

/**
 * Set end date of the resource by staff.
 */
export const marketplaceResourcesSetEndDateByStaff = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesSetEndDateByStaffData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourcesSetEndDateByStaffResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/set_end_date_by_staff/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Set slug for resource.
 */
export const marketplaceResourcesSetSlug = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesSetSlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourcesSetSlugResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/set_slug/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create marketplace order for resource plan switch.
 */
export const marketplaceResourcesSwitchPlan = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesSwitchPlanData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourcesSwitchPlanResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/switch_plan/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return users connected to the project.
 */
export const marketplaceResourcesTeamList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesTeamListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourcesTeamListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/team/',
        ...options
    });
};

/**
 * Create marketplace order for resource termination.
 */
export const marketplaceResourcesTerminate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesTerminateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourcesTerminateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/terminate/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete marketplace resource and related plugin resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const marketplaceResourcesUnlink = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourcesUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/unlink/',
        ...options
    });
};

/**
 * Create marketplace order for resource limits update.
 */
export const marketplaceResourcesUpdateLimits = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesUpdateLimitsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourcesUpdateLimitsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/update_limits/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update resource options.
 */
export const marketplaceResourcesUpdateOptions = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesUpdateOptionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourcesUpdateOptionsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/update_options/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceResourcesSuggestName = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesSuggestNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourcesSuggestNameResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-resources/suggest_name/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceRobotAccountsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceRobotAccountsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceRobotAccountsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-robot-accounts/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceRobotAccountsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceRobotAccountsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceRobotAccountsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-robot-accounts/',
        ...options
    });
};

export const marketplaceRobotAccountsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceRobotAccountsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-robot-accounts/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceRobotAccountsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceRobotAccountsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/',
        ...options
    });
};

export const marketplaceRobotAccountsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceRobotAccountsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/',
        ...options
    });
};

export const marketplaceRobotAccountsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceRobotAccountsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceRobotAccountsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceRobotAccountsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceRobotAccountsSetStateCreating = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsSetStateCreatingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceRobotAccountsSetStateCreatingResponses, MarketplaceRobotAccountsSetStateCreatingErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/set_state_creating/',
        ...options
    });
};

export const marketplaceRobotAccountsSetStateDeleted = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsSetStateDeletedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceRobotAccountsSetStateDeletedResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/set_state_deleted/',
        ...options
    });
};

export const marketplaceRobotAccountsSetStateErred = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsSetStateErredData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceRobotAccountsSetStateErredResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/set_state_erred/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceRobotAccountsSetStateOk = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsSetStateOkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceRobotAccountsSetStateOkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/set_state_ok/',
        ...options
    });
};

export const marketplaceRobotAccountsSetStateRequestDeletion = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsSetStateRequestDeletionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceRobotAccountsSetStateRequestDeletionResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/set_state_request_deletion/',
        ...options
    });
};

/**
 * Retrieve available runtime states for resources, optionally filtered by project and category.
 */
export const marketplaceRuntimeStatesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceRuntimeStatesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceRuntimeStatesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-runtime-states/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceScreenshotsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceScreenshotsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceScreenshotsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-screenshots/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceScreenshotsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceScreenshotsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceScreenshotsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-screenshots/',
        ...options
    });
};

export const marketplaceScreenshotsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScreenshotsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceScreenshotsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-screenshots/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceScreenshotsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScreenshotsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceScreenshotsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-screenshots/{uuid}/',
        ...options
    });
};

export const marketplaceScreenshotsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScreenshotsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceScreenshotsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-screenshots/{uuid}/',
        ...options
    });
};

export const marketplaceScreenshotsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScreenshotsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceScreenshotsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-screenshots/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceScreenshotsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScreenshotsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceScreenshotsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-screenshots/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceScriptAsyncDryRunList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceScriptAsyncDryRunListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceScriptAsyncDryRunListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-script-async-dry-run/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceScriptAsyncDryRunHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceScriptAsyncDryRunHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceScriptAsyncDryRunHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-script-async-dry-run/',
        ...options
    });
};

export const marketplaceScriptAsyncDryRunRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScriptAsyncDryRunRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceScriptAsyncDryRunRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-script-async-dry-run/{uuid}/',
        ...options
    });
};

export const marketplaceScriptDryRunAsyncRun = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScriptDryRunAsyncRunData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceScriptDryRunAsyncRunResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-script-dry-run/{uuid}/async_run/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceScriptDryRunRun = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScriptDryRunRunData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceScriptDryRunRunResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-script-dry-run/{uuid}/run/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * This view allows a user to trigger a pull operation for a marketplace script resource.
 * The user must be a service consumer and have access to the resource.
 * The pull operation is performed asynchronously using Celery.
 * Pull a marketplace script resource.
 */
export const marketplaceScriptSyncResource = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScriptSyncResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceScriptSyncResourceResponses, MarketplaceScriptSyncResourceErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-script-sync-resource/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceSectionsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceSectionsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceSectionsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-sections/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceSectionsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceSectionsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceSectionsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-sections/',
        ...options
    });
};

export const marketplaceSectionsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceSectionsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceSectionsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-sections/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceSectionsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceSectionsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceSectionsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-sections/{key}/',
        ...options
    });
};

export const marketplaceSectionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceSectionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceSectionsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-sections/{key}/',
        ...options
    });
};

export const marketplaceSectionsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceSectionsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceSectionsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-sections/{key}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceSectionsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceSectionsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceSectionsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-sections/{key}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const marketplaceServiceProvidersList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceServiceProvidersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceServiceProvidersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceServiceProvidersHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceServiceProvidersHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceServiceProvidersHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/',
        ...options
    });
};

export const marketplaceServiceProvidersCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceServiceProvidersCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return customer projects of service provider.
 */
export const marketplaceServiceProvidersCustomerProjectsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersCustomerProjectsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersCustomerProjectsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{service_provider_uuid}/customer_projects/',
        ...options
    });
};

/**
 * Return customers of service provider.
 */
export const marketplaceServiceProvidersCustomersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersCustomersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersCustomersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{service_provider_uuid}/customers/',
        ...options
    });
};

/**
 * Return SSH keys of service provider.
 */
export const marketplaceServiceProvidersKeysList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersKeysListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersKeysListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{service_provider_uuid}/keys/',
        ...options
    });
};

/**
 * Return offerings of service provider.
 */
export const marketplaceServiceProvidersOfferingsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersOfferingsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersOfferingsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{service_provider_uuid}/offerings/',
        ...options
    });
};

/**
 * Return project permissions of service provider.
 */
export const marketplaceServiceProvidersProjectPermissionsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersProjectPermissionsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersProjectPermissionsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{service_provider_uuid}/project_permissions/',
        ...options
    });
};

/**
 * Return projects of service provider.
 */
export const marketplaceServiceProvidersProjectsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersProjectsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersProjectsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{service_provider_uuid}/projects/',
        ...options
    });
};

/**
 * Return customers that have access role for a specified user within service provider's scope.
 *
 * Checks for:
 * - Customers where user has direct permissions
 * - Customers with projects where user has project roles
 * - Customers related to service provider's resources
 *
 * If user UUID is invalid or missing, returns empty list.
 */
export const marketplaceServiceProvidersUserCustomersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersUserCustomersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersUserCustomersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{service_provider_uuid}/user_customers/',
        ...options
    });
};

/**
 * Return users of service provider.
 */
export const marketplaceServiceProvidersUsersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersUsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{service_provider_uuid}/users/',
        ...options
    });
};

export const marketplaceServiceProvidersDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceServiceProvidersDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/',
        ...options
    });
};

export const marketplaceServiceProvidersRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/',
        ...options
    });
};

export const marketplaceServiceProvidersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceServiceProvidersPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceServiceProvidersUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceServiceProvidersUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceServiceProvidersAddUser = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersAddUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceServiceProvidersAddUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/add_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return service provider API secret code.
 */
export const serviceProviderApiSecretCodeRetrieve = <ThrowOnError extends boolean = false>(options: Options<ServiceProviderApiSecretCodeRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ServiceProviderApiSecretCodeRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/api_secret_code/',
        ...options
    });
};

/**
 * Generate new service provider API secret code.
 */
export const serviceProviderApiSecretCodeGenerate = <ThrowOnError extends boolean = false>(options: Options<ServiceProviderApiSecretCodeGenerateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ServiceProviderApiSecretCodeGenerateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/api_secret_code/',
        ...options
    });
};

export const marketplaceServiceProvidersDeleteUser = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceServiceProvidersDeleteUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/delete_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceServiceProvidersListUsersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersListUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersListUsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/list_users/',
        ...options
    });
};

export const marketplaceServiceProvidersRevenueList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersRevenueListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersRevenueListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/revenue/',
        ...options
    });
};

export const marketplaceServiceProvidersRobotAccountCustomersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersRobotAccountCustomersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersRobotAccountCustomersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/robot_account_customers/',
        ...options
    });
};

export const marketplaceServiceProvidersRobotAccountProjectsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersRobotAccountProjectsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersRobotAccountProjectsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/robot_account_projects/',
        ...options
    });
};

export const marketplaceServiceProvidersSetOfferingsUsername = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersSetOfferingsUsernameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceServiceProvidersSetOfferingsUsernameResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/set_offerings_username/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const marketplaceServiceProvidersStatRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersStatRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersStatRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/stat/',
        ...options
    });
};

export const marketplaceServiceProvidersUpdateUser = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceServiceProvidersUpdateUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/update_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return component usages for current month.
 */
export const marketplaceStatsComponentUsagesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsComponentUsagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsComponentUsagesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/component_usages/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsComponentUsagesHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsComponentUsagesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsComponentUsagesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/component_usages/',
        ...options
    });
};

/**
 * Return component usages per month.
 */
export const marketplaceStatsComponentUsagesPerMonthList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsComponentUsagesPerMonthListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsComponentUsagesPerMonthListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/component_usages_per_month/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsComponentUsagesPerMonthHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsComponentUsagesPerMonthHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsComponentUsagesPerMonthHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/component_usages_per_month/',
        ...options
    });
};

/**
 * Return component usages per project.
 */
export const marketplaceStatsComponentUsagesPerProjectList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsComponentUsagesPerProjectListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsComponentUsagesPerProjectListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/component_usages_per_project/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsComponentUsagesPerProjectHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsComponentUsagesPerProjectHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsComponentUsagesPerProjectHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/component_usages_per_project/',
        ...options
    });
};

/**
 * Count active resources grouped by offering.
 */
export const marketplaceStatsCountActiveResourcesGroupedByOfferingList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountActiveResourcesGroupedByOfferingListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsCountActiveResourcesGroupedByOfferingListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_active_resources_grouped_by_offering/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsCountActiveResourcesGroupedByOfferingHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountActiveResourcesGroupedByOfferingHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsCountActiveResourcesGroupedByOfferingHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_active_resources_grouped_by_offering/',
        ...options
    });
};

/**
 * Count active resources grouped by offering country.
 */
export const marketplaceStatsCountActiveResourcesGroupedByOfferingCountryList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountActiveResourcesGroupedByOfferingCountryListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsCountActiveResourcesGroupedByOfferingCountryListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_active_resources_grouped_by_offering_country/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsCountActiveResourcesGroupedByOfferingCountryHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountActiveResourcesGroupedByOfferingCountryHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsCountActiveResourcesGroupedByOfferingCountryHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_active_resources_grouped_by_offering_country/',
        ...options
    });
};

/**
 * Count active resources grouped by organization group.
 */
export const marketplaceStatsCountActiveResourcesGroupedByOrganizationGroupList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountActiveResourcesGroupedByOrganizationGroupListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsCountActiveResourcesGroupedByOrganizationGroupListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_active_resources_grouped_by_organization_group/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsCountActiveResourcesGroupedByOrganizationGroupHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountActiveResourcesGroupedByOrganizationGroupHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsCountActiveResourcesGroupedByOrganizationGroupHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_active_resources_grouped_by_organization_group/',
        ...options
    });
};

/**
 * Count projects grouped by provider and industry flag
 */
export const marketplaceStatsCountProjectsGroupedByProviderAndIndustryFlagList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountProjectsGroupedByProviderAndIndustryFlagListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsCountProjectsGroupedByProviderAndIndustryFlagListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_projects_grouped_by_provider_and_industry_flag/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsCountProjectsGroupedByProviderAndIndustryFlagHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountProjectsGroupedByProviderAndIndustryFlagHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsCountProjectsGroupedByProviderAndIndustryFlagHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_projects_grouped_by_provider_and_industry_flag/',
        ...options
    });
};

/**
 * Count projects grouped by provider and OECD code
 */
export const marketplaceStatsCountProjectsGroupedByProviderAndOecdList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountProjectsGroupedByProviderAndOecdListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsCountProjectsGroupedByProviderAndOecdListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_projects_grouped_by_provider_and_oecd/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsCountProjectsGroupedByProviderAndOecdHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountProjectsGroupedByProviderAndOecdHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsCountProjectsGroupedByProviderAndOecdHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_projects_grouped_by_provider_and_oecd/',
        ...options
    });
};

/**
 * Count projects of service providers.
 */
export const marketplaceStatsCountProjectsOfServiceProvidersList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountProjectsOfServiceProvidersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsCountProjectsOfServiceProvidersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_projects_of_service_providers/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsCountProjectsOfServiceProvidersHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountProjectsOfServiceProvidersHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsCountProjectsOfServiceProvidersHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_projects_of_service_providers/',
        ...options
    });
};

/**
 * Count projects of service providers grouped by OECD.
 */
export const marketplaceStatsCountProjectsOfServiceProvidersGroupedByOecdList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountProjectsOfServiceProvidersGroupedByOecdListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsCountProjectsOfServiceProvidersGroupedByOecdListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_projects_of_service_providers_grouped_by_oecd/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsCountProjectsOfServiceProvidersGroupedByOecdHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountProjectsOfServiceProvidersGroupedByOecdHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsCountProjectsOfServiceProvidersGroupedByOecdHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_projects_of_service_providers_grouped_by_oecd/',
        ...options
    });
};

/**
 * Count unique users connected with active resources of service provider.
 */
export const marketplaceStatsCountUniqueUsersConnectedWithActiveResourcesOfServiceProviderList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountUniqueUsersConnectedWithActiveResourcesOfServiceProviderListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsCountUniqueUsersConnectedWithActiveResourcesOfServiceProviderListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_unique_users_connected_with_active_resources_of_service_provider/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsCountUniqueUsersConnectedWithActiveResourcesOfServiceProviderHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountUniqueUsersConnectedWithActiveResourcesOfServiceProviderHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsCountUniqueUsersConnectedWithActiveResourcesOfServiceProviderHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_unique_users_connected_with_active_resources_of_service_provider/',
        ...options
    });
};

/**
 * Count users of service providers.
 */
export const marketplaceStatsCountUsersOfServiceProvidersList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountUsersOfServiceProvidersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsCountUsersOfServiceProvidersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_users_of_service_providers/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsCountUsersOfServiceProvidersHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountUsersOfServiceProvidersHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsCountUsersOfServiceProvidersHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/count_users_of_service_providers/',
        ...options
    });
};

/**
 * Return count of customer members.
 */
export const marketplaceStatsCustomerMemberCountList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCustomerMemberCountListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsCustomerMemberCountListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/customer_member_count/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsCustomerMemberCountHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCustomerMemberCountHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsCustomerMemberCountHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/customer_member_count/',
        ...options
    });
};

/**
 * Retrieve statistics about the number of offerings, grouped by category and service provider.
 */
export const marketplaceStatsOfferingsCounterStatsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsOfferingsCounterStatsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsOfferingsCounterStatsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/offerings_counter_stats/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsOfferingsCounterStatsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsOfferingsCounterStatsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsOfferingsCounterStatsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/offerings_counter_stats/',
        ...options
    });
};

/**
 * Return project count per organization.
 */
export const marketplaceStatsOrganizationProjectCountList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsOrganizationProjectCountListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsOrganizationProjectCountListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/organization_project_count/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsOrganizationProjectCountHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsOrganizationProjectCountHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsOrganizationProjectCountHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/organization_project_count/',
        ...options
    });
};

/**
 * Return resource count per organization.
 */
export const marketplaceStatsOrganizationResourceCountList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsOrganizationResourceCountListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsOrganizationResourceCountListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/organization_resource_count/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsOrganizationResourceCountHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsOrganizationResourceCountHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsOrganizationResourceCountHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/organization_resource_count/',
        ...options
    });
};

/**
 * Group project limits by industry flag.
 */
export const marketplaceStatsProjectsLimitsGroupedByIndustryFlagRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsProjectsLimitsGroupedByIndustryFlagRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsProjectsLimitsGroupedByIndustryFlagRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/projects_limits_grouped_by_industry_flag/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsProjectsLimitsGroupedByIndustryFlagHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsProjectsLimitsGroupedByIndustryFlagHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsProjectsLimitsGroupedByIndustryFlagHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/projects_limits_grouped_by_industry_flag/',
        ...options
    });
};

/**
 * Group project limits by OECD code.
 */
export const marketplaceStatsProjectsLimitsGroupedByOecdRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsProjectsLimitsGroupedByOecdRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsProjectsLimitsGroupedByOecdRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/projects_limits_grouped_by_oecd/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsProjectsLimitsGroupedByOecdHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsProjectsLimitsGroupedByOecdHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsProjectsLimitsGroupedByOecdHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/projects_limits_grouped_by_oecd/',
        ...options
    });
};

/**
 * Group project usages by industry flag.
 */
export const marketplaceStatsProjectsUsagesGroupedByIndustryFlagRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsProjectsUsagesGroupedByIndustryFlagRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsProjectsUsagesGroupedByIndustryFlagRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/projects_usages_grouped_by_industry_flag/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsProjectsUsagesGroupedByIndustryFlagHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsProjectsUsagesGroupedByIndustryFlagHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsProjectsUsagesGroupedByIndustryFlagHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/projects_usages_grouped_by_industry_flag/',
        ...options
    });
};

/**
 * Group project usages by OECD code.
 */
export const marketplaceStatsProjectsUsagesGroupedByOecdRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsProjectsUsagesGroupedByOecdRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsProjectsUsagesGroupedByOecdRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/projects_usages_grouped_by_oecd/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsProjectsUsagesGroupedByOecdHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsProjectsUsagesGroupedByOecdHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsProjectsUsagesGroupedByOecdHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/projects_usages_grouped_by_oecd/',
        ...options
    });
};

/**
 * Return resources limits per offering.
 */
export const marketplaceStatsResourcesLimitsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsResourcesLimitsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsResourcesLimitsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/resources_limits/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsResourcesLimitsHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsResourcesLimitsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsResourcesLimitsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/resources_limits/',
        ...options
    });
};

/**
 * Total cost of active resources per offering.
 */
export const marketplaceStatsTotalCostOfActiveResourcesPerOfferingList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsTotalCostOfActiveResourcesPerOfferingListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsTotalCostOfActiveResourcesPerOfferingListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/total_cost_of_active_resources_per_offering/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const marketplaceStatsTotalCostOfActiveResourcesPerOfferingHead = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsTotalCostOfActiveResourcesPerOfferingHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<MarketplaceStatsTotalCostOfActiveResourcesPerOfferingHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/marketplace-stats/total_cost_of_active_resources_per_offering/',
        ...options
    });
};

/**
 * Get media file
 */
export const mediaRetrieve = <ThrowOnError extends boolean = false>(options: Options<MediaRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MediaRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/media/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const notificationMessagesList = <ThrowOnError extends boolean = false>(options?: Options<NotificationMessagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<NotificationMessagesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const notificationMessagesHead = <ThrowOnError extends boolean = false>(options?: Options<NotificationMessagesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<NotificationMessagesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages/',
        ...options
    });
};

export const notificationMessagesCreate = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NotificationMessagesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const notificationMessagesTemplatesList = <ThrowOnError extends boolean = false>(options?: Options<NotificationMessagesTemplatesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<NotificationMessagesTemplatesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages-templates/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const notificationMessagesTemplatesHead = <ThrowOnError extends boolean = false>(options?: Options<NotificationMessagesTemplatesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<NotificationMessagesTemplatesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages-templates/',
        ...options
    });
};

export const notificationMessagesTemplatesCreate = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesTemplatesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NotificationMessagesTemplatesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages-templates/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const notificationMessagesTemplatesDestroy = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesTemplatesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<NotificationMessagesTemplatesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages-templates/{uuid}/',
        ...options
    });
};

export const notificationMessagesTemplatesRetrieve = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesTemplatesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<NotificationMessagesTemplatesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages-templates/{uuid}/',
        ...options
    });
};

export const notificationMessagesTemplatesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesTemplatesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<NotificationMessagesTemplatesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages-templates/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const notificationMessagesTemplatesUpdate = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesTemplatesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<NotificationMessagesTemplatesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages-templates/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const notificationMessagesTemplatesOverride = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesTemplatesOverrideData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NotificationMessagesTemplatesOverrideResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages-templates/{uuid}/override/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const notificationMessagesDestroy = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<NotificationMessagesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages/{uuid}/',
        ...options
    });
};

export const notificationMessagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<NotificationMessagesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages/{uuid}/',
        ...options
    });
};

export const notificationMessagesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<NotificationMessagesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const notificationMessagesUpdate = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<NotificationMessagesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const notificationMessagesDisable = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesDisableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NotificationMessagesDisableResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages/{uuid}/disable/',
        ...options
    });
};

export const notificationMessagesEnable = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesEnableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NotificationMessagesEnableResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/notification-messages/{uuid}/enable/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackBackupsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackBackupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackBackupsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-backups/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackBackupsHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackBackupsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackBackupsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-backups/',
        ...options
    });
};

export const openstackBackupsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackBackupsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackBackupsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-backups/{uuid}/',
        ...options
    });
};

export const openstackBackupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackBackupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackBackupsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-backups/{uuid}/',
        ...options
    });
};

export const openstackBackupsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackBackupsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackBackupsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-backups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackBackupsUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackBackupsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackBackupsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-backups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackBackupsPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackBackupsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackBackupsPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-backups/{uuid}/pull/',
        ...options
    });
};

/**
 * Restore instance from backup
 */
export const openstackBackupsRestore = <ThrowOnError extends boolean = false>(options: Options<OpenstackBackupsRestoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackBackupsRestoreResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-backups/{uuid}/restore/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackBackupsUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackBackupsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackBackupsUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-backups/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackFlavorsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackFlavorsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackFlavorsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-flavors/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackFlavorsHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackFlavorsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackFlavorsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-flavors/',
        ...options
    });
};

export const openstackFlavorsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackFlavorsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackFlavorsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-flavors/{uuid}/',
        ...options
    });
};

export const openstackFlavorsUsageStatsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<OpenstackFlavorsUsageStatsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackFlavorsUsageStatsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-flavors/usage_stats/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackFlavorsUsageStatsHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackFlavorsUsageStatsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackFlavorsUsageStatsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-flavors/usage_stats/',
        ...options
    });
};

/**
 * Status *DOWN* means that floating IP is not linked to a VM, status *ACTIVE* means that it is in use.
 */
export const openstackFloatingIpsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackFloatingIpsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackFloatingIpsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-floating-ips/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackFloatingIpsHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackFloatingIpsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackFloatingIpsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-floating-ips/',
        ...options
    });
};

export const openstackFloatingIpsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackFloatingIpsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackFloatingIpsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-floating-ips/{uuid}/',
        ...options
    });
};

export const openstackFloatingIpsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackFloatingIpsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackFloatingIpsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-floating-ips/{uuid}/',
        ...options
    });
};

/**
 * Attach floating IP to port
 */
export const openstackFloatingIpsAttachToPort = <ThrowOnError extends boolean = false>(options: Options<OpenstackFloatingIpsAttachToPortData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackFloatingIpsAttachToPortResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-floating-ips/{uuid}/attach_to_port/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Detach floating IP from port
 */
export const openstackFloatingIpsDetachFromPort = <ThrowOnError extends boolean = false>(options: Options<OpenstackFloatingIpsDetachFromPortData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackFloatingIpsDetachFromPortResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-floating-ips/{uuid}/detach_from_port/',
        ...options
    });
};

export const openstackFloatingIpsPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackFloatingIpsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackFloatingIpsPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-floating-ips/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackFloatingIpsUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackFloatingIpsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackFloatingIpsUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-floating-ips/{uuid}/unlink/',
        ...options
    });
};

/**
 * Update description of the floating IP
 */
export const openstackFloatingIpsUpdateDescription = <ThrowOnError extends boolean = false>(options: Options<OpenstackFloatingIpsUpdateDescriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackFloatingIpsUpdateDescriptionResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-floating-ips/{uuid}/update_description/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackImagesList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackImagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackImagesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-images/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackImagesHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackImagesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackImagesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-images/',
        ...options
    });
};

export const openstackImagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackImagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackImagesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-images/{uuid}/',
        ...options
    });
};

export const openstackImagesUsageStatsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<OpenstackImagesUsageStatsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackImagesUsageStatsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-images/usage_stats/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackImagesUsageStatsHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackImagesUsageStatsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackImagesUsageStatsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-images/usage_stats/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackInstanceAvailabilityZonesList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackInstanceAvailabilityZonesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackInstanceAvailabilityZonesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instance-availability-zones/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackInstanceAvailabilityZonesHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackInstanceAvailabilityZonesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackInstanceAvailabilityZonesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instance-availability-zones/',
        ...options
    });
};

export const openstackInstanceAvailabilityZonesRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstanceAvailabilityZonesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackInstanceAvailabilityZonesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instance-availability-zones/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackInstancesList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackInstancesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackInstancesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackInstancesHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackInstancesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackInstancesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/',
        ...options
    });
};

export const openstackInstancesRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackInstancesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/',
        ...options
    });
};

export const openstackInstancesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackInstancesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackInstancesUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackInstancesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create backup from instance
 */
export const openstackInstancesBackup = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesBackupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackInstancesBackupResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/backup/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Change flavor of the instance
 */
export const openstackInstancesChangeFlavor = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesChangeFlavorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackInstancesChangeFlavorResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/change_flavor/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get console url for the instance
 */
export const openstackInstancesConsoleRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesConsoleRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackInstancesConsoleRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/console/',
        ...options
    });
};

/**
 * Get console log for the instance
 */
export const openstackInstancesConsoleLogRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesConsoleLogRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackInstancesConsoleLogRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/console_log/',
        ...options
    });
};

/**
 * Get a list of instance floating IPs
 */
export const openstackInstancesFloatingIpsList = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesFloatingIpsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackInstancesFloatingIpsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/floating_ips/',
        ...options
    });
};

/**
 * Get a list of instance ports
 */
export const openstackInstancesPortsList = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesPortsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackInstancesPortsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/ports/',
        ...options
    });
};

export const openstackInstancesPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackInstancesPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/pull/',
        ...options
    });
};

/**
 * Restart the instance
 */
export const openstackInstancesRestart = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesRestartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackInstancesRestartResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/restart/',
        ...options
    });
};

/**
 * Start the instance
 */
export const openstackInstancesStart = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackInstancesStartResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/start/',
        ...options
    });
};

/**
 * Stop the instance
 */
export const openstackInstancesStop = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackInstancesStopResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/stop/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackInstancesUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackInstancesUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/unlink/',
        ...options
    });
};

/**
 * Update allowed address pairs of the instance
 */
export const openstackInstancesUpdateAllowedAddressPairs = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesUpdateAllowedAddressPairsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackInstancesUpdateAllowedAddressPairsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/update_allowed_address_pairs/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update floating IPs of the instance
 */
export const openstackInstancesUpdateFloatingIps = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesUpdateFloatingIpsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackInstancesUpdateFloatingIpsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/update_floating_ips/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update ports of the instance
 */
export const openstackInstancesUpdatePorts = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesUpdatePortsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackInstancesUpdatePortsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/update_ports/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update security groups of the instance
 */
export const openstackInstancesUpdateSecurityGroups = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesUpdateSecurityGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackInstancesUpdateSecurityGroupsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-instances/{uuid}/update_security_groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackMarketplaceTenantsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackMarketplaceTenantsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackMarketplaceTenantsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-marketplace-tenants/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackMarketplaceTenantsHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackMarketplaceTenantsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackMarketplaceTenantsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-marketplace-tenants/',
        ...options
    });
};

export const openstackMarketplaceTenantsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackMarketplaceTenantsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackMarketplaceTenantsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-marketplace-tenants/{uuid}/',
        ...options
    });
};

export const openstackMarketplaceTenantsCreateImage = <ThrowOnError extends boolean = false>(options: Options<OpenstackMarketplaceTenantsCreateImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackMarketplaceTenantsCreateImageResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-marketplace-tenants/{uuid}/create_image/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackMarketplaceTenantsUploadImageData = <ThrowOnError extends boolean = false>(options: Options<OpenstackMarketplaceTenantsUploadImageDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackMarketplaceTenantsUploadImageDataResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-marketplace-tenants/{uuid}/upload_image_data/{image_id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackMigrationsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackMigrationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackMigrationsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-migrations/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackMigrationsHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackMigrationsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackMigrationsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-migrations/',
        ...options
    });
};

export const openstackMigrationsCreate = <ThrowOnError extends boolean = false>(options: Options<OpenstackMigrationsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackMigrationsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-migrations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackMigrationsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackMigrationsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackMigrationsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-migrations/{uuid}/',
        ...options
    });
};

export const openstackMigrationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackMigrationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackMigrationsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-migrations/{uuid}/',
        ...options
    });
};

export const openstackMigrationsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackMigrationsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackMigrationsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-migrations/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackMigrationsUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackMigrationsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackMigrationsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-migrations/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackNetworkRbacPoliciesList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackNetworkRbacPoliciesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackNetworkRbacPoliciesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-network-rbac-policies/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackNetworkRbacPoliciesHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackNetworkRbacPoliciesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackNetworkRbacPoliciesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-network-rbac-policies/',
        ...options
    });
};

export const openstackNetworkRbacPoliciesRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworkRbacPoliciesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackNetworkRbacPoliciesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-network-rbac-policies/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackNetworksList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackNetworksListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackNetworksListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-networks/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackNetworksHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackNetworksHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackNetworksHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-networks/',
        ...options
    });
};

export const openstackNetworksDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackNetworksDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-networks/{uuid}/',
        ...options
    });
};

export const openstackNetworksRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackNetworksRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-networks/{uuid}/',
        ...options
    });
};

export const openstackNetworksPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackNetworksPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-networks/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackNetworksUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackNetworksUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-networks/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackNetworksCreateSubnet = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksCreateSubnetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackNetworksCreateSubnetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-networks/{uuid}/create_subnet/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackNetworksPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackNetworksPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-networks/{uuid}/pull/',
        ...options
    });
};

/**
 * Create RBAC policy for the network
 */
export const openstackNetworksRbacPolicyCreate = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksRbacPolicyCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackNetworksRbacPolicyCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-networks/{uuid}/rbac_policy_create/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete RBAC policy for the network
 */
export const openstackNetworksRbacPolicyDeleteDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksRbacPolicyDeleteDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackNetworksRbacPolicyDeleteDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-networks/{uuid}/rbac_policy_delete/{rbac_policy_uuid}/',
        ...options
    });
};

export const openstackNetworksSetMtu = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksSetMtuData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackNetworksSetMtuResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-networks/{uuid}/set_mtu/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackNetworksUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackNetworksUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-networks/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackPortsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackPortsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackPortsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-ports/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackPortsHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackPortsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackPortsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-ports/',
        ...options
    });
};

export const openstackPortsCreate = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackPortsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-ports/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackPortsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackPortsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-ports/{uuid}/',
        ...options
    });
};

export const openstackPortsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackPortsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-ports/{uuid}/',
        ...options
    });
};

export const openstackPortsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackPortsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-ports/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackPortsUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackPortsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-ports/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Disable port.
 */
export const openstackPortsDisablePort = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsDisablePortData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackPortsDisablePortResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-ports/{uuid}/disable_port/',
        ...options
    });
};

/**
 * Disable port security for the port
 */
export const openstackPortsDisablePortSecurity = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsDisablePortSecurityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackPortsDisablePortSecurityResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-ports/{uuid}/disable_port_security/',
        ...options
    });
};

/**
 * Enable port.
 */
export const openstackPortsEnablePort = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsEnablePortData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackPortsEnablePortResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-ports/{uuid}/enable_port/',
        ...options
    });
};

/**
 * Enable port security for the port
 */
export const openstackPortsEnablePortSecurity = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsEnablePortSecurityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackPortsEnablePortSecurityResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-ports/{uuid}/enable_port_security/',
        ...options
    });
};

export const openstackPortsPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackPortsPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-ports/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackPortsUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackPortsUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-ports/{uuid}/unlink/',
        ...options
    });
};

/**
 * Update port IP address.
 */
export const openstackPortsUpdatePortIp = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsUpdatePortIpData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackPortsUpdatePortIpResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-ports/{uuid}/update_port_ip/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update security groups of the port
 */
export const openstackPortsUpdateSecurityGroups = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsUpdateSecurityGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackPortsUpdateSecurityGroupsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-ports/{uuid}/update_security_groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackRoutersList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackRoutersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackRoutersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-routers/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackRoutersHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackRoutersHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackRoutersHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-routers/',
        ...options
    });
};

export const openstackRoutersCreate = <ThrowOnError extends boolean = false>(options: Options<OpenstackRoutersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackRoutersCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-routers/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackRoutersDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackRoutersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackRoutersDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-routers/{uuid}/',
        ...options
    });
};

export const openstackRoutersRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackRoutersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackRoutersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-routers/{uuid}/',
        ...options
    });
};

/**
 * Add interface to router. Either subnet or port must be provided.
 */
export const openstackRoutersAddRouterInterface = <ThrowOnError extends boolean = false>(options: Options<OpenstackRoutersAddRouterInterfaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackRoutersAddRouterInterfaceResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-routers/{uuid}/add_router_interface/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove interface from router. Either subnet or port must be provided.
 */
export const openstackRoutersRemoveRouterInterface = <ThrowOnError extends boolean = false>(options: Options<OpenstackRoutersRemoveRouterInterfaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackRoutersRemoveRouterInterfaceResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-routers/{uuid}/remove_router_interface/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackRoutersSetRoutes = <ThrowOnError extends boolean = false>(options: Options<OpenstackRoutersSetRoutesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackRoutersSetRoutesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-routers/{uuid}/set_routes/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackSecurityGroupsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackSecurityGroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackSecurityGroupsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-security-groups/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackSecurityGroupsHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackSecurityGroupsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackSecurityGroupsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-security-groups/',
        ...options
    });
};

export const openstackSecurityGroupsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackSecurityGroupsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackSecurityGroupsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-security-groups/{uuid}/',
        ...options
    });
};

export const openstackSecurityGroupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackSecurityGroupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackSecurityGroupsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-security-groups/{uuid}/',
        ...options
    });
};

export const openstackSecurityGroupsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackSecurityGroupsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackSecurityGroupsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-security-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackSecurityGroupsUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackSecurityGroupsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackSecurityGroupsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-security-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackSecurityGroupsPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackSecurityGroupsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackSecurityGroupsPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-security-groups/{uuid}/pull/',
        ...options
    });
};

/**
 * Update security group rules
 */
export const openstackSecurityGroupsSetRules = <ThrowOnError extends boolean = false>(options: Options<OpenstackSecurityGroupsSetRulesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackSecurityGroupsSetRulesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-security-groups/{uuid}/set_rules/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackSecurityGroupsUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackSecurityGroupsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackSecurityGroupsUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-security-groups/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackServerGroupsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackServerGroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackServerGroupsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-server-groups/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackServerGroupsHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackServerGroupsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackServerGroupsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-server-groups/',
        ...options
    });
};

export const openstackServerGroupsCreate = <ThrowOnError extends boolean = false>(options: Options<OpenstackServerGroupsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackServerGroupsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-server-groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackServerGroupsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackServerGroupsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackServerGroupsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-server-groups/{uuid}/',
        ...options
    });
};

export const openstackServerGroupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackServerGroupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackServerGroupsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-server-groups/{uuid}/',
        ...options
    });
};

export const openstackServerGroupsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackServerGroupsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackServerGroupsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-server-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackServerGroupsUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackServerGroupsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackServerGroupsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-server-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackServerGroupsPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackServerGroupsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackServerGroupsPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-server-groups/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackServerGroupsUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackServerGroupsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackServerGroupsUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-server-groups/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackSnapshotsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackSnapshotsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackSnapshotsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-snapshots/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackSnapshotsHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackSnapshotsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackSnapshotsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-snapshots/',
        ...options
    });
};

export const openstackSnapshotsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackSnapshotsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackSnapshotsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-snapshots/{uuid}/',
        ...options
    });
};

export const openstackSnapshotsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackSnapshotsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackSnapshotsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-snapshots/{uuid}/',
        ...options
    });
};

export const openstackSnapshotsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackSnapshotsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackSnapshotsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-snapshots/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackSnapshotsUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackSnapshotsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackSnapshotsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-snapshots/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackSnapshotsPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackSnapshotsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackSnapshotsPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-snapshots/{uuid}/pull/',
        ...options
    });
};

/**
 * Get a list of snapshot restorations
 */
export const openstackSnapshotsRestorationsList = <ThrowOnError extends boolean = false>(options: Options<OpenstackSnapshotsRestorationsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackSnapshotsRestorationsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-snapshots/{uuid}/restorations/',
        ...options
    });
};

/**
 * Restore volume from snapshot
 */
export const openstackSnapshotsRestore = <ThrowOnError extends boolean = false>(options: Options<OpenstackSnapshotsRestoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackSnapshotsRestoreResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-snapshots/{uuid}/restore/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackSnapshotsUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackSnapshotsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackSnapshotsUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-snapshots/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackSubnetsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackSubnetsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackSubnetsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-subnets/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackSubnetsHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackSubnetsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackSubnetsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-subnets/',
        ...options
    });
};

export const openstackSubnetsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackSubnetsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackSubnetsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-subnets/{uuid}/',
        ...options
    });
};

export const openstackSubnetsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackSubnetsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackSubnetsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-subnets/{uuid}/',
        ...options
    });
};

export const openstackSubnetsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackSubnetsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackSubnetsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-subnets/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackSubnetsUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackSubnetsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackSubnetsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-subnets/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackSubnetsConnect = <ThrowOnError extends boolean = false>(options: Options<OpenstackSubnetsConnectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackSubnetsConnectResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-subnets/{uuid}/connect/',
        ...options
    });
};

export const openstackSubnetsDisconnect = <ThrowOnError extends boolean = false>(options: Options<OpenstackSubnetsDisconnectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackSubnetsDisconnectResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-subnets/{uuid}/disconnect/',
        ...options
    });
};

export const openstackSubnetsPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackSubnetsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackSubnetsPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-subnets/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackSubnetsUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackSubnetsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackSubnetsUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-subnets/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackTenantsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackTenantsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackTenantsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackTenantsHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackTenantsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackTenantsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/',
        ...options
    });
};

export const openstackTenantsCreate = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackTenantsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackTenantsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/',
        ...options
    });
};

export const openstackTenantsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackTenantsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/',
        ...options
    });
};

export const openstackTenantsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackTenantsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackTenantsUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackTenantsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Return a list of volumes from backend
 */
export const openstackTenantsBackendInstancesList = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsBackendInstancesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackTenantsBackendInstancesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/backend_instances/',
        ...options
    });
};

/**
 * Return a list of volumes from backend
 */
export const openstackTenantsBackendVolumesList = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsBackendVolumesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackTenantsBackendVolumesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/backend_volumes/',
        ...options
    });
};

/**
 * Change password for tenant user
 */
export const openstackTenantsChangePassword = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsChangePasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsChangePasswordResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/change_password/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create floating IP for tenant
 */
export const openstackTenantsCreateFloatingIp = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsCreateFloatingIpData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsCreateFloatingIpResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/create_floating_ip/',
        ...options
    });
};

/**
 * Create network for tenant
 */
export const openstackTenantsCreateNetwork = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsCreateNetworkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsCreateNetworkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/create_network/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackTenantsCreateSecurityGroup = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsCreateSecurityGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsCreateSecurityGroupResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/create_security_group/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackTenantsCreateServerGroup = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsCreateServerGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsCreateServerGroupResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/create_server_group/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackTenantsPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/pull/',
        ...options
    });
};

/**
 * Trigger job to pull floating IPs from remote VPC
 */
export const openstackTenantsPullFloatingIps = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsPullFloatingIpsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsPullFloatingIpsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/pull_floating_ips/',
        ...options
    });
};

/**
 * It triggers celery job to pull quotas from remote VPC
 */
export const openstackTenantsPullQuotas = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsPullQuotasData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsPullQuotasResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/pull_quotas/',
        ...options
    });
};

/**
 * Trigger job to pull security groups from remote VPC
 */
export const openstackTenantsPullSecurityGroups = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsPullSecurityGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsPullSecurityGroupsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/pull_security_groups/',
        ...options
    });
};

/**
 * Trigger job to pull server groups from remote VPC
 */
export const openstackTenantsPullServerGroups = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsPullServerGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsPullServerGroupsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/pull_server_groups/',
        ...options
    });
};

/**
 * A quota can be set for a particular tenant. Only staff users can do that.
 * In order to set quota submit POST request to /api/openstack-tenants/<uuid>/set_quotas/.
 * The quota values are propagated to the backend.
 *
 * The following quotas are supported. All values are expected to be integers:
 *
 * - instances - maximal number of created instances.
 * - ram - maximal size of ram for allocation. In MiB_.
 * - storage - maximal size of storage for allocation. In MiB_.
 * - vcpu - maximal number of virtual cores for allocation.
 * - security_group_count - maximal number of created security groups.
 * - security_group_rule_count - maximal number of created security groups rules.
 * - volumes - maximal number of created volumes.
 * - snapshots - maximal number of created snapshots.
 *
 * It is possible to update quotas by one or by submitting all the fields in one request.
 * Waldur will attempt to update the provided quotas. Please note, that if provided quotas are
 * conflicting with the backend (e.g. requested number of instances is below of the already existing ones),
 * some quotas might not be applied.
 *
 * .. _MiB: http://en.wikipedia.org/wiki/Mebibyte
 *
 * Response code of a successful request is **202 ACCEPTED**.
 * In case tenant is in a non-stable status, the response would be **409 CONFLICT**.
 * In this case REST client is advised to repeat the request after some time.
 * On successful completion the task will synchronize quotas with the backend.
 */
export const openstackTenantsSetQuotas = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsSetQuotasData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsSetQuotasResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/set_quotas/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackTenantsUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackVolumeAvailabilityZonesList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackVolumeAvailabilityZonesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackVolumeAvailabilityZonesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volume-availability-zones/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackVolumeAvailabilityZonesHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackVolumeAvailabilityZonesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackVolumeAvailabilityZonesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volume-availability-zones/',
        ...options
    });
};

export const openstackVolumeAvailabilityZonesRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumeAvailabilityZonesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackVolumeAvailabilityZonesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volume-availability-zones/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackVolumeTypesList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackVolumeTypesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackVolumeTypesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volume-types/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackVolumeTypesHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackVolumeTypesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackVolumeTypesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volume-types/',
        ...options
    });
};

export const openstackVolumeTypesRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumeTypesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackVolumeTypesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volume-types/{uuid}/',
        ...options
    });
};

/**
 * Return a list of unique volume type names.
 */
export const openstackVolumeTypesNamesRetrieve = <ThrowOnError extends boolean = false>(options?: Options<OpenstackVolumeTypesNamesRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackVolumeTypesNamesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volume-types/names/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackVolumeTypesNamesHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackVolumeTypesNamesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackVolumeTypesNamesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volume-types/names/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const openstackVolumesList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackVolumesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackVolumesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volumes/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const openstackVolumesHead = <ThrowOnError extends boolean = false>(options?: Options<OpenstackVolumesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OpenstackVolumesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volumes/',
        ...options
    });
};

export const openstackVolumesRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackVolumesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/',
        ...options
    });
};

export const openstackVolumesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackVolumesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackVolumesUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackVolumesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Attach volume to instance
 */
export const openstackVolumesAttach = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesAttachData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackVolumesAttachResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/attach/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Detach instance from volume
 */
export const openstackVolumesDetach = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesDetachData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackVolumesDetachResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/detach/',
        ...options
    });
};

/**
 * Increase volume size
 */
export const openstackVolumesExtend = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesExtendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackVolumesExtendResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/extend/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const openstackVolumesPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackVolumesPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/pull/',
        ...options
    });
};

/**
 * Retype detached volume
 */
export const openstackVolumesRetype = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesRetypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackVolumesRetypeResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/retype/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create snapshot from volume
 */
export const openstackVolumesSnapshot = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesSnapshotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackVolumesSnapshotResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/snapshot/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackVolumesUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackVolumesUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const organizationGroupsList = <ThrowOnError extends boolean = false>(options?: Options<OrganizationGroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OrganizationGroupsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organization-groups/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const organizationGroupsHead = <ThrowOnError extends boolean = false>(options?: Options<OrganizationGroupsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<OrganizationGroupsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organization-groups/',
        ...options
    });
};

export const organizationGroupsCreate = <ThrowOnError extends boolean = false>(options: Options<OrganizationGroupsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationGroupsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organization-groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const organizationGroupsDestroy = <ThrowOnError extends boolean = false>(options: Options<OrganizationGroupsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrganizationGroupsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organization-groups/{uuid}/',
        ...options
    });
};

export const organizationGroupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OrganizationGroupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationGroupsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organization-groups/{uuid}/',
        ...options
    });
};

export const organizationGroupsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OrganizationGroupsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OrganizationGroupsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organization-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const organizationGroupsUpdate = <ThrowOnError extends boolean = false>(options: Options<OrganizationGroupsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OrganizationGroupsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/organization-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const overrideSettingsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<OverrideSettingsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OverrideSettingsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/override-settings/',
        ...options
    });
};

export const overrideSettings = <ThrowOnError extends boolean = false>(options?: Options<OverrideSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<OverrideSettingsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/override-settings/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const paymentProfilesList = <ThrowOnError extends boolean = false>(options?: Options<PaymentProfilesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PaymentProfilesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payment-profiles/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const paymentProfilesHead = <ThrowOnError extends boolean = false>(options?: Options<PaymentProfilesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<PaymentProfilesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payment-profiles/',
        ...options
    });
};

export const paymentProfilesCreate = <ThrowOnError extends boolean = false>(options: Options<PaymentProfilesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PaymentProfilesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payment-profiles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const paymentProfilesDestroy = <ThrowOnError extends boolean = false>(options: Options<PaymentProfilesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PaymentProfilesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payment-profiles/{uuid}/',
        ...options
    });
};

export const paymentProfilesRetrieve = <ThrowOnError extends boolean = false>(options: Options<PaymentProfilesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PaymentProfilesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payment-profiles/{uuid}/',
        ...options
    });
};

export const paymentProfilesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<PaymentProfilesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PaymentProfilesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payment-profiles/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const paymentProfilesUpdate = <ThrowOnError extends boolean = false>(options: Options<PaymentProfilesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PaymentProfilesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payment-profiles/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const paymentProfilesEnable = <ThrowOnError extends boolean = false>(options: Options<PaymentProfilesEnableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PaymentProfilesEnableResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payment-profiles/{uuid}/enable/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const paymentsList = <ThrowOnError extends boolean = false>(options?: Options<PaymentsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PaymentsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payments/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const paymentsHead = <ThrowOnError extends boolean = false>(options?: Options<PaymentsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<PaymentsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payments/',
        ...options
    });
};

export const paymentsCreate = <ThrowOnError extends boolean = false>(options: Options<PaymentsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PaymentsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payments/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const paymentsDestroy = <ThrowOnError extends boolean = false>(options: Options<PaymentsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PaymentsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payments/{uuid}/',
        ...options
    });
};

export const paymentsRetrieve = <ThrowOnError extends boolean = false>(options: Options<PaymentsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PaymentsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payments/{uuid}/',
        ...options
    });
};

export const paymentsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<PaymentsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PaymentsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payments/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const paymentsUpdate = <ThrowOnError extends boolean = false>(options: Options<PaymentsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PaymentsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payments/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Link a payment to an invoice. Payment can be linked to an invoice only if they belong to the same customer.
 */
export const paymentsLinkToInvoice = <ThrowOnError extends boolean = false>(options: Options<PaymentsLinkToInvoiceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PaymentsLinkToInvoiceResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payments/{uuid}/link_to_invoice/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a payment from an invoice. Remove connection between payment and existing linked invoice.
 */
export const paymentsUnlinkFromInvoice = <ThrowOnError extends boolean = false>(options: Options<PaymentsUnlinkFromInvoiceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PaymentsUnlinkFromInvoiceResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/payments/{uuid}/unlink_from_invoice/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const projectCreditsList = <ThrowOnError extends boolean = false>(options?: Options<ProjectCreditsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProjectCreditsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project-credits/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const projectCreditsHead = <ThrowOnError extends boolean = false>(options?: Options<ProjectCreditsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<ProjectCreditsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project-credits/',
        ...options
    });
};

export const projectCreditsCreate = <ThrowOnError extends boolean = false>(options: Options<ProjectCreditsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectCreditsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project-credits/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const projectCreditsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProjectCreditsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProjectCreditsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project-credits/{uuid}/',
        ...options
    });
};

export const projectCreditsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectCreditsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectCreditsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project-credits/{uuid}/',
        ...options
    });
};

export const projectCreditsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjectCreditsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProjectCreditsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project-credits/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const projectCreditsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjectCreditsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProjectCreditsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project-credits/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List project quotas.
 */
export const projectQuotasList = <ThrowOnError extends boolean = false>(options?: Options<ProjectQuotasListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProjectQuotasListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project-quotas/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const projectQuotasHead = <ThrowOnError extends boolean = false>(options?: Options<ProjectQuotasHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<ProjectQuotasHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project-quotas/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const projectTypesList = <ThrowOnError extends boolean = false>(options?: Options<ProjectTypesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProjectTypesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project-types/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const projectTypesHead = <ThrowOnError extends boolean = false>(options?: Options<ProjectTypesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<ProjectTypesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project-types/',
        ...options
    });
};

export const projectTypesRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectTypesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectTypesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project-types/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const projectsList = <ThrowOnError extends boolean = false>(options?: Options<ProjectsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProjectsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/projects/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const projectsHead = <ThrowOnError extends boolean = false>(options?: Options<ProjectsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<ProjectsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/projects/',
        ...options
    });
};

/**
 * A new project can be created by users with staff privilege (is_staff=True) or customer owners.
 * Project resource quota is optional.
 */
export const projectsCreate = <ThrowOnError extends boolean = false>(options: Options<ProjectsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/projects/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * If a project has connected instances, deletion request will fail with 409 response code.
 */
export const projectsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProjectsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProjectsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/projects/{uuid}/',
        ...options
    });
};

export const projectsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/projects/{uuid}/',
        ...options
    });
};

export const projectsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjectsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProjectsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/projects/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const projectsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjectsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProjectsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/projects/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const projectsAddUser = <ThrowOnError extends boolean = false>(options: Options<ProjectsAddUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsAddUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/projects/{uuid}/add_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const projectsDeleteUser = <ThrowOnError extends boolean = false>(options: Options<ProjectsDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsDeleteUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/projects/{uuid}/delete_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const projectsListUsersList = <ThrowOnError extends boolean = false>(options: Options<ProjectsListUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsListUsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/projects/{uuid}/list_users/',
        ...options
    });
};

export const projectsMoveProject = <ThrowOnError extends boolean = false>(options: Options<ProjectsMoveProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsMoveProjectResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/projects/{uuid}/move_project/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * A list of users which can be added to the current project from other projects of the same customer.
 */
export const projectsOtherUsersList = <ThrowOnError extends boolean = false>(options: Options<ProjectsOtherUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsOtherUsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/projects/{uuid}/other_users/',
        ...options
    });
};

/**
 * Return statistics about project resources usage
 */
export const projectsStatsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectsStatsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsStatsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/projects/{uuid}/stats/',
        ...options
    });
};

/**
 * Trigger user role sync for this project
 */
export const projectsSyncUserRoles = <ThrowOnError extends boolean = false>(options: Options<ProjectsSyncUserRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsSyncUserRolesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/projects/{uuid}/sync_user_roles/',
        ...options
    });
};

export const projectsUpdateUser = <ThrowOnError extends boolean = false>(options: Options<ProjectsUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsUpdateUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/projects/{uuid}/update_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const promotionsCampaignsList = <ThrowOnError extends boolean = false>(options?: Options<PromotionsCampaignsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PromotionsCampaignsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/promotions-campaigns/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const promotionsCampaignsHead = <ThrowOnError extends boolean = false>(options?: Options<PromotionsCampaignsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<PromotionsCampaignsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/promotions-campaigns/',
        ...options
    });
};

export const promotionsCampaignsCreate = <ThrowOnError extends boolean = false>(options: Options<PromotionsCampaignsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PromotionsCampaignsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/promotions-campaigns/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const promotionsCampaignsDestroy = <ThrowOnError extends boolean = false>(options: Options<PromotionsCampaignsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PromotionsCampaignsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/promotions-campaigns/{uuid}/',
        ...options
    });
};

export const promotionsCampaignsRetrieve = <ThrowOnError extends boolean = false>(options: Options<PromotionsCampaignsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PromotionsCampaignsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/promotions-campaigns/{uuid}/',
        ...options
    });
};

export const promotionsCampaignsUpdate = <ThrowOnError extends boolean = false>(options: Options<PromotionsCampaignsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PromotionsCampaignsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/promotions-campaigns/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Activate campaign.
 */
export const promotionsCampaignsActivate = <ThrowOnError extends boolean = false>(options: Options<PromotionsCampaignsActivateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PromotionsCampaignsActivateResponses, PromotionsCampaignsActivateErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/promotions-campaigns/{uuid}/activate/',
        ...options
    });
};

/**
 * Return a list of orders for which the campaign is applied.
 */
export const promotionsCampaignsOrdersList = <ThrowOnError extends boolean = false>(options: Options<PromotionsCampaignsOrdersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PromotionsCampaignsOrdersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/promotions-campaigns/{uuid}/orders/',
        ...options
    });
};

/**
 * Return a list of resources for which the campaign is applied.
 */
export const promotionsCampaignsResourcesList = <ThrowOnError extends boolean = false>(options: Options<PromotionsCampaignsResourcesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PromotionsCampaignsResourcesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/promotions-campaigns/{uuid}/resources/',
        ...options
    });
};

/**
 * Terminate campaign.
 */
export const promotionsCampaignsTerminate = <ThrowOnError extends boolean = false>(options: Options<PromotionsCampaignsTerminateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PromotionsCampaignsTerminateResponses, PromotionsCampaignsTerminateErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/promotions-campaigns/{uuid}/terminate/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const proposalProposalsList = <ThrowOnError extends boolean = false>(options?: Options<ProposalProposalsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProposalProposalsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const proposalProposalsHead = <ThrowOnError extends boolean = false>(options?: Options<ProposalProposalsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<ProposalProposalsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/',
        ...options
    });
};

export const proposalProposalsCreate = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProposalsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalProposalsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProposalProposalsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/',
        ...options
    });
};

export const proposalProposalsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProposalsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/',
        ...options
    });
};

export const proposalProposalsAddUser = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsAddUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProposalsAddUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/add_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Approve a proposal.
 */
export const proposalProposalsApprove = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsApproveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProposalsApproveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/approve/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Attach document to proposal.
 */
export const proposalProposalsAttachDocument = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsAttachDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProposalsAttachDocumentResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/attach_document/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get checklist with questions and existing answers.
 */
export const proposalProposalsChecklistRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsChecklistRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProposalsChecklistRetrieveResponses, ProposalProposalsChecklistRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/checklist/',
        ...options
    });
};

/**
 * Get checklist with questions and existing answers including review logic (reviewers only).
 */
export const proposalProposalsChecklistReviewRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsChecklistReviewRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProposalsChecklistReviewRetrieveResponses, ProposalProposalsChecklistReviewRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/checklist_review/',
        ...options
    });
};

/**
 * Get checklist completion status with review triggers (reviewers only).
 */
export const proposalProposalsCompletionReviewStatusRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsCompletionReviewStatusRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProposalsCompletionReviewStatusRetrieveResponses, ProposalProposalsCompletionReviewStatusRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/completion_review_status/',
        ...options
    });
};

/**
 * Get checklist completion status.
 */
export const proposalProposalsCompletionStatusRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsCompletionStatusRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProposalsCompletionStatusRetrieveResponses, ProposalProposalsCompletionStatusRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/completion_status/',
        ...options
    });
};

export const proposalProposalsDeleteUser = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProposalsDeleteUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/delete_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalProposalsListUsersList = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsListUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProposalsListUsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/list_users/',
        ...options
    });
};

/**
 * Reject a proposal.
 */
export const proposalProposalsReject = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsRejectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProposalsRejectResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/reject/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List resources for a proposal.
 */
export const proposalProposalsResourcesList = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsResourcesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProposalsResourcesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/resources/',
        ...options
    });
};

/**
 * Create resource for a proposal.
 */
export const proposalProposalsResourcesSet = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsResourcesSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProposalsResourcesSetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/resources/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalProposalsResourcesDestroy = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsResourcesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProposalProposalsResourcesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/resources/{obj_uuid}/',
        ...options
    });
};

export const proposalProposalsResourcesRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsResourcesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProposalsResourcesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/resources/{obj_uuid}/',
        ...options
    });
};

export const proposalProposalsResourcesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsResourcesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProposalProposalsResourcesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/resources/{obj_uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalProposalsResourcesUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsResourcesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProposalProposalsResourcesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/resources/{obj_uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Submit a proposal.
 */
export const proposalProposalsSubmit = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsSubmitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProposalsSubmitResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/submit/',
        ...options
    });
};

/**
 * Submit checklist answers.
 */
export const proposalProposalsSubmitAnswers = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsSubmitAnswersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProposalsSubmitAnswersResponses, ProposalProposalsSubmitAnswersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/submit_answers/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update project details of a proposal.
 */
export const proposalProposalsUpdateProjectDetails = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsUpdateProjectDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProposalsUpdateProjectDetailsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/update_project_details/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalProposalsUpdateUser = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProposalsUpdateUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/update_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const proposalProtectedCallsList = <ThrowOnError extends boolean = false>(options?: Options<ProposalProtectedCallsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProposalProtectedCallsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const proposalProtectedCallsHead = <ThrowOnError extends boolean = false>(options?: Options<ProposalProtectedCallsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<ProposalProtectedCallsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/',
        ...options
    });
};

export const proposalProtectedCallsCreate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalProtectedCallsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProposalProtectedCallsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/',
        ...options
    });
};

export const proposalProtectedCallsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProtectedCallsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/',
        ...options
    });
};

export const proposalProtectedCallsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProposalProtectedCallsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalProtectedCallsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProposalProtectedCallsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Activate a call.
 */
export const proposalProtectedCallsActivate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsActivateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsActivateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/activate/',
        ...options
    });
};

export const proposalProtectedCallsAddUser = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsAddUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsAddUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/add_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Archive a call.
 */
export const proposalProtectedCallsArchive = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsArchiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsArchiveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/archive/',
        ...options
    });
};

/**
 * Attach documents to call.
 */
export const proposalProtectedCallsAttachDocuments = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsAttachDocumentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsAttachDocumentsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/attach_documents/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get compliance overview for call manager showing all proposals and their compliance status.
 */
export const proposalProtectedCallsComplianceOverviewRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsComplianceOverviewRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProtectedCallsComplianceOverviewRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/compliance_overview/',
        ...options
    });
};

export const proposalProtectedCallsDeleteUser = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsDeleteUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/delete_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Detach documents from call.
 */
export const proposalProtectedCallsDetachDocuments = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsDetachDocumentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsDetachDocumentsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/detach_documents/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalProtectedCallsListUsersList = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsListUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProtectedCallsListUsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/list_users/',
        ...options
    });
};

/**
 * List offerings for a call.
 */
export const proposalProtectedCallsOfferingsList = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsOfferingsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProtectedCallsOfferingsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/offerings/',
        ...options
    });
};

/**
 * Create offering for a call.
 */
export const proposalProtectedCallsOfferingsSet = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsOfferingsSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsOfferingsSetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/offerings/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalProtectedCallsOfferingsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsOfferingsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProposalProtectedCallsOfferingsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/offerings/{obj_uuid}/',
        ...options
    });
};

export const proposalProtectedCallsOfferingsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsOfferingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProtectedCallsOfferingsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/offerings/{obj_uuid}/',
        ...options
    });
};

export const proposalProtectedCallsOfferingsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsOfferingsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProposalProtectedCallsOfferingsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/offerings/{obj_uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalProtectedCallsOfferingsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsOfferingsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProposalProtectedCallsOfferingsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/offerings/{obj_uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get detailed compliance answers for a specific proposal (call managers only).
 */
export const proposalProtectedCallsProposalsComplianceAnswersList = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsProposalsComplianceAnswersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProtectedCallsProposalsComplianceAnswersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/proposals/{proposal_uuid}/compliance-answers/',
        ...options
    });
};

/**
 * List resource templates for a call.
 */
export const proposalProtectedCallsResourceTemplatesList = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsResourceTemplatesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProtectedCallsResourceTemplatesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/resource_templates/',
        ...options
    });
};

/**
 * Create resource template for a call.
 */
export const proposalProtectedCallsResourceTemplatesSet = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsResourceTemplatesSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsResourceTemplatesSetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/resource_templates/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalProtectedCallsResourceTemplatesDestroy = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsResourceTemplatesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProposalProtectedCallsResourceTemplatesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/resource_templates/{obj_uuid}/',
        ...options
    });
};

export const proposalProtectedCallsResourceTemplatesRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsResourceTemplatesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProtectedCallsResourceTemplatesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/resource_templates/{obj_uuid}/',
        ...options
    });
};

export const proposalProtectedCallsResourceTemplatesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsResourceTemplatesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProposalProtectedCallsResourceTemplatesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/resource_templates/{obj_uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalProtectedCallsResourceTemplatesUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsResourceTemplatesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProposalProtectedCallsResourceTemplatesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/resource_templates/{obj_uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mark proposal compliance as reviewed by call manager.
 */
export const proposalProtectedCallsReviewProposalCompliance = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsReviewProposalComplianceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsReviewProposalComplianceResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/review_proposal_compliance/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List rounds for a call.
 */
export const proposalProtectedCallsRoundsList = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsRoundsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProtectedCallsRoundsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/rounds/',
        ...options
    });
};

/**
 * Create a round for a call.
 */
export const proposalProtectedCallsRoundsSet = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsRoundsSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsRoundsSetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/rounds/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalProtectedCallsRoundsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsRoundsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProposalProtectedCallsRoundsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/rounds/{obj_uuid}/',
        ...options
    });
};

export const proposalProtectedCallsRoundsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsRoundsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProtectedCallsRoundsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/rounds/{obj_uuid}/',
        ...options
    });
};

export const proposalProtectedCallsRoundsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsRoundsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProposalProtectedCallsRoundsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/rounds/{obj_uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalProtectedCallsRoundsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsRoundsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProposalProtectedCallsRoundsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/rounds/{obj_uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalProtectedCallsRoundsClose = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsRoundsCloseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsRoundsCloseResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/rounds/{obj_uuid}/close/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalProtectedCallsUpdateUser = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsUpdateUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/update_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const proposalPublicCallsList = <ThrowOnError extends boolean = false>(options?: Options<ProposalPublicCallsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProposalPublicCallsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-public-calls/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const proposalPublicCallsHead = <ThrowOnError extends boolean = false>(options?: Options<ProposalPublicCallsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<ProposalPublicCallsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-public-calls/',
        ...options
    });
};

export const proposalPublicCallsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalPublicCallsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalPublicCallsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-public-calls/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const proposalRequestedOfferingsList = <ThrowOnError extends boolean = false>(options?: Options<ProposalRequestedOfferingsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProposalRequestedOfferingsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-requested-offerings/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const proposalRequestedOfferingsHead = <ThrowOnError extends boolean = false>(options?: Options<ProposalRequestedOfferingsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<ProposalRequestedOfferingsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-requested-offerings/',
        ...options
    });
};

export const proposalRequestedOfferingsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalRequestedOfferingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalRequestedOfferingsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-requested-offerings/{uuid}/',
        ...options
    });
};

/**
 * Accept a requested offering.
 */
export const proposalRequestedOfferingsAccept = <ThrowOnError extends boolean = false>(options: Options<ProposalRequestedOfferingsAcceptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalRequestedOfferingsAcceptResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-requested-offerings/{uuid}/accept/',
        ...options
    });
};

/**
 * Cancel a requested offering.
 */
export const proposalRequestedOfferingsCancel = <ThrowOnError extends boolean = false>(options: Options<ProposalRequestedOfferingsCancelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalRequestedOfferingsCancelResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-requested-offerings/{uuid}/cancel/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const proposalRequestedResourcesList = <ThrowOnError extends boolean = false>(options?: Options<ProposalRequestedResourcesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProposalRequestedResourcesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-requested-resources/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const proposalRequestedResourcesHead = <ThrowOnError extends boolean = false>(options?: Options<ProposalRequestedResourcesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<ProposalRequestedResourcesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-requested-resources/',
        ...options
    });
};

export const proposalRequestedResourcesRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalRequestedResourcesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalRequestedResourcesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-requested-resources/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const proposalReviewsList = <ThrowOnError extends boolean = false>(options?: Options<ProposalReviewsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProposalReviewsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-reviews/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const proposalReviewsHead = <ThrowOnError extends boolean = false>(options?: Options<ProposalReviewsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<ProposalReviewsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-reviews/',
        ...options
    });
};

export const proposalReviewsCreate = <ThrowOnError extends boolean = false>(options: Options<ProposalReviewsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalReviewsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-reviews/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalReviewsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProposalReviewsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProposalReviewsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-reviews/{uuid}/',
        ...options
    });
};

export const proposalReviewsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalReviewsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalReviewsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-reviews/{uuid}/',
        ...options
    });
};

export const proposalReviewsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalReviewsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProposalReviewsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-reviews/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const proposalReviewsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalReviewsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProposalReviewsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-reviews/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Accept a review, changing its state to IN_REVIEW.
 */
export const proposalReviewsAccept = <ThrowOnError extends boolean = false>(options: Options<ProposalReviewsAcceptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalReviewsAcceptResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-reviews/{uuid}/accept/',
        ...options
    });
};

/**
 * Reject a review, changing its state to REJECTED.
 */
export const proposalReviewsReject = <ThrowOnError extends boolean = false>(options: Options<ProposalReviewsRejectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalReviewsRejectResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-reviews/{uuid}/reject/',
        ...options
    });
};

/**
 * Submit a review, changing its state to SUBMITTED.
 */
export const proposalReviewsSubmit = <ThrowOnError extends boolean = false>(options: Options<ProposalReviewsSubmitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalReviewsSubmitResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/proposal-reviews/{uuid}/submit/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const providerInvoiceItemsList = <ThrowOnError extends boolean = false>(options?: Options<ProviderInvoiceItemsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProviderInvoiceItemsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/provider-invoice-items/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const providerInvoiceItemsHead = <ThrowOnError extends boolean = false>(options?: Options<ProviderInvoiceItemsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<ProviderInvoiceItemsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/provider-invoice-items/',
        ...options
    });
};

export const providerInvoiceItemsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProviderInvoiceItemsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProviderInvoiceItemsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/provider-invoice-items/{id}/',
        ...options
    });
};

/**
 * Execute SQL query against readonly database
 */
export const query = <ThrowOnError extends boolean = false>(options: Options<QueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QueryResponses, QueryErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/query/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rabbitmqUserStatsList = <ThrowOnError extends boolean = false>(options?: Options<RabbitmqUserStatsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RabbitmqUserStatsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rabbitmq-user-stats/',
        ...options
    });
};

export const rabbitmqVhostStatsList = <ThrowOnError extends boolean = false>(options?: Options<RabbitmqVhostStatsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RabbitmqVhostStatsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rabbitmq-vhost-stats/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const rancherAppsList = <ThrowOnError extends boolean = false>(options?: Options<RancherAppsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherAppsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-apps/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const rancherAppsHead = <ThrowOnError extends boolean = false>(options?: Options<RancherAppsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<RancherAppsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-apps/',
        ...options
    });
};

export const rancherAppsCreate = <ThrowOnError extends boolean = false>(options: Options<RancherAppsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherAppsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-apps/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherAppsDestroy = <ThrowOnError extends boolean = false>(options: Options<RancherAppsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RancherAppsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-apps/{uuid}/',
        ...options
    });
};

export const rancherAppsRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherAppsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherAppsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-apps/{uuid}/',
        ...options
    });
};

export const rancherAppsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherAppsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RancherAppsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-apps/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherAppsUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherAppsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherAppsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-apps/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherAppsPull = <ThrowOnError extends boolean = false>(options: Options<RancherAppsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherAppsPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-apps/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const rancherAppsUnlink = <ThrowOnError extends boolean = false>(options: Options<RancherAppsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherAppsUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-apps/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const rancherCatalogsList = <ThrowOnError extends boolean = false>(options?: Options<RancherCatalogsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherCatalogsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-catalogs/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const rancherCatalogsHead = <ThrowOnError extends boolean = false>(options?: Options<RancherCatalogsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<RancherCatalogsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-catalogs/',
        ...options
    });
};

export const rancherCatalogsCreate = <ThrowOnError extends boolean = false>(options: Options<RancherCatalogsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherCatalogsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-catalogs/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherCatalogsDestroy = <ThrowOnError extends boolean = false>(options: Options<RancherCatalogsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RancherCatalogsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-catalogs/{uuid}/',
        ...options
    });
};

export const rancherCatalogsRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherCatalogsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherCatalogsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-catalogs/{uuid}/',
        ...options
    });
};

export const rancherCatalogsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherCatalogsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RancherCatalogsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-catalogs/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherCatalogsUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherCatalogsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherCatalogsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-catalogs/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherCatalogsRefresh = <ThrowOnError extends boolean = false>(options: Options<RancherCatalogsRefreshData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherCatalogsRefreshResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-catalogs/{uuid}/refresh/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const rancherClusterSecurityGroupsList = <ThrowOnError extends boolean = false>(options?: Options<RancherClusterSecurityGroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherClusterSecurityGroupsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-cluster-security-groups/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const rancherClusterSecurityGroupsHead = <ThrowOnError extends boolean = false>(options?: Options<RancherClusterSecurityGroupsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<RancherClusterSecurityGroupsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-cluster-security-groups/',
        ...options
    });
};

export const rancherClusterSecurityGroupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherClusterSecurityGroupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherClusterSecurityGroupsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-cluster-security-groups/{uuid}/',
        ...options
    });
};

export const rancherClusterSecurityGroupsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherClusterSecurityGroupsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RancherClusterSecurityGroupsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-cluster-security-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherClusterSecurityGroupsUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherClusterSecurityGroupsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherClusterSecurityGroupsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-cluster-security-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const rancherClusterTemplatesList = <ThrowOnError extends boolean = false>(options?: Options<RancherClusterTemplatesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherClusterTemplatesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-cluster-templates/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const rancherClusterTemplatesHead = <ThrowOnError extends boolean = false>(options?: Options<RancherClusterTemplatesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<RancherClusterTemplatesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-cluster-templates/',
        ...options
    });
};

export const rancherClusterTemplatesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherClusterTemplatesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherClusterTemplatesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-cluster-templates/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const rancherClustersList = <ThrowOnError extends boolean = false>(options?: Options<RancherClustersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherClustersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-clusters/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const rancherClustersHead = <ThrowOnError extends boolean = false>(options?: Options<RancherClustersHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<RancherClustersHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-clusters/',
        ...options
    });
};

export const rancherClustersCreate = <ThrowOnError extends boolean = false>(options: Options<RancherClustersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherClustersCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-clusters/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherClustersDestroy = <ThrowOnError extends boolean = false>(options: Options<RancherClustersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RancherClustersDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/',
        ...options
    });
};

export const rancherClustersRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherClustersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherClustersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/',
        ...options
    });
};

export const rancherClustersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherClustersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RancherClustersPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherClustersUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherClustersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherClustersUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherClustersCreateManagementSecurityGroup = <ThrowOnError extends boolean = false>(options: Options<RancherClustersCreateManagementSecurityGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherClustersCreateManagementSecurityGroupResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/create_management_security_group/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherClustersImportYaml = <ThrowOnError extends boolean = false>(options: Options<RancherClustersImportYamlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherClustersImportYamlResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/import_yaml/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherClustersPull = <ThrowOnError extends boolean = false>(options: Options<RancherClustersPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherClustersPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const rancherClustersUnlink = <ThrowOnError extends boolean = false>(options: Options<RancherClustersUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherClustersUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const rancherHpasList = <ThrowOnError extends boolean = false>(options?: Options<RancherHpasListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherHpasListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-hpas/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const rancherHpasHead = <ThrowOnError extends boolean = false>(options?: Options<RancherHpasHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<RancherHpasHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-hpas/',
        ...options
    });
};

export const rancherHpasCreate = <ThrowOnError extends boolean = false>(options: Options<RancherHpasCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherHpasCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-hpas/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherHpasDestroy = <ThrowOnError extends boolean = false>(options: Options<RancherHpasDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RancherHpasDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-hpas/{uuid}/',
        ...options
    });
};

export const rancherHpasRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherHpasRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherHpasRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-hpas/{uuid}/',
        ...options
    });
};

export const rancherHpasPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherHpasPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RancherHpasPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-hpas/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherHpasUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherHpasUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherHpasUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-hpas/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherHpasPull = <ThrowOnError extends boolean = false>(options: Options<RancherHpasPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherHpasPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-hpas/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const rancherHpasUnlink = <ThrowOnError extends boolean = false>(options: Options<RancherHpasUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherHpasUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-hpas/{uuid}/unlink/',
        ...options
    });
};

export const rancherHpasYamlRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherHpasYamlRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherHpasYamlRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-hpas/{uuid}/yaml/',
        ...options
    });
};

export const rancherHpasYamlUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherHpasYamlUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherHpasYamlUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-hpas/{uuid}/yaml/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const rancherIngressesList = <ThrowOnError extends boolean = false>(options?: Options<RancherIngressesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherIngressesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-ingresses/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const rancherIngressesHead = <ThrowOnError extends boolean = false>(options?: Options<RancherIngressesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<RancherIngressesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-ingresses/',
        ...options
    });
};

export const rancherIngressesCreate = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherIngressesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-ingresses/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherIngressesDestroy = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RancherIngressesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-ingresses/{uuid}/',
        ...options
    });
};

export const rancherIngressesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherIngressesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-ingresses/{uuid}/',
        ...options
    });
};

export const rancherIngressesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RancherIngressesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-ingresses/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherIngressesUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherIngressesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-ingresses/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherIngressesPull = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherIngressesPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-ingresses/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const rancherIngressesUnlink = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherIngressesUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-ingresses/{uuid}/unlink/',
        ...options
    });
};

export const rancherIngressesYamlRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesYamlRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherIngressesYamlRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-ingresses/{uuid}/yaml/',
        ...options
    });
};

export const rancherIngressesYamlUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesYamlUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherIngressesYamlUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-ingresses/{uuid}/yaml/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const rancherNamespacesList = <ThrowOnError extends boolean = false>(options?: Options<RancherNamespacesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherNamespacesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-namespaces/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const rancherNamespacesHead = <ThrowOnError extends boolean = false>(options?: Options<RancherNamespacesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<RancherNamespacesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-namespaces/',
        ...options
    });
};

export const rancherNamespacesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherNamespacesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherNamespacesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-namespaces/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const rancherNodesList = <ThrowOnError extends boolean = false>(options?: Options<RancherNodesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherNodesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-nodes/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const rancherNodesHead = <ThrowOnError extends boolean = false>(options?: Options<RancherNodesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<RancherNodesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-nodes/',
        ...options
    });
};

export const rancherNodesCreate = <ThrowOnError extends boolean = false>(options: Options<RancherNodesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherNodesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-nodes/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherNodesDestroy = <ThrowOnError extends boolean = false>(options: Options<RancherNodesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RancherNodesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-nodes/{uuid}/',
        ...options
    });
};

export const rancherNodesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherNodesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherNodesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-nodes/{uuid}/',
        ...options
    });
};

/**
 * Returns console URL for the node.
 */
export const rancherNodesConsoleRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherNodesConsoleRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherNodesConsoleRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-nodes/{uuid}/console/',
        ...options
    });
};

/**
 * Returns console log for the node.
 */
export const rancherNodesConsoleLogRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherNodesConsoleLogRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherNodesConsoleLogRetrieveResponses, RancherNodesConsoleLogRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-nodes/{uuid}/console_log/',
        ...options
    });
};

/**
 * Links node to OpenStack instance.
 */
export const rancherNodesLinkOpenstack = <ThrowOnError extends boolean = false>(options: Options<RancherNodesLinkOpenstackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherNodesLinkOpenstackResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-nodes/{uuid}/link_openstack/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherNodesPull = <ThrowOnError extends boolean = false>(options: Options<RancherNodesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherNodesPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-nodes/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const rancherNodesUnlink = <ThrowOnError extends boolean = false>(options: Options<RancherNodesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherNodesUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-nodes/{uuid}/unlink/',
        ...options
    });
};

/**
 * Unlinks node from OpenStack instance.
 */
export const rancherNodesUnlinkOpenstack = <ThrowOnError extends boolean = false>(options: Options<RancherNodesUnlinkOpenstackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherNodesUnlinkOpenstackResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-nodes/{uuid}/unlink_openstack/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const rancherProjectsList = <ThrowOnError extends boolean = false>(options?: Options<RancherProjectsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherProjectsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-projects/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const rancherProjectsHead = <ThrowOnError extends boolean = false>(options?: Options<RancherProjectsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<RancherProjectsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-projects/',
        ...options
    });
};

export const rancherProjectsRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherProjectsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherProjectsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-projects/{uuid}/',
        ...options
    });
};

/**
 * Returns project's secrets.
 */
export const rancherProjectsSecretsRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherProjectsSecretsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherProjectsSecretsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-projects/{uuid}/secrets/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const rancherRoleTemplatesList = <ThrowOnError extends boolean = false>(options?: Options<RancherRoleTemplatesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherRoleTemplatesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-role-templates/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const rancherRoleTemplatesHead = <ThrowOnError extends boolean = false>(options?: Options<RancherRoleTemplatesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<RancherRoleTemplatesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-role-templates/',
        ...options
    });
};

export const rancherRoleTemplatesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherRoleTemplatesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherRoleTemplatesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-role-templates/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const rancherServicesList = <ThrowOnError extends boolean = false>(options?: Options<RancherServicesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherServicesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-services/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const rancherServicesHead = <ThrowOnError extends boolean = false>(options?: Options<RancherServicesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<RancherServicesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-services/',
        ...options
    });
};

export const rancherServicesCreate = <ThrowOnError extends boolean = false>(options: Options<RancherServicesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherServicesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-services/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherServicesDestroy = <ThrowOnError extends boolean = false>(options: Options<RancherServicesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RancherServicesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-services/{uuid}/',
        ...options
    });
};

export const rancherServicesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherServicesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherServicesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-services/{uuid}/',
        ...options
    });
};

export const rancherServicesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherServicesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RancherServicesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-services/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherServicesUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherServicesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherServicesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-services/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherServicesPull = <ThrowOnError extends boolean = false>(options: Options<RancherServicesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherServicesPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-services/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const rancherServicesUnlink = <ThrowOnError extends boolean = false>(options: Options<RancherServicesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherServicesUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-services/{uuid}/unlink/',
        ...options
    });
};

export const rancherServicesYamlRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherServicesYamlRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherServicesYamlRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-services/{uuid}/yaml/',
        ...options
    });
};

export const rancherServicesYamlUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherServicesYamlUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherServicesYamlUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-services/{uuid}/yaml/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherTemplateVersionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherTemplateVersionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherTemplateVersionsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-template-versions/{template_uuid}/{version}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const rancherTemplatesList = <ThrowOnError extends boolean = false>(options?: Options<RancherTemplatesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherTemplatesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-templates/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const rancherTemplatesHead = <ThrowOnError extends boolean = false>(options?: Options<RancherTemplatesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<RancherTemplatesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-templates/',
        ...options
    });
};

export const rancherTemplatesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherTemplatesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherTemplatesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-templates/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const rancherUsersList = <ThrowOnError extends boolean = false>(options?: Options<RancherUsersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherUsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-users/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const rancherUsersHead = <ThrowOnError extends boolean = false>(options?: Options<RancherUsersHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<RancherUsersHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-users/',
        ...options
    });
};

export const rancherUsersRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherUsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherUsersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-users/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const rancherWorkloadsList = <ThrowOnError extends boolean = false>(options?: Options<RancherWorkloadsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherWorkloadsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-workloads/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const rancherWorkloadsHead = <ThrowOnError extends boolean = false>(options?: Options<RancherWorkloadsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<RancherWorkloadsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-workloads/',
        ...options
    });
};

export const rancherWorkloadsCreate = <ThrowOnError extends boolean = false>(options: Options<RancherWorkloadsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherWorkloadsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-workloads/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherWorkloadsDestroy = <ThrowOnError extends boolean = false>(options: Options<RancherWorkloadsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RancherWorkloadsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-workloads/{uuid}/',
        ...options
    });
};

export const rancherWorkloadsRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherWorkloadsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherWorkloadsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-workloads/{uuid}/',
        ...options
    });
};

export const rancherWorkloadsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherWorkloadsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RancherWorkloadsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-workloads/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherWorkloadsUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherWorkloadsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherWorkloadsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-workloads/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rancherWorkloadsRedeploy = <ThrowOnError extends boolean = false>(options: Options<RancherWorkloadsRedeployData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherWorkloadsRedeployResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-workloads/{uuid}/redeploy/',
        ...options
    });
};

export const rancherWorkloadsYamlRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherWorkloadsYamlRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherWorkloadsYamlRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-workloads/{uuid}/yaml/',
        ...options
    });
};

export const rancherWorkloadsYamlUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherWorkloadsYamlUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherWorkloadsYamlUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/rancher-workloads/{uuid}/yaml/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Allows to pull user details from remote eduTEAMS instance.
 */
export const remoteEduteams = <ThrowOnError extends boolean = false>(options: Options<RemoteEduteamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteEduteamsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-eduteams/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Cancel termination order
 */
export const remoteWaldurApiCancelTermination = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiCancelTerminationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiCancelTerminationResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-waldur-api/cancel_termination/{uuid}',
        ...options
    });
};

/**
 * Create local offering from remote
 */
export const remoteWaldurApiImportOffering = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiImportOfferingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiImportOfferingResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-waldur-api/import_offering/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const remoteWaldurApiPullOfferingDetails = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPullOfferingDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiPullOfferingDetailsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-waldur-api/pull_offering_details/{uuid}/',
        ...options
    });
};

export const remoteWaldurApiPullOfferingInvoices = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPullOfferingInvoicesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiPullOfferingInvoicesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-waldur-api/pull_offering_invoices/{uuid}/',
        ...options
    });
};

export const remoteWaldurApiPullOfferingOrders = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPullOfferingOrdersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiPullOfferingOrdersResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-waldur-api/pull_offering_orders/{uuid}/',
        ...options
    });
};

export const remoteWaldurApiPullOfferingResources = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPullOfferingResourcesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiPullOfferingResourcesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-waldur-api/pull_offering_resources/{uuid}/',
        ...options
    });
};

export const remoteWaldurApiPullOfferingRobotAccounts = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPullOfferingRobotAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiPullOfferingRobotAccountsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-waldur-api/pull_offering_robot_accounts/{uuid}/',
        ...options
    });
};

export const remoteWaldurApiPullOfferingUsage = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPullOfferingUsageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiPullOfferingUsageResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-waldur-api/pull_offering_usage/{uuid}/',
        ...options
    });
};

export const remoteWaldurApiPullOfferingUsers = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPullOfferingUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiPullOfferingUsersResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-waldur-api/pull_offering_users/{uuid}/',
        ...options
    });
};

/**
 * Schedule order pull task
 */
export const remoteWaldurApiPullOrder = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPullOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiPullOrderResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-waldur-api/pull_order/{uuid}',
        ...options
    });
};

export const remoteWaldurApiPushProjectData = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPushProjectDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiPushProjectDataResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-waldur-api/push_project_data/{uuid}/',
        ...options
    });
};

/**
 * List remote marketplace categories
 */
export const remoteWaldurApiRemoteCategories = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiRemoteCategoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiRemoteCategoriesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-waldur-api/remote_categories/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List remote customers owned by current user
 */
export const remoteWaldurApiRemoteCustomers = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiRemoteCustomersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiRemoteCustomersResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-waldur-api/remote_customers/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List remote importable offerings for particular customer
 */
export const remoteWaldurApiSharedOfferings = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiSharedOfferingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiSharedOfferingsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-waldur-api/shared_offerings/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const remoteWaldurApiSyncResource = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiSyncResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiSyncResourceResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-waldur-api/sync_resource/{uuid}/',
        ...options
    });
};

export const remoteWaldurApiSyncResourceProjectPermissions = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiSyncResourceProjectPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiSyncResourceProjectPermissionsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/remote-waldur-api/sync_resource_project_permissions/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const rolesList = <ThrowOnError extends boolean = false>(options?: Options<RolesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RolesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/roles/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const rolesHead = <ThrowOnError extends boolean = false>(options?: Options<RolesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<RolesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/roles/',
        ...options
    });
};

export const rolesCreate = <ThrowOnError extends boolean = false>(options: Options<RolesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RolesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/roles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rolesDestroy = <ThrowOnError extends boolean = false>(options: Options<RolesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RolesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/roles/{uuid}/',
        ...options
    });
};

export const rolesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RolesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RolesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/roles/{uuid}/',
        ...options
    });
};

export const rolesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RolesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RolesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/roles/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rolesUpdate = <ThrowOnError extends boolean = false>(options: Options<RolesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RolesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/roles/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const rolesDisable = <ThrowOnError extends boolean = false>(options: Options<RolesDisableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RolesDisableResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/roles/{uuid}/disable/',
        ...options
    });
};

export const rolesEnable = <ThrowOnError extends boolean = false>(options: Options<RolesEnableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RolesEnableResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/roles/{uuid}/enable/',
        ...options
    });
};

export const rolesUpdateDescriptionsUpdate = <ThrowOnError extends boolean = false>(options: Options<RolesUpdateDescriptionsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RolesUpdateDescriptionsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/roles/{uuid}/update_descriptions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const serviceSettingsList = <ThrowOnError extends boolean = false>(options?: Options<ServiceSettingsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ServiceSettingsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/service-settings/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const serviceSettingsHead = <ThrowOnError extends boolean = false>(options?: Options<ServiceSettingsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<ServiceSettingsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/service-settings/',
        ...options
    });
};

export const serviceSettingsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ServiceSettingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ServiceSettingsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/service-settings/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const slurmAllocationUserUsageList = <ThrowOnError extends boolean = false>(options?: Options<SlurmAllocationUserUsageListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SlurmAllocationUserUsageListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-allocation-user-usage/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const slurmAllocationUserUsageHead = <ThrowOnError extends boolean = false>(options?: Options<SlurmAllocationUserUsageHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<SlurmAllocationUserUsageHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-allocation-user-usage/',
        ...options
    });
};

export const slurmAllocationUserUsageRetrieve = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationUserUsageRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SlurmAllocationUserUsageRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-allocation-user-usage/{id}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const slurmAllocationsList = <ThrowOnError extends boolean = false>(options?: Options<SlurmAllocationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SlurmAllocationsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-allocations/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const slurmAllocationsHead = <ThrowOnError extends boolean = false>(options?: Options<SlurmAllocationsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<SlurmAllocationsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-allocations/',
        ...options
    });
};

export const slurmAllocationsCreate = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SlurmAllocationsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-allocations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const slurmAllocationsDestroy = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SlurmAllocationsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-allocations/{uuid}/',
        ...options
    });
};

export const slurmAllocationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SlurmAllocationsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-allocations/{uuid}/',
        ...options
    });
};

export const slurmAllocationsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SlurmAllocationsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-allocations/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const slurmAllocationsUpdate = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SlurmAllocationsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-allocations/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const slurmAllocationsPull = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SlurmAllocationsPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-allocations/{uuid}/pull/',
        ...options
    });
};

export const slurmAllocationsSetLimits = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationsSetLimitsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SlurmAllocationsSetLimitsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-allocations/{uuid}/set_limits/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const slurmAllocationsUnlink = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SlurmAllocationsUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-allocations/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const slurmAssociationsList = <ThrowOnError extends boolean = false>(options?: Options<SlurmAssociationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SlurmAssociationsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-associations/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const slurmAssociationsHead = <ThrowOnError extends boolean = false>(options?: Options<SlurmAssociationsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<SlurmAssociationsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-associations/',
        ...options
    });
};

export const slurmAssociationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<SlurmAssociationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SlurmAssociationsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-associations/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const slurmJobsList = <ThrowOnError extends boolean = false>(options?: Options<SlurmJobsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SlurmJobsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-jobs/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const slurmJobsHead = <ThrowOnError extends boolean = false>(options?: Options<SlurmJobsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<SlurmJobsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-jobs/',
        ...options
    });
};

export const slurmJobsCreate = <ThrowOnError extends boolean = false>(options: Options<SlurmJobsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SlurmJobsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-jobs/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const slurmJobsDestroy = <ThrowOnError extends boolean = false>(options: Options<SlurmJobsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SlurmJobsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-jobs/{uuid}/',
        ...options
    });
};

export const slurmJobsRetrieve = <ThrowOnError extends boolean = false>(options: Options<SlurmJobsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SlurmJobsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-jobs/{uuid}/',
        ...options
    });
};

export const slurmJobsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SlurmJobsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SlurmJobsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-jobs/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const slurmJobsUpdate = <ThrowOnError extends boolean = false>(options: Options<SlurmJobsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SlurmJobsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-jobs/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const slurmJobsPull = <ThrowOnError extends boolean = false>(options: Options<SlurmJobsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SlurmJobsPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-jobs/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const slurmJobsUnlink = <ThrowOnError extends boolean = false>(options: Options<SlurmJobsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SlurmJobsUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/slurm-jobs/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const supportAttachmentsList = <ThrowOnError extends boolean = false>(options?: Options<SupportAttachmentsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportAttachmentsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-attachments/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const supportAttachmentsHead = <ThrowOnError extends boolean = false>(options?: Options<SupportAttachmentsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<SupportAttachmentsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-attachments/',
        ...options
    });
};

export const supportAttachmentsCreate = <ThrowOnError extends boolean = false>(options: Options<SupportAttachmentsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportAttachmentsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-attachments/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const supportAttachmentsDestroy = <ThrowOnError extends boolean = false>(options: Options<SupportAttachmentsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SupportAttachmentsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-attachments/{uuid}/',
        ...options
    });
};

export const supportAttachmentsRetrieve = <ThrowOnError extends boolean = false>(options: Options<SupportAttachmentsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SupportAttachmentsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-attachments/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const supportCommentsList = <ThrowOnError extends boolean = false>(options?: Options<SupportCommentsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportCommentsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-comments/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const supportCommentsHead = <ThrowOnError extends boolean = false>(options?: Options<SupportCommentsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<SupportCommentsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-comments/',
        ...options
    });
};

export const supportCommentsDestroy = <ThrowOnError extends boolean = false>(options: Options<SupportCommentsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SupportCommentsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-comments/{uuid}/',
        ...options
    });
};

export const supportCommentsRetrieve = <ThrowOnError extends boolean = false>(options: Options<SupportCommentsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SupportCommentsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-comments/{uuid}/',
        ...options
    });
};

export const supportCommentsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SupportCommentsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SupportCommentsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-comments/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const supportCommentsUpdate = <ThrowOnError extends boolean = false>(options: Options<SupportCommentsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SupportCommentsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-comments/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const supportFeedbackAverageReportRetrieve = <ThrowOnError extends boolean = false>(options?: Options<SupportFeedbackAverageReportRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportFeedbackAverageReportRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-feedback-average-report/',
        ...options
    });
};

export const supportFeedbackReportRetrieve = <ThrowOnError extends boolean = false>(options?: Options<SupportFeedbackReportRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportFeedbackReportRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-feedback-report/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const supportFeedbacksList = <ThrowOnError extends boolean = false>(options?: Options<SupportFeedbacksListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportFeedbacksListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-feedbacks/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const supportFeedbacksHead = <ThrowOnError extends boolean = false>(options?: Options<SupportFeedbacksHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<SupportFeedbacksHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-feedbacks/',
        ...options
    });
};

export const supportFeedbacksCreate = <ThrowOnError extends boolean = false>(options: Options<SupportFeedbacksCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportFeedbacksCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-feedbacks/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const supportFeedbacksRetrieve = <ThrowOnError extends boolean = false>(options: Options<SupportFeedbacksRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SupportFeedbacksRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-feedbacks/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const supportIssuesList = <ThrowOnError extends boolean = false>(options?: Options<SupportIssuesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportIssuesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-issues/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const supportIssuesHead = <ThrowOnError extends boolean = false>(options?: Options<SupportIssuesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<SupportIssuesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-issues/',
        ...options
    });
};

export const supportIssuesCreate = <ThrowOnError extends boolean = false>(options: Options<SupportIssuesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportIssuesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-issues/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const supportIssuesDestroy = <ThrowOnError extends boolean = false>(options: Options<SupportIssuesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SupportIssuesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-issues/{uuid}/',
        ...options
    });
};

export const supportIssuesRetrieve = <ThrowOnError extends boolean = false>(options: Options<SupportIssuesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SupportIssuesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-issues/{uuid}/',
        ...options
    });
};

export const supportIssuesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SupportIssuesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SupportIssuesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-issues/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const supportIssuesUpdate = <ThrowOnError extends boolean = false>(options: Options<SupportIssuesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SupportIssuesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-issues/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const supportIssuesComment = <ThrowOnError extends boolean = false>(options: Options<SupportIssuesCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportIssuesCommentResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-issues/{uuid}/comment/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const supportIssuesSync = <ThrowOnError extends boolean = false>(options: Options<SupportIssuesSyncData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportIssuesSyncResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-issues/{uuid}/sync/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const supportJiraWebhook = <ThrowOnError extends boolean = false>(options: Options<SupportJiraWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportJiraWebhookResponses, unknown, ThrowOnError>({
        url: '/api/support-jira-webhook/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const supportPrioritiesList = <ThrowOnError extends boolean = false>(options?: Options<SupportPrioritiesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportPrioritiesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-priorities/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const supportPrioritiesHead = <ThrowOnError extends boolean = false>(options?: Options<SupportPrioritiesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<SupportPrioritiesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-priorities/',
        ...options
    });
};

export const supportPrioritiesRetrieve = <ThrowOnError extends boolean = false>(options: Options<SupportPrioritiesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SupportPrioritiesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-priorities/{uuid}/',
        ...options
    });
};

export const supportSmaxWebhook = <ThrowOnError extends boolean = false>(options: Options<SupportSmaxWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportSmaxWebhookResponses, unknown, ThrowOnError>({
        url: '/api/support-smax-webhook/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const supportStatisticsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<SupportStatisticsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportStatisticsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-statistics/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const supportTemplatesList = <ThrowOnError extends boolean = false>(options?: Options<SupportTemplatesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportTemplatesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-templates/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const supportTemplatesHead = <ThrowOnError extends boolean = false>(options?: Options<SupportTemplatesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<SupportTemplatesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-templates/',
        ...options
    });
};

export const supportTemplatesCreate = <ThrowOnError extends boolean = false>(options: Options<SupportTemplatesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportTemplatesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-templates/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const supportTemplatesDestroy = <ThrowOnError extends boolean = false>(options: Options<SupportTemplatesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SupportTemplatesDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-templates/{uuid}/',
        ...options
    });
};

export const supportTemplatesRetrieve = <ThrowOnError extends boolean = false>(options: Options<SupportTemplatesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SupportTemplatesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-templates/{uuid}/',
        ...options
    });
};

export const supportTemplatesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SupportTemplatesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SupportTemplatesPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-templates/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const supportTemplatesUpdate = <ThrowOnError extends boolean = false>(options: Options<SupportTemplatesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SupportTemplatesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-templates/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * This view attaches documents to template.
 */
export const supportTemplatesCreateAttachments = <ThrowOnError extends boolean = false>(options: Options<SupportTemplatesCreateAttachmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportTemplatesCreateAttachmentsResponses, SupportTemplatesCreateAttachmentsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-templates/{uuid}/create_attachments/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const supportTemplatesDeleteAttachments = <ThrowOnError extends boolean = false>(options: Options<SupportTemplatesDeleteAttachmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportTemplatesDeleteAttachmentsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-templates/{uuid}/delete_attachments/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const supportUsersList = <ThrowOnError extends boolean = false>(options?: Options<SupportUsersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportUsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-users/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const supportUsersHead = <ThrowOnError extends boolean = false>(options?: Options<SupportUsersHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<SupportUsersHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-users/',
        ...options
    });
};

export const supportUsersRetrieve = <ThrowOnError extends boolean = false>(options: Options<SupportUsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SupportUsersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/support-users/{uuid}/',
        ...options
    });
};

export const supportZammadWebhook = <ThrowOnError extends boolean = false>(options?: Options<SupportZammadWebhookData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SupportZammadWebhookResponses, unknown, ThrowOnError>({
        url: '/api/support-zammad-webhook/',
        ...options
    });
};

/**
 * This view triggers synchronization of issues from backend.
 */
export const syncIssuesRetrieve = <ThrowOnError extends boolean = false>(options?: Options<SyncIssuesRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SyncIssuesRetrieveResponses, SyncIssuesRetrieveErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/sync-issues/',
        ...options
    });
};

/**
 * This view triggers synchronization of issues from backend.
 */
export const syncIssues = <ThrowOnError extends boolean = false>(options?: Options<SyncIssuesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SyncIssuesResponses, SyncIssuesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/sync-issues/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const userAgreementsList = <ThrowOnError extends boolean = false>(options?: Options<UserAgreementsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserAgreementsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-agreements/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const userAgreementsHead = <ThrowOnError extends boolean = false>(options?: Options<UserAgreementsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<UserAgreementsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-agreements/',
        ...options
    });
};

export const userAgreementsCreate = <ThrowOnError extends boolean = false>(options: Options<UserAgreementsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserAgreementsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-agreements/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userAgreementsDestroy = <ThrowOnError extends boolean = false>(options: Options<UserAgreementsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UserAgreementsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-agreements/{uuid}/',
        ...options
    });
};

export const userAgreementsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UserAgreementsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserAgreementsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-agreements/{uuid}/',
        ...options
    });
};

export const userAgreementsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<UserAgreementsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UserAgreementsPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-agreements/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userAgreementsUpdate = <ThrowOnError extends boolean = false>(options: Options<UserAgreementsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UserAgreementsUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-agreements/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const userGroupInvitationsList = <ThrowOnError extends boolean = false>(options?: Options<UserGroupInvitationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserGroupInvitationsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-group-invitations/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const userGroupInvitationsHead = <ThrowOnError extends boolean = false>(options?: Options<UserGroupInvitationsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<UserGroupInvitationsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-group-invitations/',
        ...options
    });
};

export const userGroupInvitationsCreate = <ThrowOnError extends boolean = false>(options: Options<UserGroupInvitationsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserGroupInvitationsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-group-invitations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userGroupInvitationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UserGroupInvitationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGroupInvitationsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-group-invitations/{uuid}/',
        ...options
    });
};

/**
 * Cancel group invitation
 */
export const userGroupInvitationsCancel = <ThrowOnError extends boolean = false>(options: Options<UserGroupInvitationsCancelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserGroupInvitationsCancelResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-group-invitations/{uuid}/cancel/',
        ...options
    });
};

/**
 * Return projects for group invitation
 */
export const userGroupInvitationsProjectsList = <ThrowOnError extends boolean = false>(options: Options<UserGroupInvitationsProjectsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGroupInvitationsProjectsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-group-invitations/{uuid}/projects/',
        ...options
    });
};

export const userGroupInvitationsSubmitRequest = <ThrowOnError extends boolean = false>(options: Options<UserGroupInvitationsSubmitRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserGroupInvitationsSubmitRequestResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-group-invitations/{uuid}/submit_request/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const userInvitationsList = <ThrowOnError extends boolean = false>(options?: Options<UserInvitationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserInvitationsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-invitations/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const userInvitationsHead = <ThrowOnError extends boolean = false>(options?: Options<UserInvitationsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<UserInvitationsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-invitations/',
        ...options
    });
};

export const userInvitationsCreate = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserInvitationsCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-invitations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userInvitationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserInvitationsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-invitations/{uuid}/',
        ...options
    });
};

/**
 * Accept invitation for current user.
 */
export const userInvitationsAccept = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsAcceptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserInvitationsAcceptResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-invitations/{uuid}/accept/',
        ...options
    });
};

export const userInvitationsCancel = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsCancelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserInvitationsCancelResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-invitations/{uuid}/cancel/',
        ...options
    });
};

export const userInvitationsCheck = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsCheckData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserInvitationsCheckResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-invitations/{uuid}/check/',
        ...options
    });
};

export const userInvitationsDelete = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserInvitationsDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-invitations/{uuid}/delete/',
        ...options
    });
};

export const userInvitationsDetailsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsDetailsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserInvitationsDetailsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-invitations/{uuid}/details/',
        ...options
    });
};

export const userInvitationsSend = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsSendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserInvitationsSendResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-invitations/{uuid}/send/',
        ...options
    });
};

/**
 * For user's convenience invitation approval is performed without authentication.
 * User UUID and invitation UUID is encoded into cryptographically signed token.
 */
export const userInvitationsApprove = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsApproveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserInvitationsApproveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-invitations/approve/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * For user's convenience invitation reject action is performed without authentication.
 * User UUID and invitation UUID is encoded into cryptographically signed token.
 */
export const userInvitationsReject = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsRejectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserInvitationsRejectResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-invitations/reject/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const userPermissionRequestsList = <ThrowOnError extends boolean = false>(options?: Options<UserPermissionRequestsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserPermissionRequestsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-permission-requests/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const userPermissionRequestsHead = <ThrowOnError extends boolean = false>(options?: Options<UserPermissionRequestsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<UserPermissionRequestsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-permission-requests/',
        ...options
    });
};

export const userPermissionRequestsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UserPermissionRequestsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserPermissionRequestsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-permission-requests/{uuid}/',
        ...options
    });
};

export const userPermissionRequestsApprove = <ThrowOnError extends boolean = false>(options: Options<UserPermissionRequestsApproveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserPermissionRequestsApproveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-permission-requests/{uuid}/approve/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userPermissionRequestsReject = <ThrowOnError extends boolean = false>(options: Options<UserPermissionRequestsRejectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserPermissionRequestsRejectResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-permission-requests/{uuid}/reject/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const userPermissionsList = <ThrowOnError extends boolean = false>(options?: Options<UserPermissionsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserPermissionsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-permissions/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const userPermissionsHead = <ThrowOnError extends boolean = false>(options?: Options<UserPermissionsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<UserPermissionsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-permissions/',
        ...options
    });
};

export const userPermissionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UserPermissionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserPermissionsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-permissions/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const usersList = <ThrowOnError extends boolean = false>(options?: Options<UsersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const usersHead = <ThrowOnError extends boolean = false>(options?: Options<UsersHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<UsersHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/',
        ...options
    });
};

export const usersCreate = <ThrowOnError extends boolean = false>(options: Options<UsersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const usersDestroy = <ThrowOnError extends boolean = false>(options: Options<UsersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{uuid}/',
        ...options
    });
};

export const usersRetrieve = <ThrowOnError extends boolean = false>(options: Options<UsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{uuid}/',
        ...options
    });
};

export const usersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersPartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const usersUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Cancel email update request
 */
export const usersCancelChangeEmail = <ThrowOnError extends boolean = false>(options: Options<UsersCancelChangeEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersCancelChangeEmailResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{uuid}/cancel_change_email/',
        ...options
    });
};

/**
 * Allows to change email for user.
 */
export const usersChangeEmail = <ThrowOnError extends boolean = false>(options: Options<UsersChangeEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersChangeEmailResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{uuid}/change_email/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Allows staff user to change password for any user.
 */
export const usersChangePassword = <ThrowOnError extends boolean = false>(options: Options<UsersChangePasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersChangePasswordResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{uuid}/change_password/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Pulls remote user data from eduTEAMS.
 */
export const usersPullRemoteUser = <ThrowOnError extends boolean = false>(options: Options<UsersPullRemoteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersPullRemoteUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{uuid}/pull_remote_user/',
        ...options
    });
};

/**
 * Allows to refresh user auth token.
 */
export const usersRefreshToken = <ThrowOnError extends boolean = false>(options: Options<UsersRefreshTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersRefreshTokenResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{uuid}/refresh_token/',
        ...options
    });
};

export const usersTokenRetrieve = <ThrowOnError extends boolean = false>(options: Options<UsersTokenRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersTokenRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{uuid}/token/',
        ...options
    });
};

/**
 * Confirm email update using code
 */
export const usersConfirmEmail = <ThrowOnError extends boolean = false>(options: Options<UsersConfirmEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersConfirmEmailResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/confirm_email/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get current user details, including authentication token.
 */
export const usersMeRetrieve = <ThrowOnError extends boolean = false>(options?: Options<UsersMeRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersMeRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/me/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const usersMeHead = <ThrowOnError extends boolean = false>(options?: Options<UsersMeHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<UsersMeHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/me/',
        ...options
    });
};

/**
 * Retrieve current version of the application and the latest available version from GitHub (if available).
 */
export const versionRetrieve = <ThrowOnError extends boolean = false>(options?: Options<VersionRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VersionRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/version/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const vmwareClustersList = <ThrowOnError extends boolean = false>(options?: Options<VmwareClustersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VmwareClustersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-clusters/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const vmwareClustersHead = <ThrowOnError extends boolean = false>(options?: Options<VmwareClustersHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<VmwareClustersHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-clusters/',
        ...options
    });
};

export const vmwareClustersRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareClustersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareClustersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-clusters/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const vmwareDatastoresList = <ThrowOnError extends boolean = false>(options?: Options<VmwareDatastoresListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VmwareDatastoresListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-datastores/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const vmwareDatastoresHead = <ThrowOnError extends boolean = false>(options?: Options<VmwareDatastoresHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<VmwareDatastoresHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-datastores/',
        ...options
    });
};

export const vmwareDatastoresRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareDatastoresRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareDatastoresRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-datastores/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const vmwareDisksList = <ThrowOnError extends boolean = false>(options?: Options<VmwareDisksListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VmwareDisksListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-disks/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const vmwareDisksHead = <ThrowOnError extends boolean = false>(options?: Options<VmwareDisksHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<VmwareDisksHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-disks/',
        ...options
    });
};

export const vmwareDisksDestroy = <ThrowOnError extends boolean = false>(options: Options<VmwareDisksDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<VmwareDisksDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-disks/{uuid}/',
        ...options
    });
};

export const vmwareDisksRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareDisksRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareDisksRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-disks/{uuid}/',
        ...options
    });
};

/**
 * Increase disk capacity
 */
export const vmwareDisksExtend = <ThrowOnError extends boolean = false>(options: Options<VmwareDisksExtendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareDisksExtendResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-disks/{uuid}/extend/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const vmwareDisksPull = <ThrowOnError extends boolean = false>(options: Options<VmwareDisksPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareDisksPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-disks/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const vmwareDisksUnlink = <ThrowOnError extends boolean = false>(options: Options<VmwareDisksUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareDisksUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-disks/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const vmwareFoldersList = <ThrowOnError extends boolean = false>(options?: Options<VmwareFoldersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VmwareFoldersListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-folders/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const vmwareFoldersHead = <ThrowOnError extends boolean = false>(options?: Options<VmwareFoldersHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<VmwareFoldersHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-folders/',
        ...options
    });
};

export const vmwareFoldersRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareFoldersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareFoldersRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-folders/{uuid}/',
        ...options
    });
};

export const vmwareLimitsRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareLimitsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareLimitsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-limits/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const vmwareNetworksList = <ThrowOnError extends boolean = false>(options?: Options<VmwareNetworksListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VmwareNetworksListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-networks/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const vmwareNetworksHead = <ThrowOnError extends boolean = false>(options?: Options<VmwareNetworksHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<VmwareNetworksHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-networks/',
        ...options
    });
};

export const vmwareNetworksRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareNetworksRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareNetworksRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-networks/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const vmwarePortsList = <ThrowOnError extends boolean = false>(options?: Options<VmwarePortsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VmwarePortsListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-ports/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const vmwarePortsHead = <ThrowOnError extends boolean = false>(options?: Options<VmwarePortsHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<VmwarePortsHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-ports/',
        ...options
    });
};

export const vmwarePortsDestroy = <ThrowOnError extends boolean = false>(options: Options<VmwarePortsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<VmwarePortsDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-ports/{uuid}/',
        ...options
    });
};

export const vmwarePortsRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwarePortsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwarePortsRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-ports/{uuid}/',
        ...options
    });
};

export const vmwarePortsPull = <ThrowOnError extends boolean = false>(options: Options<VmwarePortsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwarePortsPullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-ports/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const vmwarePortsUnlink = <ThrowOnError extends boolean = false>(options: Options<VmwarePortsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwarePortsUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-ports/{uuid}/unlink/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const vmwareTemplatesList = <ThrowOnError extends boolean = false>(options?: Options<VmwareTemplatesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VmwareTemplatesListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-templates/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const vmwareTemplatesHead = <ThrowOnError extends boolean = false>(options?: Options<VmwareTemplatesHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<VmwareTemplatesHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-templates/',
        ...options
    });
};

export const vmwareTemplatesRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareTemplatesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareTemplatesRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-templates/{uuid}/',
        ...options
    });
};

/**
 * Mixin to optimize HEAD requests for DRF views bypassing serializer processing
 */
export const vmwareVirtualMachineList = <ThrowOnError extends boolean = false>(options?: Options<VmwareVirtualMachineListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VmwareVirtualMachineListResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/',
        ...options
    });
};

/**
 * Get number of items in the collection matching the request parameters.
 */
export const vmwareVirtualMachineHead = <ThrowOnError extends boolean = false>(options?: Options<VmwareVirtualMachineHeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<VmwareVirtualMachineHeadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/',
        ...options
    });
};

export const vmwareVirtualMachineCreate = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareVirtualMachineCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const vmwareVirtualMachineDestroy = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<VmwareVirtualMachineDestroyResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/',
        ...options
    });
};

export const vmwareVirtualMachineRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareVirtualMachineRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/',
        ...options
    });
};

export const vmwareVirtualMachinePartialUpdate = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachinePartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<VmwareVirtualMachinePartialUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const vmwareVirtualMachineUpdate = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<VmwareVirtualMachineUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * This endpoint provides access to Virtual Machine Remote Console aka VMRC.
 */
export const vmwareVirtualMachineConsoleRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineConsoleRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareVirtualMachineConsoleRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/console/',
        ...options
    });
};

export const vmwareVirtualMachineCreateDisk = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineCreateDiskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareVirtualMachineCreateDiskResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/create_disk/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const vmwareVirtualMachineCreatePort = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineCreatePortData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareVirtualMachineCreatePortResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/create_port/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const vmwareVirtualMachinePull = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachinePullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareVirtualMachinePullResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/pull/',
        ...options
    });
};

export const vmwareVirtualMachineRebootGuest = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineRebootGuestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareVirtualMachineRebootGuestResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/reboot_guest/',
        ...options
    });
};

export const vmwareVirtualMachineReset = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineResetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareVirtualMachineResetResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/reset/',
        ...options
    });
};

export const vmwareVirtualMachineShutdownGuest = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineShutdownGuestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareVirtualMachineShutdownGuestResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/shutdown_guest/',
        ...options
    });
};

export const vmwareVirtualMachineStart = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareVirtualMachineStartResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/start/',
        ...options
    });
};

export const vmwareVirtualMachineStop = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareVirtualMachineStopResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/stop/',
        ...options
    });
};

export const vmwareVirtualMachineSuspend = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineSuspendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareVirtualMachineSuspendResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/suspend/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const vmwareVirtualMachineUnlink = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareVirtualMachineUnlinkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/unlink/',
        ...options
    });
};

/**
 * This endpoint provides access to HTML Console aka WMKS.
 */
export const vmwareVirtualMachineWebConsoleRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineWebConsoleRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareVirtualMachineWebConsoleRetrieveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/web_console/',
        ...options
    });
};