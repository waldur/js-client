// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ApiAuthEduteamsCompleteRetrieveData, ApiAuthEduteamsInitRetrieveData, ApiAuthKeycloakCompleteRetrieveData, ApiAuthKeycloakInitRetrieveData, ApiAuthLogoutData, ApiAuthLogoutResponse, ApiAuthPasswordData, ApiAuthPasswordResponse, ApiAuthSaml2LoginData, ApiAuthSaml2LoginResponse, ApiAuthSaml2LoginCompleteData, ApiAuthSaml2LoginCompleteResponse, ApiAuthSaml2LogoutRetrieveData, ApiAuthSaml2LogoutCompleteRetrieveData, ApiAuthSaml2LogoutCompleteRetrieveResponse, ApiAuthSaml2LogoutCompleteData, ApiAuthSaml2LogoutCompleteResponse, ApiAuthSaml2ProvidersListData, ApiAuthSaml2ProvidersListResponse, ApiAuthTaraCompleteRetrieveData, ApiAuthTaraInitRetrieveData, AccessSubnetsListData, AccessSubnetsListResponse, AccessSubnetsCreateData, AccessSubnetsCreateResponse, AccessSubnetsDestroyData, AccessSubnetsDestroyResponse, AccessSubnetsRetrieveData, AccessSubnetsRetrieveResponse, AccessSubnetsPartialUpdateData, AccessSubnetsPartialUpdateResponse, AccessSubnetsUpdateData, AccessSubnetsUpdateResponse, AdminAnnouncementsListData, AdminAnnouncementsListResponse, AdminAnnouncementsCreateData, AdminAnnouncementsCreateResponse, AdminAnnouncementsDestroyData, AdminAnnouncementsDestroyResponse, AdminAnnouncementsRetrieveData, AdminAnnouncementsRetrieveResponse, AdminAnnouncementsPartialUpdateData, AdminAnnouncementsPartialUpdateResponse, AdminAnnouncementsUpdateData, AdminAnnouncementsUpdateResponse, AuthTokensListData, AuthTokensListResponse, AuthTokensDestroyData, AuthTokensDestroyResponse, AuthTokensRetrieveData, AuthTokensRetrieveResponse, AuthValimoCreateData, AuthValimoCreateResponse, AuthValimoResultData, AuthValimoResultResponse, AwsImagesListData, AwsImagesListResponse, AwsImagesRetrieveData, AwsImagesRetrieveResponse, AwsInstancesListData, AwsInstancesListResponse, AwsInstancesCreateData, AwsInstancesCreateResponse, AwsInstancesDestroyData, AwsInstancesDestroyResponse, AwsInstancesRetrieveData, AwsInstancesRetrieveResponse, AwsInstancesPartialUpdateData, AwsInstancesPartialUpdateResponse, AwsInstancesUpdateData, AwsInstancesUpdateResponse, AwsInstancesPullData, AwsInstancesResizeData, AwsInstancesResizeResponse, AwsInstancesRestartData, AwsInstancesStartData, AwsInstancesStopData, AwsInstancesUnlinkData, AwsRegionsListData, AwsRegionsListResponse, AwsRegionsRetrieveData, AwsRegionsRetrieveResponse, AwsSizesListData, AwsSizesListResponse, AwsSizesRetrieveData, AwsSizesRetrieveResponse, AwsVolumesListData, AwsVolumesListResponse, AwsVolumesCreateData, AwsVolumesCreateResponse, AwsVolumesDestroyData, AwsVolumesDestroyResponse, AwsVolumesRetrieveData, AwsVolumesRetrieveResponse, AwsVolumesPartialUpdateData, AwsVolumesPartialUpdateResponse, AwsVolumesUpdateData, AwsVolumesUpdateResponse, AwsVolumesAttachData, AwsVolumesAttachResponse, AwsVolumesDetachData, AwsVolumesPullData, AwsVolumesUnlinkData, AzureImagesListData, AzureImagesListResponse, AzureImagesRetrieveData, AzureImagesRetrieveResponse, AzureLocationsListData, AzureLocationsListResponse, AzureLocationsRetrieveData, AzureLocationsRetrieveResponse, AzurePublicIpsListData, AzurePublicIpsListResponse, AzurePublicIpsCreateData, AzurePublicIpsCreateResponse, AzurePublicIpsDestroyData, AzurePublicIpsDestroyResponse, AzurePublicIpsRetrieveData, AzurePublicIpsRetrieveResponse, AzurePublicIpsPartialUpdateData, AzurePublicIpsPartialUpdateResponse, AzurePublicIpsUpdateData, AzurePublicIpsUpdateResponse, AzurePublicIpsPullData, AzurePublicIpsUnlinkData, AzureResourceGroupsListData, AzureResourceGroupsListResponse, AzureResourceGroupsRetrieveData, AzureResourceGroupsRetrieveResponse, AzureSizesListData, AzureSizesListResponse, AzureSizesRetrieveData, AzureSizesRetrieveResponse, AzureSqlDatabasesListData, AzureSqlDatabasesListResponse, AzureSqlDatabasesCreateData, AzureSqlDatabasesCreateResponse, AzureSqlDatabasesDestroyData, AzureSqlDatabasesDestroyResponse, AzureSqlDatabasesRetrieveData, AzureSqlDatabasesRetrieveResponse, AzureSqlDatabasesPartialUpdateData, AzureSqlDatabasesPartialUpdateResponse, AzureSqlDatabasesUpdateData, AzureSqlDatabasesUpdateResponse, AzureSqlDatabasesPullData, AzureSqlDatabasesUnlinkData, AzureSqlServersListData, AzureSqlServersListResponse, AzureSqlServersCreateData, AzureSqlServersCreateResponse, AzureSqlServersDestroyData, AzureSqlServersDestroyResponse, AzureSqlServersRetrieveData, AzureSqlServersRetrieveResponse, AzureSqlServersPartialUpdateData, AzureSqlServersPartialUpdateResponse, AzureSqlServersUpdateData, AzureSqlServersUpdateResponse, AzureSqlServersCreateDatabaseData, AzureSqlServersCreateDatabaseResponse, AzureSqlServersPullData, AzureSqlServersUnlinkData, AzureVirtualmachinesListData, AzureVirtualmachinesListResponse, AzureVirtualmachinesCreateData, AzureVirtualmachinesCreateResponse, AzureVirtualmachinesDestroyData, AzureVirtualmachinesDestroyResponse, AzureVirtualmachinesRetrieveData, AzureVirtualmachinesRetrieveResponse, AzureVirtualmachinesPartialUpdateData, AzureVirtualmachinesPartialUpdateResponse, AzureVirtualmachinesUpdateData, AzureVirtualmachinesUpdateResponse, AzureVirtualmachinesPullData, AzureVirtualmachinesRestartData, AzureVirtualmachinesStartData, AzureVirtualmachinesStopData, AzureVirtualmachinesUnlinkData, BillingTotalCostRetrieveData, BillingTotalCostRetrieveResponse, BookingOfferingsListData, BookingOfferingsListResponse, BookingOfferingsRetrieveData, BookingOfferingsRetrieveResponse, BookingOfferingsGoogleCalendarSyncData, BookingOfferingsShareGoogleCalendarData, BookingOfferingsUnshareGoogleCalendarData, BookingResourcesListData, BookingResourcesListResponse, BookingResourcesRetrieveData, BookingResourcesRetrieveResponse, BookingResourcesAcceptData, BookingResourcesRejectData, BroadcastMessageTemplatesListData, BroadcastMessageTemplatesListResponse, BroadcastMessageTemplatesCreateData, BroadcastMessageTemplatesCreateResponse, BroadcastMessageTemplatesDestroyData, BroadcastMessageTemplatesDestroyResponse, BroadcastMessageTemplatesRetrieveData, BroadcastMessageTemplatesRetrieveResponse, BroadcastMessageTemplatesPartialUpdateData, BroadcastMessageTemplatesPartialUpdateResponse, BroadcastMessageTemplatesUpdateData, BroadcastMessageTemplatesUpdateResponse, BroadcastMessagesListData, BroadcastMessagesListResponse, BroadcastMessagesCreateData, BroadcastMessagesCreateResponse, BroadcastMessagesDestroyData, BroadcastMessagesDestroyResponse, BroadcastMessagesRetrieveData, BroadcastMessagesRetrieveResponse, BroadcastMessagesPartialUpdateData, BroadcastMessagesPartialUpdateResponse, BroadcastMessagesUpdateData, BroadcastMessagesUpdateResponse, BroadcastMessagesSendData, BroadcastMessagesRecipientsRetrieveData, BroadcastMessagesRecipientsRetrieveResponse, CallManagingOrganisationsListData, CallManagingOrganisationsListResponse, CallManagingOrganisationsCreateData, CallManagingOrganisationsCreateResponse, CallManagingOrganisationsDestroyData, CallManagingOrganisationsDestroyResponse, CallManagingOrganisationsRetrieveData, CallManagingOrganisationsRetrieveResponse, CallManagingOrganisationsPartialUpdateData, CallManagingOrganisationsPartialUpdateResponse, CallManagingOrganisationsUpdateData, CallManagingOrganisationsUpdateResponse, CallManagingOrganisationsAddUserData, CallManagingOrganisationsAddUserResponse, CallManagingOrganisationsDeleteUserData, CallManagingOrganisationsListUsersListData, CallManagingOrganisationsListUsersListResponse, CallManagingOrganisationsStatsRetrieveData, CallManagingOrganisationsStatsRetrieveResponse, CallManagingOrganisationsUpdateUserData, CallManagingOrganisationsUpdateUserResponse, CallRoundsListData, CallRoundsListResponse, CallRoundsRetrieveData, CallRoundsRetrieveResponse, CallRoundsReviewersListData, CallRoundsReviewersListResponse, CeleryStatsRetrieveData, ComponentUserUsageLimitsListData, ComponentUserUsageLimitsListResponse, ComponentUserUsageLimitsCreateData, ComponentUserUsageLimitsCreateResponse, ComponentUserUsageLimitsDestroyData, ComponentUserUsageLimitsDestroyResponse, ComponentUserUsageLimitsRetrieveData, ComponentUserUsageLimitsRetrieveResponse, ComponentUserUsageLimitsPartialUpdateData, ComponentUserUsageLimitsPartialUpdateResponse, ComponentUserUsageLimitsUpdateData, ComponentUserUsageLimitsUpdateResponse, ConfigurationRetrieveData, ConfigurationRetrieveResponse, CustomerCreditsListData, CustomerCreditsListResponse, CustomerCreditsCreateData, CustomerCreditsCreateResponse, CustomerCreditsDestroyData, CustomerCreditsDestroyResponse, CustomerCreditsRetrieveData, CustomerCreditsRetrieveResponse, CustomerCreditsPartialUpdateData, CustomerCreditsPartialUpdateResponse, CustomerCreditsUpdateData, CustomerCreditsUpdateResponse, CustomerCreditsApplyCompensationsData, CustomerCreditsApplyCompensationsResponse, CustomerCreditsClearCompensationsData, CustomerCreditsClearCompensationsResponse, CustomerPermissionsReviewsListData, CustomerPermissionsReviewsListResponse, CustomerPermissionsReviewsRetrieveData, CustomerPermissionsReviewsRetrieveResponse, CustomerPermissionsReviewsCloseData, CustomerQuotasListData, CustomerQuotasListResponse, CustomersListData, CustomersListResponse, CustomersCreateData, CustomersCreateResponse, MarketplaceChecklistsCustomerRetrieveData, MarketplaceChecklistsCustomerRetrieveResponse, MarketplaceChecklistsCustomerUpdateData, MarketplaceChecklistsCustomerUpdateResponse, MarketplaceChecklistsCustomerStatsData, MarketplaceChecklistsCustomerStatsResponse, CustomersDestroyData, CustomersDestroyResponse, CustomersRetrieveData, CustomersRetrieveResponse, CustomersPartialUpdateData, CustomersPartialUpdateResponse, CustomersUpdateData, CustomersUpdateResponse, CustomersAddUserData, CustomersAddUserResponse, CustomersDeleteUserData, CustomersListUsersListData, CustomersListUsersListResponse, CustomersStatsRetrieveData, CustomersStatsRetrieveResponse, CustomersUpdateOrganizationGroupsData, CustomersUpdateUserData, CustomersUpdateUserResponse, CustomersUsersListData, CustomersUsersListResponse, CustomersCountriesListData, CustomersCountriesListResponse, DailyQuotasRetrieveData, DailyQuotasRetrieveResponse, DatabaseStatsListData, DatabaseStatsListResponse, DigitaloceanDropletsListData, DigitaloceanDropletsListResponse, DigitaloceanDropletsCreateData, DigitaloceanDropletsCreateResponse, DigitaloceanDropletsDestroyData, DigitaloceanDropletsDestroyResponse, DigitaloceanDropletsRetrieveData, DigitaloceanDropletsRetrieveResponse, DigitaloceanDropletsPartialUpdateData, DigitaloceanDropletsPartialUpdateResponse, DigitaloceanDropletsUpdateData, DigitaloceanDropletsUpdateResponse, DigitaloceanDropletsPullData, DigitaloceanDropletsResizeData, DigitaloceanDropletsResizeResponse, DigitaloceanDropletsRestartData, DigitaloceanDropletsStartData, DigitaloceanDropletsStopData, DigitaloceanDropletsUnlinkData, DigitaloceanImagesListData, DigitaloceanImagesListResponse, DigitaloceanImagesRetrieveData, DigitaloceanImagesRetrieveResponse, DigitaloceanRegionsListData, DigitaloceanRegionsListResponse, DigitaloceanRegionsRetrieveData, DigitaloceanRegionsRetrieveResponse, DigitaloceanSizesListData, DigitaloceanSizesListResponse, DigitaloceanSizesRetrieveData, DigitaloceanSizesRetrieveResponse, EmailLogsListData, EmailLogsListResponse, EmailLogsRetrieveData, EmailLogsRetrieveResponse, EventSubscriptionsListData, EventSubscriptionsListResponse, EventSubscriptionsCreateData, EventSubscriptionsCreateResponse, EventSubscriptionsDestroyData, EventSubscriptionsDestroyResponse, EventSubscriptionsRetrieveData, EventSubscriptionsRetrieveResponse, EventsListData, EventsListResponse, EventsStatsListData, EventsStatsListResponse, EventsRetrieveData, EventsRetrieveResponse, EventsCountRetrieveData, EventsCountRetrieveResponse, EventsEventGroupsRetrieveData, EventsEventGroupsRetrieveResponse, EventsScopeTypesRetrieveData, EventsScopeTypesRetrieveResponse, FeatureValuesData, FeatureValuesResponse, FinancialReportsListData, FinancialReportsListResponse, FinancialReportsRetrieveData, FinancialReportsRetrieveResponse, FreeipaProfilesListData, FreeipaProfilesListResponse, FreeipaProfilesCreateData, FreeipaProfilesCreateResponse, FreeipaProfilesRetrieveData, FreeipaProfilesRetrieveResponse, FreeipaProfilesPartialUpdateData, FreeipaProfilesPartialUpdateResponse, FreeipaProfilesUpdateData, FreeipaProfilesUpdateResponse, FreeipaProfilesUpdateSshKeysData, GoogleAuthListData, GoogleAuthListResponse, GoogleAuthRetrieveData, GoogleAuthRetrieveResponse, GoogleAuthAuthorizeRetrieveData, GoogleAuthAuthorizeRetrieveResponse, GoogleAuthCallbackRetrieveData, HooksListData, HooksEmailListData, HooksEmailListResponse, HooksEmailCreateData, HooksEmailCreateResponse, HooksEmailDestroyData, HooksEmailDestroyResponse, HooksEmailRetrieveData, HooksEmailRetrieveResponse, HooksEmailPartialUpdateData, HooksEmailPartialUpdateResponse, HooksEmailUpdateData, HooksEmailUpdateResponse, HooksWebListData, HooksWebListResponse, HooksWebCreateData, HooksWebCreateResponse, HooksWebDestroyData, HooksWebDestroyResponse, HooksWebRetrieveData, HooksWebRetrieveResponse, HooksWebPartialUpdateData, HooksWebPartialUpdateResponse, HooksWebUpdateData, HooksWebUpdateResponse, IconsFaviconRetrieveData, IconsFaviconRetrieveResponse, IconsHeroImageRetrieveData, IconsHeroImageRetrieveResponse, IconsKeycloakIconRetrieveData, IconsKeycloakIconRetrieveResponse, IconsLoginLogoRetrieveData, IconsLoginLogoRetrieveResponse, IconsOfferingLogoPlaceholderRetrieveData, IconsOfferingLogoPlaceholderRetrieveResponse, IconsPoweredByLogoRetrieveData, IconsPoweredByLogoRetrieveResponse, IconsSidebarLogoRetrieveData, IconsSidebarLogoRetrieveResponse, IconsSidebarLogoDarkRetrieveData, IconsSidebarLogoDarkRetrieveResponse, IconsSidebarLogoMobileRetrieveData, IconsSidebarLogoMobileRetrieveResponse, IconsSiteLogoRetrieveData, IconsSiteLogoRetrieveResponse, IdentityProvidersListData, IdentityProvidersListResponse, IdentityProvidersCreateData, IdentityProvidersCreateResponse, IdentityProvidersDestroyData, IdentityProvidersDestroyResponse, IdentityProvidersRetrieveData, IdentityProvidersRetrieveResponse, IdentityProvidersPartialUpdateData, IdentityProvidersPartialUpdateResponse, IdentityProvidersUpdateData, IdentityProvidersUpdateResponse, InvoiceItemsListData, InvoiceItemsListResponse, InvoiceItemsDestroyData, InvoiceItemsDestroyResponse, InvoiceItemsRetrieveData, InvoiceItemsRetrieveResponse, InvoiceItemsPartialUpdateData, InvoiceItemsPartialUpdateResponse, InvoiceItemsUpdateData, InvoiceItemsUpdateResponse, InvoiceItemsCreateCompensationData, InvoiceItemsCreateCompensationResponse, InvoiceItemsMigrateToData, InvoiceItemsMigrateToResponse, InvoiceItemsCostsListData, InvoiceItemsCostsListResponse, InvoiceItemsCustomerCostsForPeriodRetrieveData, InvoiceItemsCustomerCostsForPeriodRetrieveResponse, InvoiceItemsProjectCostsForPeriodRetrieveData, InvoiceItemsProjectCostsForPeriodRetrieveResponse, InvoiceItemsTotalPriceRetrieveData, InvoiceItemsTotalPriceRetrieveResponse, InvoiceSendFinancialReportByMailData, InvoicesListData, InvoicesListResponse, InvoicesRetrieveData, InvoicesRetrieveResponse, InvoicesItemsRetrieveData, InvoicesItemsRetrieveResponse, InvoicesPaidData, InvoicesPaidResponse, InvoicesSendNotificationData, InvoicesSetBackendIdData, InvoicesSetPaymentUrlData, InvoicesSetReferenceNumberData, InvoicesStatsListData, InvoicesStatsListResponse, InvoicesGrowthRetrieveData, InvoicesGrowthRetrieveResponse, KeysListData, KeysListResponse, KeysCreateData, KeysCreateResponse, KeysDestroyData, KeysDestroyResponse, KeysRetrieveData, KeysRetrieveResponse, LexisLinksListData, LexisLinksListResponse, LexisLinksCreateData, LexisLinksDestroyData, LexisLinksDestroyResponse, LexisLinksRetrieveData, LexisLinksRetrieveResponse, LexisLinksPartialUpdateData, LexisLinksPartialUpdateResponse, LexisLinksUpdateData, LexisLinksUpdateResponse, MarketplaceBookingsListData, MarketplaceBookingsListResponse, MarketplaceCategoriesListData, MarketplaceCategoriesListResponse, MarketplaceCategoriesCreateData, MarketplaceCategoriesCreateResponse, MarketplaceCategoriesDestroyData, MarketplaceCategoriesDestroyResponse, MarketplaceCategoriesRetrieveData, MarketplaceCategoriesRetrieveResponse, MarketplaceCategoriesPartialUpdateData, MarketplaceCategoriesPartialUpdateResponse, MarketplaceCategoriesUpdateData, MarketplaceCategoriesUpdateResponse, MarketplaceCategoryColumnsListData, MarketplaceCategoryColumnsListResponse, MarketplaceCategoryColumnsCreateData, MarketplaceCategoryColumnsCreateResponse, MarketplaceCategoryColumnsDestroyData, MarketplaceCategoryColumnsDestroyResponse, MarketplaceCategoryColumnsRetrieveData, MarketplaceCategoryColumnsRetrieveResponse, MarketplaceCategoryColumnsPartialUpdateData, MarketplaceCategoryColumnsPartialUpdateResponse, MarketplaceCategoryColumnsUpdateData, MarketplaceCategoryColumnsUpdateResponse, MarketplaceCategoryComponentUsagesListData, MarketplaceCategoryComponentUsagesListResponse, MarketplaceCategoryComponentUsagesRetrieveData, MarketplaceCategoryComponentUsagesRetrieveResponse, MarketplaceCategoryComponentsListData, MarketplaceCategoryComponentsListResponse, MarketplaceCategoryComponentsCreateData, MarketplaceCategoryComponentsCreateResponse, MarketplaceCategoryComponentsDestroyData, MarketplaceCategoryComponentsDestroyResponse, MarketplaceCategoryComponentsRetrieveData, MarketplaceCategoryComponentsRetrieveResponse, MarketplaceCategoryComponentsPartialUpdateData, MarketplaceCategoryComponentsPartialUpdateResponse, MarketplaceCategoryComponentsUpdateData, MarketplaceCategoryComponentsUpdateResponse, MarketplaceCategoryGroupsListData, MarketplaceCategoryGroupsListResponse, MarketplaceCategoryGroupsCreateData, MarketplaceCategoryGroupsCreateResponse, MarketplaceCategoryGroupsDestroyData, MarketplaceCategoryGroupsDestroyResponse, MarketplaceCategoryGroupsRetrieveData, MarketplaceCategoryGroupsRetrieveResponse, MarketplaceCategoryGroupsPartialUpdateData, MarketplaceCategoryGroupsPartialUpdateResponse, MarketplaceCategoryGroupsUpdateData, MarketplaceCategoryGroupsUpdateResponse, MarketplaceCategoryHelpArticlesListData, MarketplaceCategoryHelpArticlesListResponse, MarketplaceCategoryHelpArticlesCreateData, MarketplaceCategoryHelpArticlesCreateResponse, MarketplaceCategoryHelpArticlesDestroyData, MarketplaceCategoryHelpArticlesDestroyResponse, MarketplaceCategoryHelpArticlesRetrieveData, MarketplaceCategoryHelpArticlesRetrieveResponse, MarketplaceCategoryHelpArticlesPartialUpdateData, MarketplaceCategoryHelpArticlesPartialUpdateResponse, MarketplaceCategoryHelpArticlesUpdateData, MarketplaceCategoryHelpArticlesUpdateResponse, MarketplaceChecklistsListData, MarketplaceChecklistsListResponse, MarketplaceChecklistsCategoriesListData, MarketplaceChecklistsCategoriesListResponse, MarketplaceChecklistsCategoriesChecklistsListData, MarketplaceChecklistsCategoriesChecklistsListResponse, MarketplaceChecklistsCategoriesRetrieveData, MarketplaceChecklistsCategoriesRetrieveResponse, MarketplaceChecklistsRetrieveData, MarketplaceChecklistsRetrieveResponse, MarketplaceChecklistsAnswersListData, MarketplaceChecklistsAnswersListResponse, MarketplaceChecklistsAnswersSubmitCreateData, MarketplaceChecklistsAnswersSubmitCreateResponse, MarketplaceChecklistsQuestionsListData, MarketplaceChecklistsQuestionsListResponse, MarketplaceChecklistsStatsListData, MarketplaceChecklistsStatsListResponse, MarketplaceChecklistsUserAnswersListData, MarketplaceChecklistsUserAnswersListResponse, MarketplaceComponentUsagesListData, MarketplaceComponentUsagesListResponse, MarketplaceComponentUsagesRetrieveData, MarketplaceComponentUsagesRetrieveResponse, MarketplaceComponentUsagesSetUserUsageData, MarketplaceComponentUsagesSetUserUsageResponse, MarketplaceComponentUsagesSetUsageData, MarketplaceComponentUsagesSetUsageResponse, MarketplaceComponentUserUsagesListData, MarketplaceComponentUserUsagesListResponse, MarketplaceComponentUserUsagesRetrieveData, MarketplaceComponentUserUsagesRetrieveResponse, MarketplaceCustomerEstimatedCostPoliciesListData, MarketplaceCustomerEstimatedCostPoliciesListResponse, MarketplaceCustomerEstimatedCostPoliciesCreateData, MarketplaceCustomerEstimatedCostPoliciesCreateResponse, MarketplaceCustomerEstimatedCostPoliciesDestroyData, MarketplaceCustomerEstimatedCostPoliciesDestroyResponse, MarketplaceCustomerEstimatedCostPoliciesRetrieveData, MarketplaceCustomerEstimatedCostPoliciesRetrieveResponse, MarketplaceCustomerEstimatedCostPoliciesPartialUpdateData, MarketplaceCustomerEstimatedCostPoliciesPartialUpdateResponse, MarketplaceCustomerEstimatedCostPoliciesUpdateData, MarketplaceCustomerEstimatedCostPoliciesUpdateResponse, MarketplaceCustomerEstimatedCostPoliciesActionsRetrieveData, MarketplaceCustomerEstimatedCostPoliciesActionsRetrieveResponse, MarketplaceGlobalCategoriesRetrieveData, MarketplaceGlobalCategoriesRetrieveResponse, MarketplaceIntegrationStatusesListData, MarketplaceIntegrationStatusesListResponse, MarketplaceIntegrationStatusesRetrieveData, MarketplaceIntegrationStatusesRetrieveResponse, MarketplaceOfferingEstimatedCostPoliciesListData, MarketplaceOfferingEstimatedCostPoliciesListResponse, MarketplaceOfferingEstimatedCostPoliciesCreateData, MarketplaceOfferingEstimatedCostPoliciesCreateResponse, MarketplaceOfferingEstimatedCostPoliciesDestroyData, MarketplaceOfferingEstimatedCostPoliciesDestroyResponse, MarketplaceOfferingEstimatedCostPoliciesRetrieveData, MarketplaceOfferingEstimatedCostPoliciesRetrieveResponse, MarketplaceOfferingEstimatedCostPoliciesPartialUpdateData, MarketplaceOfferingEstimatedCostPoliciesPartialUpdateResponse, MarketplaceOfferingEstimatedCostPoliciesUpdateData, MarketplaceOfferingEstimatedCostPoliciesUpdateResponse, MarketplaceOfferingEstimatedCostPoliciesActionsRetrieveData, MarketplaceOfferingEstimatedCostPoliciesActionsRetrieveResponse, MarketplaceOfferingFilesListData, MarketplaceOfferingFilesListResponse, MarketplaceOfferingFilesCreateData, MarketplaceOfferingFilesCreateResponse, MarketplaceOfferingFilesDestroyData, MarketplaceOfferingFilesDestroyResponse, MarketplaceOfferingFilesRetrieveData, MarketplaceOfferingFilesRetrieveResponse, MarketplaceOfferingPermissionsListData, MarketplaceOfferingPermissionsListResponse, MarketplaceOfferingPermissionsLogListData, MarketplaceOfferingPermissionsLogListResponse, MarketplaceOfferingPermissionsLogRetrieveData, MarketplaceOfferingPermissionsLogRetrieveResponse, MarketplaceOfferingPermissionsRetrieveData, MarketplaceOfferingPermissionsRetrieveResponse, MarketplaceOfferingReferralsListData, MarketplaceOfferingReferralsListResponse, MarketplaceOfferingReferralsRetrieveData, MarketplaceOfferingReferralsRetrieveResponse, MarketplaceOfferingUsagePoliciesListData, MarketplaceOfferingUsagePoliciesListResponse, MarketplaceOfferingUsagePoliciesCreateData, MarketplaceOfferingUsagePoliciesCreateResponse, MarketplaceOfferingUsagePoliciesDestroyData, MarketplaceOfferingUsagePoliciesDestroyResponse, MarketplaceOfferingUsagePoliciesRetrieveData, MarketplaceOfferingUsagePoliciesRetrieveResponse, MarketplaceOfferingUsagePoliciesPartialUpdateData, MarketplaceOfferingUsagePoliciesPartialUpdateResponse, MarketplaceOfferingUsagePoliciesUpdateData, MarketplaceOfferingUsagePoliciesUpdateResponse, MarketplaceOfferingUsagePoliciesActionsRetrieveData, MarketplaceOfferingUsagePoliciesActionsRetrieveResponse, MarketplaceOfferingUserRolesListData, MarketplaceOfferingUserRolesListResponse, MarketplaceOfferingUserRolesCreateData, MarketplaceOfferingUserRolesCreateResponse, MarketplaceOfferingUserRolesDestroyData, MarketplaceOfferingUserRolesDestroyResponse, MarketplaceOfferingUserRolesRetrieveData, MarketplaceOfferingUserRolesRetrieveResponse, MarketplaceOfferingUserRolesPartialUpdateData, MarketplaceOfferingUserRolesPartialUpdateResponse, MarketplaceOfferingUserRolesUpdateData, MarketplaceOfferingUserRolesUpdateResponse, MarketplaceOfferingUsersListData, MarketplaceOfferingUsersListResponse, MarketplaceOfferingUsersCreateData, MarketplaceOfferingUsersCreateResponse, MarketplaceOfferingUsersDestroyData, MarketplaceOfferingUsersDestroyResponse, MarketplaceOfferingUsersRetrieveData, MarketplaceOfferingUsersRetrieveResponse, MarketplaceOfferingUsersPartialUpdateData, MarketplaceOfferingUsersPartialUpdateResponse, MarketplaceOfferingUsersUpdateData, MarketplaceOfferingUsersUpdateResponse, MarketplaceOfferingUsersUpdateRestrictedData, MarketplaceOrdersListData, MarketplaceOrdersListResponse, MarketplaceOrdersCreateData, MarketplaceOrdersCreateResponse, MarketplaceOrdersDestroyData, MarketplaceOrdersDestroyResponse, MarketplaceOrdersRetrieveData, MarketplaceOrdersRetrieveResponse, MarketplaceOrdersApproveByConsumerData, MarketplaceOrdersApproveByProviderData, MarketplaceOrdersCancelData, MarketplaceOrdersOfferingRetrieveData, MarketplaceOrdersOfferingRetrieveResponse, MarketplaceOrdersRejectByConsumerData, MarketplaceOrdersRejectByProviderData, MarketplaceOrdersSetStateDoneData, MarketplaceOrdersSetStateErredData, MarketplaceOrdersSetStateExecutingData, MarketplaceOrdersUnlinkData, MarketplaceOrdersUnlinkResponse, MarketplacePlanComponentsListData, MarketplacePlanComponentsListResponse, MarketplacePlanComponentsRetrieveData, MarketplacePlanComponentsRetrieveResponse, MarketplacePlansListData, MarketplacePlansListResponse, MarketplacePlansCreateData, MarketplacePlansCreateResponse, MarketplacePlansRetrieveData, MarketplacePlansRetrieveResponse, MarketplacePlansPartialUpdateData, MarketplacePlansPartialUpdateResponse, MarketplacePlansUpdateData, MarketplacePlansUpdateResponse, MarketplacePlansArchiveData, MarketplacePlansDeleteOrganizationGroupsData, MarketplacePlansUpdateOrganizationGroupsData, MarketplacePlansUpdatePricesData, MarketplacePlansUpdateQuotasData, MarketplacePlansUsageStatsListData, MarketplacePlansUsageStatsListResponse, MarketplacePluginsListData, MarketplacePluginsListResponse, MarketplaceProjectEstimatedCostPoliciesListData, MarketplaceProjectEstimatedCostPoliciesListResponse, MarketplaceProjectEstimatedCostPoliciesCreateData, MarketplaceProjectEstimatedCostPoliciesCreateResponse, MarketplaceProjectEstimatedCostPoliciesDestroyData, MarketplaceProjectEstimatedCostPoliciesDestroyResponse, MarketplaceProjectEstimatedCostPoliciesRetrieveData, MarketplaceProjectEstimatedCostPoliciesRetrieveResponse, MarketplaceProjectEstimatedCostPoliciesPartialUpdateData, MarketplaceProjectEstimatedCostPoliciesPartialUpdateResponse, MarketplaceProjectEstimatedCostPoliciesUpdateData, MarketplaceProjectEstimatedCostPoliciesUpdateResponse, MarketplaceProjectEstimatedCostPoliciesActionsRetrieveData, MarketplaceProjectEstimatedCostPoliciesActionsRetrieveResponse, MarketplaceProjectUpdateRequestsListData, MarketplaceProjectUpdateRequestsListResponse, MarketplaceProjectUpdateRequestsRetrieveData, MarketplaceProjectUpdateRequestsRetrieveResponse, MarketplaceProjectUpdateRequestsApproveData, MarketplaceProjectUpdateRequestsRejectData, MarketplaceProviderOfferingsListData, MarketplaceProviderOfferingsListResponse, MarketplaceProviderOfferingsCreateData, MarketplaceProviderOfferingsCreateResponse, MarketplaceProviderOfferingsDestroyData, MarketplaceProviderOfferingsDestroyResponse, MarketplaceProviderOfferingsRetrieveData, MarketplaceProviderOfferingsRetrieveResponse, MarketplaceProviderOfferingsActivateData, MarketplaceProviderOfferingsActivateResponse, MarketplaceProviderOfferingsAddEndpointData, MarketplaceProviderOfferingsAddEndpointResponse, MarketplaceProviderOfferingsAddUserData, MarketplaceProviderOfferingsAddUserResponse, MarketplaceProviderOfferingsArchiveData, MarketplaceProviderOfferingsArchiveResponse, MarketplaceProviderOfferingsComponentStatsListData, MarketplaceProviderOfferingsComponentStatsListResponse, MarketplaceProviderOfferingsCostsListData, MarketplaceProviderOfferingsCostsListResponse, MarketplaceProviderOfferingsCreateOfferingComponentData, MarketplaceProviderOfferingsCustomersListData, MarketplaceProviderOfferingsCustomersListResponse, MarketplaceProviderOfferingsDeleteEndpointData, MarketplaceProviderOfferingsDeleteEndpointResponse, MarketplaceProviderOfferingsDeleteImageData, MarketplaceProviderOfferingsDeleteOrganizationGroupsData, MarketplaceProviderOfferingsDeleteThumbnailData, MarketplaceProviderOfferingsDeleteThumbnailResponse, MarketplaceProviderOfferingsDeleteUserData, MarketplaceProviderOfferingsDraftData, MarketplaceProviderOfferingsDraftResponse, MarketplaceProviderOfferingsGlauthUsersConfigRetrieveData, MarketplaceProviderOfferingsGlauthUsersConfigRetrieveResponse, MarketplaceProviderOfferingsImportResourceData, MarketplaceProviderOfferingsImportResourceResponse, MarketplaceProviderOfferingsImportableResourcesListData, MarketplaceProviderOfferingsImportableResourcesListResponse, MarketplaceProviderOfferingsListCustomerProjectsListData, MarketplaceProviderOfferingsListCustomerProjectsListResponse, MarketplaceProviderOfferingsListCustomerUsersListData, MarketplaceProviderOfferingsListCustomerUsersListResponse, MarketplaceProviderOfferingsListUsersListData, MarketplaceProviderOfferingsListUsersListResponse, MarketplaceProviderOfferingsOrdersListData, MarketplaceProviderOfferingsOrdersListResponse, MarketplaceProviderOfferingsOrdersRetrieveData, MarketplaceProviderOfferingsOrdersRetrieveResponse, MarketplaceProviderOfferingsPauseData, MarketplaceProviderOfferingsPauseResponse, MarketplaceProviderOfferingsRefreshOfferingUsernamesData, MarketplaceProviderOfferingsRefreshOfferingUsernamesResponse, MarketplaceProviderOfferingsRemoveOfferingComponentData, MarketplaceProviderOfferingsSetBackendMetadataData, MarketplaceProviderOfferingsStatsRetrieveData, MarketplaceProviderOfferingsStatsRetrieveResponse, MarketplaceProviderOfferingsSyncData, MarketplaceProviderOfferingsUnpauseData, MarketplaceProviderOfferingsUnpauseResponse, MarketplaceProviderOfferingsUpdateAttributesData, MarketplaceProviderOfferingsUpdateDescriptionData, MarketplaceProviderOfferingsUpdateImageData, MarketplaceProviderOfferingsUpdateImageResponse, MarketplaceProviderOfferingsUpdateIntegrationData, MarketplaceProviderOfferingsUpdateLocationData, MarketplaceProviderOfferingsUpdateOfferingComponentData, MarketplaceProviderOfferingsUpdateOptionsData, MarketplaceProviderOfferingsUpdateOrganizationGroupsData, MarketplaceProviderOfferingsUpdateOverviewData, MarketplaceProviderOfferingsUpdateResourceOptionsData, MarketplaceProviderOfferingsUpdateThumbnailData, MarketplaceProviderOfferingsUpdateUserData, MarketplaceProviderOfferingsUpdateUserResponse, MarketplaceProviderOfferingsUserHasResourceAccessRetrieveData, MarketplaceProviderOfferingsUserHasResourceAccessRetrieveResponse, MarketplaceProviderOfferingsGroupsRetrieveData, MarketplaceProviderOfferingsGroupsRetrieveResponse, MarketplaceProviderResourcesListData, MarketplaceProviderResourcesListResponse, MarketplaceProviderResourcesRetrieveData, MarketplaceProviderResourcesRetrieveResponse, MarketplaceProviderResourcesPartialUpdateData, MarketplaceProviderResourcesPartialUpdateResponse, MarketplaceProviderResourcesUpdateData, MarketplaceProviderResourcesUpdateResponse, MarketplaceProviderResourcesDetailsRetrieveData, MarketplaceProviderResourcesDetailsRetrieveResponse, MarketplaceProviderResourcesGlauthUsersConfigRetrieveData, MarketplaceProviderResourcesGlauthUsersConfigRetrieveResponse, MarketplaceProviderResourcesMoveResourceData, MarketplaceProviderResourcesMoveResourceResponse, MarketplaceProviderResourcesOfferingRetrieveData, MarketplaceProviderResourcesOfferingRetrieveResponse, MarketplaceProviderResourcesOfferingForSubresourcesListData, MarketplaceProviderResourcesOfferingForSubresourcesListResponse, MarketplaceProviderResourcesPlanPeriodsListData, MarketplaceProviderResourcesPlanPeriodsListResponse, MarketplaceProviderResourcesRefreshLastSyncData, MarketplaceProviderResourcesRefreshLastSyncResponse, MarketplaceProviderResourcesSetAsErredData, MarketplaceProviderResourcesSetAsErredResponse, MarketplaceProviderResourcesSetAsOkData, MarketplaceProviderResourcesSetAsOkResponse, MarketplaceProviderResourcesSetBackendIdData, MarketplaceProviderResourcesSetBackendIdResponse, MarketplaceProviderResourcesSetBackendMetadataData, MarketplaceProviderResourcesSetBackendMetadataResponse, MarketplaceProviderResourcesSetEndDateByProviderData, MarketplaceProviderResourcesSetEndDateByProviderResponse, MarketplaceProviderResourcesSetEndDateByStaffData, MarketplaceProviderResourcesSetLimitsData, MarketplaceProviderResourcesSetLimitsResponse, MarketplaceProviderResourcesSetSlugData, MarketplaceProviderResourcesSubmitReportData, MarketplaceProviderResourcesSubmitReportResponse, MarketplaceProviderResourcesTeamListData, MarketplaceProviderResourcesTeamListResponse, MarketplaceProviderResourcesTerminateData, MarketplaceProviderResourcesTerminateResponse, MarketplaceProviderResourcesUnlinkData, MarketplacePublicApiCheckSignatureData, MarketplacePublicApiCheckSignatureResponse, MarketplacePublicApiSetUsageData, MarketplacePublicApiSetUsageResponse, MarketplacePublicOfferingsListData, MarketplacePublicOfferingsListResponse, MarketplacePublicOfferingsRetrieveData, MarketplacePublicOfferingsRetrieveResponse, MarketplacePublicOfferingsPlansListData, MarketplacePublicOfferingsPlansListResponse, MarketplacePublicOfferingsPlansRetrieveData, MarketplacePublicOfferingsPlansRetrieveResponse, MarketplaceRelatedCustomersListData, MarketplaceRelatedCustomersListResponse, MarketplaceRemoteSynchronisationsListData, MarketplaceRemoteSynchronisationsListResponse, MarketplaceRemoteSynchronisationsCreateData, MarketplaceRemoteSynchronisationsCreateResponse, MarketplaceRemoteSynchronisationsDestroyData, MarketplaceRemoteSynchronisationsDestroyResponse, MarketplaceRemoteSynchronisationsRetrieveData, MarketplaceRemoteSynchronisationsRetrieveResponse, MarketplaceRemoteSynchronisationsPartialUpdateData, MarketplaceRemoteSynchronisationsPartialUpdateResponse, MarketplaceRemoteSynchronisationsUpdateData, MarketplaceRemoteSynchronisationsUpdateResponse, MarketplaceRemoteSynchronisationsRunSynchronisationData, MarketplaceRemoteSynchronisationsRunSynchronisationResponse, MarketplaceResourceOfferingsListData, MarketplaceResourceOfferingsListResponse, MarketplaceResourceUsersListData, MarketplaceResourceUsersListResponse, MarketplaceResourceUsersCreateData, MarketplaceResourceUsersCreateResponse, MarketplaceResourceUsersDestroyData, MarketplaceResourceUsersDestroyResponse, MarketplaceResourceUsersRetrieveData, MarketplaceResourceUsersRetrieveResponse, MarketplaceResourcesListData, MarketplaceResourcesListResponse, MarketplaceResourcesRetrieveData, MarketplaceResourcesRetrieveResponse, MarketplaceResourcesPartialUpdateData, MarketplaceResourcesPartialUpdateResponse, MarketplaceResourcesUpdateData, MarketplaceResourcesUpdateResponse, MarketplaceResourcesDetailsRetrieveData, MarketplaceResourcesDetailsRetrieveResponse, MarketplaceResourcesGlauthUsersConfigRetrieveData, MarketplaceResourcesGlauthUsersConfigRetrieveResponse, MarketplaceResourcesMoveResourceData, MarketplaceResourcesMoveResourceResponse, MarketplaceResourcesOfferingRetrieveData, MarketplaceResourcesOfferingRetrieveResponse, MarketplaceResourcesOfferingForSubresourcesListData, MarketplaceResourcesOfferingForSubresourcesListResponse, MarketplaceResourcesPlanPeriodsListData, MarketplaceResourcesPlanPeriodsListResponse, MarketplaceResourcesSetEndDateByStaffData, MarketplaceResourcesSetSlugData, MarketplaceResourcesSwitchPlanData, MarketplaceResourcesSwitchPlanResponse, MarketplaceResourcesTeamListData, MarketplaceResourcesTeamListResponse, MarketplaceResourcesTerminateData, MarketplaceResourcesTerminateResponse, MarketplaceResourcesUnlinkData, MarketplaceResourcesUpdateLimitsData, MarketplaceResourcesUpdateLimitsResponse, MarketplaceResourcesUpdateOptionsData, MarketplaceResourcesUpdateOptionsResponse, MarketplaceResourcesSuggestNameData, MarketplaceResourcesSuggestNameResponse, MarketplaceRobotAccountsListData, MarketplaceRobotAccountsListResponse, MarketplaceRobotAccountsCreateData, MarketplaceRobotAccountsCreateResponse, MarketplaceRobotAccountsDestroyData, MarketplaceRobotAccountsDestroyResponse, MarketplaceRobotAccountsRetrieveData, MarketplaceRobotAccountsRetrieveResponse, MarketplaceRobotAccountsPartialUpdateData, MarketplaceRobotAccountsPartialUpdateResponse, MarketplaceRobotAccountsUpdateData, MarketplaceRobotAccountsUpdateResponse, MarketplaceRobotAccountsSetStateCreatingData, MarketplaceRobotAccountsSetStateCreatingResponse, MarketplaceRobotAccountsSetStateCreatingError, MarketplaceRobotAccountsSetStateDeletedData, MarketplaceRobotAccountsSetStateDeletedResponse, MarketplaceRobotAccountsSetStateErredData, MarketplaceRobotAccountsSetStateErredResponse, MarketplaceRobotAccountsSetStateOkData, MarketplaceRobotAccountsSetStateOkResponse, MarketplaceRobotAccountsSetStateRequestDeletionData, MarketplaceRobotAccountsSetStateRequestDeletionResponse, MarketplaceRuntimeStatesListData, MarketplaceRuntimeStatesListResponse, MarketplaceScreenshotsListData, MarketplaceScreenshotsListResponse, MarketplaceScreenshotsCreateData, MarketplaceScreenshotsCreateResponse, MarketplaceScreenshotsDestroyData, MarketplaceScreenshotsDestroyResponse, MarketplaceScreenshotsRetrieveData, MarketplaceScreenshotsRetrieveResponse, MarketplaceScreenshotsPartialUpdateData, MarketplaceScreenshotsPartialUpdateResponse, MarketplaceScreenshotsUpdateData, MarketplaceScreenshotsUpdateResponse, MarketplaceScriptAsyncDryRunListData, MarketplaceScriptAsyncDryRunListResponse, MarketplaceScriptAsyncDryRunRetrieveData, MarketplaceScriptAsyncDryRunRetrieveResponse, MarketplaceScriptDryRunAsyncRunData, MarketplaceScriptDryRunAsyncRunResponse, MarketplaceScriptDryRunRunData, MarketplaceScriptDryRunRunResponse, MarketplaceScriptSyncResourceData, MarketplaceSectionsListData, MarketplaceSectionsListResponse, MarketplaceSectionsCreateData, MarketplaceSectionsCreateResponse, MarketplaceSectionsDestroyData, MarketplaceSectionsDestroyResponse, MarketplaceSectionsRetrieveData, MarketplaceSectionsRetrieveResponse, MarketplaceSectionsPartialUpdateData, MarketplaceSectionsPartialUpdateResponse, MarketplaceSectionsUpdateData, MarketplaceSectionsUpdateResponse, MarketplaceServiceProvidersListData, MarketplaceServiceProvidersListResponse, MarketplaceServiceProvidersCreateData, MarketplaceServiceProvidersCreateResponse, MarketplaceServiceProvidersCustomerProjectsListData, MarketplaceServiceProvidersCustomerProjectsListResponse, MarketplaceServiceProvidersCustomersListData, MarketplaceServiceProvidersCustomersListResponse, MarketplaceServiceProvidersKeysListData, MarketplaceServiceProvidersKeysListResponse, MarketplaceServiceProvidersOfferingsListData, MarketplaceServiceProvidersOfferingsListResponse, MarketplaceServiceProvidersProjectPermissionsListData, MarketplaceServiceProvidersProjectPermissionsListResponse, MarketplaceServiceProvidersProjectsListData, MarketplaceServiceProvidersProjectsListResponse, MarketplaceServiceProvidersUserCustomersListData, MarketplaceServiceProvidersUserCustomersListResponse, MarketplaceServiceProvidersUsersListData, MarketplaceServiceProvidersUsersListResponse, MarketplaceServiceProvidersDestroyData, MarketplaceServiceProvidersDestroyResponse, MarketplaceServiceProvidersRetrieveData, MarketplaceServiceProvidersRetrieveResponse, MarketplaceServiceProvidersPartialUpdateData, MarketplaceServiceProvidersPartialUpdateResponse, MarketplaceServiceProvidersUpdateData, MarketplaceServiceProvidersUpdateResponse, MarketplaceServiceProvidersAddUserData, MarketplaceServiceProvidersAddUserResponse, ServiceProviderApiSecretCodeRetrieveData, ServiceProviderApiSecretCodeRetrieveResponse, ServiceProviderApiSecretCodeGenerateData, ServiceProviderApiSecretCodeGenerateResponse, MarketplaceServiceProvidersDeleteUserData, MarketplaceServiceProvidersListUsersListData, MarketplaceServiceProvidersListUsersListResponse, MarketplaceServiceProvidersRevenueListData, MarketplaceServiceProvidersRevenueListResponse, MarketplaceServiceProvidersRobotAccountCustomersListData, MarketplaceServiceProvidersRobotAccountCustomersListResponse, MarketplaceServiceProvidersRobotAccountProjectsListData, MarketplaceServiceProvidersRobotAccountProjectsListResponse, MarketplaceServiceProvidersSetOfferingsUsernameData, MarketplaceServiceProvidersSetOfferingsUsernameResponse, MarketplaceServiceProvidersStatRetrieveData, MarketplaceServiceProvidersStatRetrieveResponse, MarketplaceServiceProvidersUpdateUserData, MarketplaceServiceProvidersUpdateUserResponse, MarketplaceStatsComponentUsagesRetrieveData, MarketplaceStatsComponentUsagesPerMonthRetrieveData, MarketplaceStatsComponentUsagesPerProjectRetrieveData, MarketplaceStatsCountActiveResourcesGroupedByOfferingListData, MarketplaceStatsCountActiveResourcesGroupedByOfferingListResponse, MarketplaceStatsCountActiveResourcesGroupedByOfferingCountryListData, MarketplaceStatsCountActiveResourcesGroupedByOfferingCountryListResponse, MarketplaceStatsCountActiveResourcesGroupedByOrganizationGroupListData, MarketplaceStatsCountActiveResourcesGroupedByOrganizationGroupListResponse, MarketplaceStatsCountProjectsGroupedByProviderAndIndustryFlagListData, MarketplaceStatsCountProjectsGroupedByProviderAndIndustryFlagListResponse, MarketplaceStatsCountProjectsGroupedByProviderAndOecdListData, MarketplaceStatsCountProjectsGroupedByProviderAndOecdListResponse, MarketplaceStatsCountProjectsOfServiceProvidersRetrieveData, MarketplaceStatsCountProjectsOfServiceProvidersGroupedByOecdRetrieveData, MarketplaceStatsCountUniqueUsersConnectedWithActiveResourcesOfServiceProviderRetrieveData, MarketplaceStatsCountUsersOfServiceProvidersRetrieveData, MarketplaceStatsCustomerMemberCountListData, MarketplaceStatsCustomerMemberCountListResponse, MarketplaceStatsOfferingsCounterStatsListData, MarketplaceStatsOfferingsCounterStatsListResponse, MarketplaceStatsOrganizationProjectCountListData, MarketplaceStatsOrganizationProjectCountListResponse, MarketplaceStatsOrganizationResourceCountListData, MarketplaceStatsOrganizationResourceCountListResponse, MarketplaceStatsProjectsLimitsGroupedByIndustryFlagRetrieveData, MarketplaceStatsProjectsLimitsGroupedByOecdRetrieveData, MarketplaceStatsProjectsUsagesGroupedByIndustryFlagRetrieveData, MarketplaceStatsProjectsUsagesGroupedByOecdRetrieveData, MarketplaceStatsResourcesLimitsRetrieveData, MarketplaceStatsTotalCostOfActiveResourcesPerOfferingRetrieveData, MediaRetrieveData, MediaRetrieveResponse, NotificationMessagesListData, NotificationMessagesListResponse, NotificationMessagesCreateData, NotificationMessagesCreateResponse, NotificationMessagesTemplatesListData, NotificationMessagesTemplatesListResponse, NotificationMessagesTemplatesCreateData, NotificationMessagesTemplatesCreateResponse, NotificationMessagesTemplatesDestroyData, NotificationMessagesTemplatesDestroyResponse, NotificationMessagesTemplatesRetrieveData, NotificationMessagesTemplatesRetrieveResponse, NotificationMessagesTemplatesPartialUpdateData, NotificationMessagesTemplatesPartialUpdateResponse, NotificationMessagesTemplatesUpdateData, NotificationMessagesTemplatesUpdateResponse, NotificationMessagesTemplatesOverrideData, NotificationMessagesDestroyData, NotificationMessagesDestroyResponse, NotificationMessagesRetrieveData, NotificationMessagesRetrieveResponse, NotificationMessagesPartialUpdateData, NotificationMessagesPartialUpdateResponse, NotificationMessagesUpdateData, NotificationMessagesUpdateResponse, NotificationMessagesDisableData, NotificationMessagesEnableData, OpenstackBackupsListData, OpenstackBackupsListResponse, OpenstackBackupsDestroyData, OpenstackBackupsDestroyResponse, OpenstackBackupsRetrieveData, OpenstackBackupsRetrieveResponse, OpenstackBackupsPartialUpdateData, OpenstackBackupsPartialUpdateResponse, OpenstackBackupsUpdateData, OpenstackBackupsUpdateResponse, OpenstackBackupsPullData, OpenstackBackupsRestoreData, OpenstackBackupsRestoreResponse, OpenstackBackupsUnlinkData, OpenstackFlavorsListData, OpenstackFlavorsListResponse, OpenstackFlavorsRetrieveData, OpenstackFlavorsRetrieveResponse, OpenstackFlavorsUsageStatsRetrieveData, OpenstackFlavorsUsageStatsRetrieveResponse, OpenstackFloatingIpsListData, OpenstackFloatingIpsListResponse, OpenstackFloatingIpsDestroyData, OpenstackFloatingIpsDestroyResponse, OpenstackFloatingIpsRetrieveData, OpenstackFloatingIpsRetrieveResponse, OpenstackFloatingIpsAttachToPortData, OpenstackFloatingIpsDetachFromPortData, OpenstackFloatingIpsPullData, OpenstackFloatingIpsUnlinkData, OpenstackFloatingIpsUpdateDescriptionData, OpenstackImagesListData, OpenstackImagesListResponse, OpenstackImagesRetrieveData, OpenstackImagesRetrieveResponse, OpenstackImagesUsageStatsRetrieveData, OpenstackImagesUsageStatsRetrieveResponse, OpenstackInstanceAvailabilityZonesListData, OpenstackInstanceAvailabilityZonesListResponse, OpenstackInstanceAvailabilityZonesRetrieveData, OpenstackInstanceAvailabilityZonesRetrieveResponse, OpenstackInstancesListData, OpenstackInstancesListResponse, OpenstackInstancesRetrieveData, OpenstackInstancesRetrieveResponse, OpenstackInstancesPartialUpdateData, OpenstackInstancesPartialUpdateResponse, OpenstackInstancesUpdateData, OpenstackInstancesUpdateResponse, OpenstackInstancesBackupData, OpenstackInstancesBackupResponse, OpenstackInstancesChangeFlavorData, OpenstackInstancesConsoleRetrieveData, OpenstackInstancesConsoleRetrieveResponse, OpenstackInstancesConsoleLogRetrieveData, OpenstackInstancesConsoleLogRetrieveResponse, OpenstackInstancesFloatingIpsListData, OpenstackInstancesFloatingIpsListResponse, OpenstackInstancesPortsListData, OpenstackInstancesPortsListResponse, OpenstackInstancesPullData, OpenstackInstancesRestartData, OpenstackInstancesStartData, OpenstackInstancesStopData, OpenstackInstancesUnlinkData, OpenstackInstancesUpdateAllowedAddressPairsData, OpenstackInstancesUpdateFloatingIpsData, OpenstackInstancesUpdatePortsData, OpenstackInstancesUpdateSecurityGroupsData, OpenstackMigrationsListData, OpenstackMigrationsListResponse, OpenstackMigrationsCreateData, OpenstackMigrationsCreateResponse, OpenstackMigrationsDestroyData, OpenstackMigrationsDestroyResponse, OpenstackMigrationsRetrieveData, OpenstackMigrationsRetrieveResponse, OpenstackMigrationsPartialUpdateData, OpenstackMigrationsPartialUpdateResponse, OpenstackMigrationsUpdateData, OpenstackMigrationsUpdateResponse, OpenstackMigrationsRunData, OpenstackNetworksListData, OpenstackNetworksListResponse, OpenstackNetworksDestroyData, OpenstackNetworksDestroyResponse, OpenstackNetworksRetrieveData, OpenstackNetworksRetrieveResponse, OpenstackNetworksPartialUpdateData, OpenstackNetworksPartialUpdateResponse, OpenstackNetworksUpdateData, OpenstackNetworksUpdateResponse, OpenstackNetworksCreatePortData, OpenstackNetworksCreatePortResponse, OpenstackNetworksCreateSubnetData, OpenstackNetworksCreateSubnetResponse, OpenstackNetworksPullData, OpenstackNetworksSetMtuData, OpenstackNetworksSetMtuResponse, OpenstackNetworksUnlinkData, OpenstackPortsListData, OpenstackPortsListResponse, OpenstackPortsDestroyData, OpenstackPortsDestroyResponse, OpenstackPortsRetrieveData, OpenstackPortsRetrieveResponse, OpenstackPortsPullData, OpenstackPortsUnlinkData, OpenstackRoutersListData, OpenstackRoutersListResponse, OpenstackRoutersRetrieveData, OpenstackRoutersRetrieveResponse, OpenstackRoutersSetRoutesData, OpenstackRoutersSetRoutesResponse, OpenstackSecurityGroupsListData, OpenstackSecurityGroupsListResponse, OpenstackSecurityGroupsDestroyData, OpenstackSecurityGroupsDestroyResponse, OpenstackSecurityGroupsRetrieveData, OpenstackSecurityGroupsRetrieveResponse, OpenstackSecurityGroupsPartialUpdateData, OpenstackSecurityGroupsPartialUpdateResponse, OpenstackSecurityGroupsUpdateData, OpenstackSecurityGroupsUpdateResponse, OpenstackSecurityGroupsPullData, OpenstackSecurityGroupsSetRulesData, OpenstackSecurityGroupsUnlinkData, OpenstackServerGroupsListData, OpenstackServerGroupsListResponse, OpenstackServerGroupsCreateData, OpenstackServerGroupsCreateResponse, OpenstackServerGroupsDestroyData, OpenstackServerGroupsDestroyResponse, OpenstackServerGroupsRetrieveData, OpenstackServerGroupsRetrieveResponse, OpenstackServerGroupsPartialUpdateData, OpenstackServerGroupsPartialUpdateResponse, OpenstackServerGroupsUpdateData, OpenstackServerGroupsUpdateResponse, OpenstackServerGroupsPullData, OpenstackServerGroupsUnlinkData, OpenstackSnapshotsListData, OpenstackSnapshotsListResponse, OpenstackSnapshotsDestroyData, OpenstackSnapshotsDestroyResponse, OpenstackSnapshotsRetrieveData, OpenstackSnapshotsRetrieveResponse, OpenstackSnapshotsPartialUpdateData, OpenstackSnapshotsPartialUpdateResponse, OpenstackSnapshotsUpdateData, OpenstackSnapshotsUpdateResponse, OpenstackSnapshotsPullData, OpenstackSnapshotsRestorationsListData, OpenstackSnapshotsRestorationsListResponse, OpenstackSnapshotsRestoreData, OpenstackSnapshotsRestoreResponse, OpenstackSnapshotsUnlinkData, OpenstackSubnetsListData, OpenstackSubnetsListResponse, OpenstackSubnetsDestroyData, OpenstackSubnetsDestroyResponse, OpenstackSubnetsRetrieveData, OpenstackSubnetsRetrieveResponse, OpenstackSubnetsPartialUpdateData, OpenstackSubnetsPartialUpdateResponse, OpenstackSubnetsUpdateData, OpenstackSubnetsUpdateResponse, OpenstackSubnetsConnectData, OpenstackSubnetsDisconnectData, OpenstackSubnetsPullData, OpenstackSubnetsUnlinkData, OpenstackTenantsListData, OpenstackTenantsListResponse, OpenstackTenantsCreateData, OpenstackTenantsCreateResponse, OpenstackTenantsDestroyData, OpenstackTenantsDestroyResponse, OpenstackTenantsRetrieveData, OpenstackTenantsRetrieveResponse, OpenstackTenantsPartialUpdateData, OpenstackTenantsPartialUpdateResponse, OpenstackTenantsUpdateData, OpenstackTenantsUpdateResponse, OpenstackTenantsBackendInstancesListData, OpenstackTenantsBackendInstancesListResponse, OpenstackTenantsBackendVolumesListData, OpenstackTenantsBackendVolumesListResponse, OpenstackTenantsChangePasswordData, OpenstackTenantsCreateFloatingIpData, OpenstackTenantsCreateFloatingIpResponse, OpenstackTenantsCreateNetworkData, OpenstackTenantsCreateNetworkResponse, OpenstackTenantsCreateSecurityGroupData, OpenstackTenantsCreateSecurityGroupResponse, OpenstackTenantsCreateServerGroupData, OpenstackTenantsCreateServerGroupResponse, OpenstackTenantsPullData, OpenstackTenantsPullFloatingIpsData, OpenstackTenantsPullQuotasData, OpenstackTenantsPullSecurityGroupsData, OpenstackTenantsPullSecurityGroupsResponse, OpenstackTenantsPullServerGroupsData, OpenstackTenantsPullServerGroupsResponse, OpenstackTenantsSetQuotasData, OpenstackTenantsSetQuotasResponse, OpenstackTenantsUnlinkData, OpenstackVolumeAvailabilityZonesListData, OpenstackVolumeAvailabilityZonesListResponse, OpenstackVolumeAvailabilityZonesRetrieveData, OpenstackVolumeAvailabilityZonesRetrieveResponse, OpenstackVolumeTypesListData, OpenstackVolumeTypesListResponse, OpenstackVolumeTypesRetrieveData, OpenstackVolumeTypesRetrieveResponse, OpenstackVolumesListData, OpenstackVolumesListResponse, OpenstackVolumesRetrieveData, OpenstackVolumesRetrieveResponse, OpenstackVolumesPartialUpdateData, OpenstackVolumesPartialUpdateResponse, OpenstackVolumesUpdateData, OpenstackVolumesUpdateResponse, OpenstackVolumesAttachData, OpenstackVolumesDetachData, OpenstackVolumesExtendData, OpenstackVolumesPullData, OpenstackVolumesRetypeData, OpenstackVolumesSnapshotData, OpenstackVolumesSnapshotResponse, OpenstackVolumesUnlinkData, OrganizationGroupsListData, OrganizationGroupsListResponse, OrganizationGroupsCreateData, OrganizationGroupsCreateResponse, OrganizationGroupsDestroyData, OrganizationGroupsDestroyResponse, OrganizationGroupsRetrieveData, OrganizationGroupsRetrieveResponse, OrganizationGroupsPartialUpdateData, OrganizationGroupsPartialUpdateResponse, OrganizationGroupsUpdateData, OrganizationGroupsUpdateResponse, OverrideSettingsRetrieveData, OverrideSettingsRetrieveResponse, OverrideSettingsData, PaymentProfilesListData, PaymentProfilesListResponse, PaymentProfilesCreateData, PaymentProfilesCreateResponse, PaymentProfilesDestroyData, PaymentProfilesDestroyResponse, PaymentProfilesRetrieveData, PaymentProfilesRetrieveResponse, PaymentProfilesPartialUpdateData, PaymentProfilesPartialUpdateResponse, PaymentProfilesUpdateData, PaymentProfilesUpdateResponse, PaymentProfilesEnableData, PaymentsListData, PaymentsListResponse, PaymentsCreateData, PaymentsCreateResponse, PaymentsDestroyData, PaymentsDestroyResponse, PaymentsRetrieveData, PaymentsRetrieveResponse, PaymentsPartialUpdateData, PaymentsPartialUpdateResponse, PaymentsUpdateData, PaymentsUpdateResponse, PaymentsLinkToInvoiceData, PaymentsLinkToInvoiceResponse, PaymentsUnlinkFromInvoiceData, ProjectCreditsListData, ProjectCreditsListResponse, ProjectCreditsCreateData, ProjectCreditsCreateResponse, ProjectCreditsDestroyData, ProjectCreditsDestroyResponse, ProjectCreditsRetrieveData, ProjectCreditsRetrieveResponse, ProjectCreditsPartialUpdateData, ProjectCreditsPartialUpdateResponse, ProjectCreditsUpdateData, ProjectCreditsUpdateResponse, ProjectQuotasListData, ProjectQuotasListResponse, ProjectTypesListData, ProjectTypesListResponse, ProjectTypesRetrieveData, ProjectTypesRetrieveResponse, ProjectsListData, ProjectsListResponse, ProjectsCreateData, ProjectsCreateResponse, ProjectsMarketplaceChecklistsListData, ProjectsMarketplaceChecklistsListResponse, ProjectsDestroyData, ProjectsDestroyResponse, ProjectsRetrieveData, ProjectsRetrieveResponse, ProjectsPartialUpdateData, ProjectsPartialUpdateResponse, ProjectsUpdateData, ProjectsUpdateResponse, ProjectsAddUserData, ProjectsAddUserResponse, ProjectsDeleteUserData, ProjectsListUsersListData, ProjectsListUsersListResponse, ProjectsMoveProjectData, ProjectsMoveProjectResponse, ProjectsStatsRetrieveData, ProjectsStatsRetrieveResponse, ProjectsUpdateUserData, ProjectsUpdateUserResponse, PromotionsCampaignsListData, PromotionsCampaignsListResponse, PromotionsCampaignsCreateData, PromotionsCampaignsCreateResponse, PromotionsCampaignsDestroyData, PromotionsCampaignsDestroyResponse, PromotionsCampaignsRetrieveData, PromotionsCampaignsRetrieveResponse, PromotionsCampaignsUpdateData, PromotionsCampaignsUpdateResponse, PromotionsCampaignsActivateData, PromotionsCampaignsOrdersListData, PromotionsCampaignsOrdersListResponse, PromotionsCampaignsResourcesListData, PromotionsCampaignsResourcesListResponse, PromotionsCampaignsTerminateData, ProposalProposalsListData, ProposalProposalsListResponse, ProposalProposalsCreateData, ProposalProposalsCreateResponse, ProposalProposalsDestroyData, ProposalProposalsDestroyResponse, ProposalProposalsRetrieveData, ProposalProposalsRetrieveResponse, ProposalProposalsAddUserData, ProposalProposalsAddUserResponse, ProposalProposalsApproveData, ProposalProposalsAttachDocumentData, ProposalProposalsDeleteUserData, ProposalProposalsListUsersListData, ProposalProposalsListUsersListResponse, ProposalProposalsRejectData, ProposalProposalsResourcesListData, ProposalProposalsResourcesListResponse, ProposalProposalsResourcesSetData, ProposalProposalsResourcesSetResponse, ProposalProposalsResourcesDestroyData, ProposalProposalsResourcesDestroyResponse, ProposalProposalsResourcesRetrieveData, ProposalProposalsResourcesRetrieveResponse, ProposalProposalsResourcesPartialUpdateData, ProposalProposalsResourcesPartialUpdateResponse, ProposalProposalsResourcesUpdateData, ProposalProposalsResourcesUpdateResponse, ProposalProposalsSubmitData, ProposalProposalsUpdateProjectDetailsData, ProposalProposalsUpdateUserData, ProposalProposalsUpdateUserResponse, ProposalProtectedCallsListData, ProposalProtectedCallsListResponse, ProposalProtectedCallsCreateData, ProposalProtectedCallsCreateResponse, ProposalProtectedCallsDestroyData, ProposalProtectedCallsDestroyResponse, ProposalProtectedCallsRetrieveData, ProposalProtectedCallsRetrieveResponse, ProposalProtectedCallsPartialUpdateData, ProposalProtectedCallsPartialUpdateResponse, ProposalProtectedCallsUpdateData, ProposalProtectedCallsUpdateResponse, ProposalProtectedCallsActivateData, ProposalProtectedCallsAddUserData, ProposalProtectedCallsAddUserResponse, ProposalProtectedCallsArchiveData, ProposalProtectedCallsAttachDocumentsData, ProposalProtectedCallsDeleteUserData, ProposalProtectedCallsDetachDocumentsData, ProposalProtectedCallsListUsersListData, ProposalProtectedCallsListUsersListResponse, ProposalProtectedCallsOfferingsListData, ProposalProtectedCallsOfferingsListResponse, ProposalProtectedCallsOfferingsSetData, ProposalProtectedCallsOfferingsSetResponse, ProposalProtectedCallsOfferingsDestroyData, ProposalProtectedCallsOfferingsDestroyResponse, ProposalProtectedCallsOfferingsRetrieveData, ProposalProtectedCallsOfferingsRetrieveResponse, ProposalProtectedCallsOfferingsPartialUpdateData, ProposalProtectedCallsOfferingsPartialUpdateResponse, ProposalProtectedCallsOfferingsUpdateData, ProposalProtectedCallsOfferingsUpdateResponse, ProposalProtectedCallsRoundsListData, ProposalProtectedCallsRoundsListResponse, ProposalProtectedCallsRoundsSetData, ProposalProtectedCallsRoundsSetResponse, ProposalProtectedCallsRoundsDestroyData, ProposalProtectedCallsRoundsDestroyResponse, ProposalProtectedCallsRoundsRetrieveData, ProposalProtectedCallsRoundsRetrieveResponse, ProposalProtectedCallsRoundsPartialUpdateData, ProposalProtectedCallsRoundsPartialUpdateResponse, ProposalProtectedCallsRoundsUpdateData, ProposalProtectedCallsRoundsUpdateResponse, ProposalProtectedCallsRoundsCloseData, ProposalProtectedCallsRoundsCloseResponse, ProposalProtectedCallsUpdateUserData, ProposalProtectedCallsUpdateUserResponse, ProposalPublicCallsListData, ProposalPublicCallsListResponse, ProposalPublicCallsRetrieveData, ProposalPublicCallsRetrieveResponse, ProposalRequestedOfferingsListData, ProposalRequestedOfferingsListResponse, ProposalRequestedOfferingsRetrieveData, ProposalRequestedOfferingsRetrieveResponse, ProposalRequestedOfferingsAcceptData, ProposalRequestedOfferingsCancelData, ProposalRequestedResourcesListData, ProposalRequestedResourcesListResponse, ProposalRequestedResourcesRetrieveData, ProposalRequestedResourcesRetrieveResponse, ProposalReviewsListData, ProposalReviewsListResponse, ProposalReviewsCreateData, ProposalReviewsCreateResponse, ProposalReviewsDestroyData, ProposalReviewsDestroyResponse, ProposalReviewsRetrieveData, ProposalReviewsRetrieveResponse, ProposalReviewsPartialUpdateData, ProposalReviewsPartialUpdateResponse, ProposalReviewsUpdateData, ProposalReviewsUpdateResponse, ProposalReviewsAcceptData, ProposalReviewsRejectData, ProposalReviewsSubmitData, ProviderInvoiceItemsListData, ProviderInvoiceItemsListResponse, ProviderInvoiceItemsRetrieveData, ProviderInvoiceItemsRetrieveResponse, QueryData, QueryResponse, RabbitmqUserStatsListData, RabbitmqUserStatsListResponse, RabbitmqVhostStatsListData, RabbitmqVhostStatsListResponse, RancherAppsListData, RancherAppsListResponse, RancherAppsCreateData, RancherAppsCreateResponse, RancherAppsDestroyData, RancherAppsDestroyResponse, RancherAppsRetrieveData, RancherAppsRetrieveResponse, RancherAppsPartialUpdateData, RancherAppsPartialUpdateResponse, RancherAppsUpdateData, RancherAppsUpdateResponse, RancherAppsPullData, RancherAppsUnlinkData, RancherCatalogsListData, RancherCatalogsListResponse, RancherCatalogsCreateData, RancherCatalogsCreateResponse, RancherCatalogsDestroyData, RancherCatalogsDestroyResponse, RancherCatalogsRetrieveData, RancherCatalogsRetrieveResponse, RancherCatalogsPartialUpdateData, RancherCatalogsPartialUpdateResponse, RancherCatalogsUpdateData, RancherCatalogsUpdateResponse, RancherCatalogsRefreshData, RancherCatalogsRefreshResponse, RancherClusterTemplatesListData, RancherClusterTemplatesListResponse, RancherClusterTemplatesRetrieveData, RancherClusterTemplatesRetrieveResponse, RancherClustersListData, RancherClustersListResponse, RancherClustersCreateData, RancherClustersCreateResponse, RancherClustersDestroyData, RancherClustersDestroyResponse, RancherClustersRetrieveData, RancherClustersRetrieveResponse, RancherClustersPartialUpdateData, RancherClustersPartialUpdateResponse, RancherClustersUpdateData, RancherClustersUpdateResponse, RancherClustersCreateManagementSecurityGroupData, RancherClustersCreateManagementSecurityGroupResponse, RancherClustersImportYamlData, RancherClustersImportYamlResponse, RancherClustersKubeconfigFileRetrieveData, RancherClustersKubeconfigFileRetrieveResponse, RancherClustersPullData, RancherClustersUnlinkData, RancherHpasListData, RancherHpasListResponse, RancherHpasCreateData, RancherHpasCreateResponse, RancherHpasDestroyData, RancherHpasDestroyResponse, RancherHpasRetrieveData, RancherHpasRetrieveResponse, RancherHpasPartialUpdateData, RancherHpasPartialUpdateResponse, RancherHpasUpdateData, RancherHpasUpdateResponse, RancherHpasPullData, RancherHpasUnlinkData, RancherHpasYamlRetrieveData, RancherHpasYamlRetrieveResponse, RancherHpasYamlUpdateData, RancherHpasYamlUpdateResponse, RancherIngressesListData, RancherIngressesListResponse, RancherIngressesCreateData, RancherIngressesCreateResponse, RancherIngressesDestroyData, RancherIngressesDestroyResponse, RancherIngressesRetrieveData, RancherIngressesRetrieveResponse, RancherIngressesPartialUpdateData, RancherIngressesPartialUpdateResponse, RancherIngressesUpdateData, RancherIngressesUpdateResponse, RancherIngressesPullData, RancherIngressesUnlinkData, RancherIngressesYamlRetrieveData, RancherIngressesYamlRetrieveResponse, RancherIngressesYamlUpdateData, RancherIngressesYamlUpdateResponse, RancherNamespacesListData, RancherNamespacesListResponse, RancherNamespacesRetrieveData, RancherNamespacesRetrieveResponse, RancherNodesListData, RancherNodesListResponse, RancherNodesCreateData, RancherNodesCreateResponse, RancherNodesDestroyData, RancherNodesDestroyResponse, RancherNodesRetrieveData, RancherNodesRetrieveResponse, RancherNodesConsoleRetrieveData, RancherNodesConsoleRetrieveResponse, RancherNodesConsoleLogRetrieveData, RancherNodesConsoleLogRetrieveResponse, RancherNodesLinkOpenstackData, RancherNodesPullData, RancherNodesUnlinkData, RancherNodesUnlinkOpenstackData, RancherProjectsListData, RancherProjectsListResponse, RancherProjectsRetrieveData, RancherProjectsRetrieveResponse, RancherProjectsSecretsRetrieveData, RancherProjectsSecretsRetrieveResponse, RancherServicesListData, RancherServicesListResponse, RancherServicesCreateData, RancherServicesCreateResponse, RancherServicesDestroyData, RancherServicesDestroyResponse, RancherServicesRetrieveData, RancherServicesRetrieveResponse, RancherServicesPartialUpdateData, RancherServicesPartialUpdateResponse, RancherServicesUpdateData, RancherServicesUpdateResponse, RancherServicesPullData, RancherServicesUnlinkData, RancherServicesYamlRetrieveData, RancherServicesYamlRetrieveResponse, RancherServicesYamlUpdateData, RancherServicesYamlUpdateResponse, RancherTemplateVersionsRetrieveData, RancherTemplateVersionsRetrieveResponse, RancherTemplatesListData, RancherTemplatesListResponse, RancherTemplatesRetrieveData, RancherTemplatesRetrieveResponse, RancherUsersListData, RancherUsersListResponse, RancherUsersRetrieveData, RancherUsersRetrieveResponse, RancherWorkloadsListData, RancherWorkloadsListResponse, RancherWorkloadsCreateData, RancherWorkloadsCreateResponse, RancherWorkloadsDestroyData, RancherWorkloadsDestroyResponse, RancherWorkloadsRetrieveData, RancherWorkloadsRetrieveResponse, RancherWorkloadsPartialUpdateData, RancherWorkloadsPartialUpdateResponse, RancherWorkloadsUpdateData, RancherWorkloadsUpdateResponse, RancherWorkloadsRedeployData, RancherWorkloadsYamlRetrieveData, RancherWorkloadsYamlRetrieveResponse, RancherWorkloadsYamlUpdateData, RancherWorkloadsYamlUpdateResponse, RemoteEduteamsData, RemoteEduteamsResponse, RemoteWaldurApiCancelTerminationData, RemoteWaldurApiImportOfferingData, RemoteWaldurApiImportOfferingResponse, RemoteWaldurApiPullOfferingDetailsData, RemoteWaldurApiPullOfferingInvoicesData, RemoteWaldurApiPullOfferingOrdersData, RemoteWaldurApiPullOfferingResourcesData, RemoteWaldurApiPullOfferingRobotAccountsData, RemoteWaldurApiPullOfferingUsageData, RemoteWaldurApiPullOfferingUsersData, RemoteWaldurApiPullOrderData, RemoteWaldurApiPushProjectDataData, RemoteWaldurApiRemoteCategoriesData, RemoteWaldurApiRemoteCategoriesResponse, RemoteWaldurApiRemoteCustomersData, RemoteWaldurApiRemoteCustomersResponse, RemoteWaldurApiSharedOfferingsData, RemoteWaldurApiSharedOfferingsResponse, RemoteWaldurApiSyncResourceData, RemoteWaldurApiSyncResourceProjectPermissionsData, RolesListData, RolesListResponse, RolesCreateData, RolesCreateResponse, RolesDestroyData, RolesDestroyResponse, RolesRetrieveData, RolesRetrieveResponse, RolesPartialUpdateData, RolesPartialUpdateResponse, RolesUpdateData, RolesUpdateResponse, RolesDisableData, RolesEnableData, RolesUpdateDescriptionsUpdateData, RolesUpdateDescriptionsUpdateResponse, ServiceSettingsListData, ServiceSettingsListResponse, ServiceSettingsRetrieveData, ServiceSettingsRetrieveResponse, SlurmAllocationUserUsageListData, SlurmAllocationUserUsageListResponse, SlurmAllocationUserUsageRetrieveData, SlurmAllocationUserUsageRetrieveResponse, SlurmAllocationsListData, SlurmAllocationsListResponse, SlurmAllocationsCreateData, SlurmAllocationsCreateResponse, SlurmAllocationsDestroyData, SlurmAllocationsDestroyResponse, SlurmAllocationsRetrieveData, SlurmAllocationsRetrieveResponse, SlurmAllocationsPartialUpdateData, SlurmAllocationsPartialUpdateResponse, SlurmAllocationsUpdateData, SlurmAllocationsUpdateResponse, SlurmAllocationsPullData, SlurmAllocationsSetLimitsData, SlurmAllocationsSetLimitsResponse, SlurmAllocationsUnlinkData, SlurmAssociationsListData, SlurmAssociationsListResponse, SlurmAssociationsRetrieveData, SlurmAssociationsRetrieveResponse, SlurmJobsListData, SlurmJobsListResponse, SlurmJobsCreateData, SlurmJobsCreateResponse, SlurmJobsDestroyData, SlurmJobsDestroyResponse, SlurmJobsRetrieveData, SlurmJobsRetrieveResponse, SlurmJobsPartialUpdateData, SlurmJobsPartialUpdateResponse, SlurmJobsUpdateData, SlurmJobsUpdateResponse, SlurmJobsPullData, SlurmJobsUnlinkData, SupportAttachmentsListData, SupportAttachmentsListResponse, SupportAttachmentsCreateData, SupportAttachmentsCreateResponse, SupportAttachmentsDestroyData, SupportAttachmentsDestroyResponse, SupportAttachmentsRetrieveData, SupportAttachmentsRetrieveResponse, SupportCommentsListData, SupportCommentsListResponse, SupportCommentsDestroyData, SupportCommentsDestroyResponse, SupportCommentsRetrieveData, SupportCommentsRetrieveResponse, SupportCommentsPartialUpdateData, SupportCommentsPartialUpdateResponse, SupportCommentsUpdateData, SupportCommentsUpdateResponse, SupportFeedbackAverageReportRetrieveData, SupportFeedbackReportRetrieveData, SupportFeedbacksListData, SupportFeedbacksListResponse, SupportFeedbacksCreateData, SupportFeedbacksCreateResponse, SupportFeedbacksRetrieveData, SupportFeedbacksRetrieveResponse, SupportIssuesListData, SupportIssuesListResponse, SupportIssuesCreateData, SupportIssuesCreateResponse, SupportIssuesDestroyData, SupportIssuesDestroyResponse, SupportIssuesRetrieveData, SupportIssuesRetrieveResponse, SupportIssuesPartialUpdateData, SupportIssuesPartialUpdateResponse, SupportIssuesUpdateData, SupportIssuesUpdateResponse, SupportIssuesCommentData, SupportIssuesCommentResponse, SupportIssuesSyncData, SupportIssuesSyncResponse, SupportJiraWebhookData, SupportJiraWebhookResponse, SupportPrioritiesListData, SupportPrioritiesListResponse, SupportPrioritiesRetrieveData, SupportPrioritiesRetrieveResponse, SupportSmaxWebhookData, SupportSmaxWebhookResponse, SupportStatisticsRetrieveData, SupportStatisticsRetrieveResponse, SupportTemplatesListData, SupportTemplatesListResponse, SupportTemplatesCreateData, SupportTemplatesCreateResponse, SupportTemplatesDestroyData, SupportTemplatesDestroyResponse, SupportTemplatesRetrieveData, SupportTemplatesRetrieveResponse, SupportTemplatesPartialUpdateData, SupportTemplatesPartialUpdateResponse, SupportTemplatesUpdateData, SupportTemplatesUpdateResponse, SupportTemplatesCreateAttachmentsData, SupportTemplatesDeleteAttachmentsData, SupportUsersListData, SupportUsersListResponse, SupportUsersRetrieveData, SupportUsersRetrieveResponse, SupportZammadWebhookData, SyncIssuesRetrieveData, SyncIssuesData, UserAgreementsListData, UserAgreementsListResponse, UserAgreementsCreateData, UserAgreementsCreateResponse, UserAgreementsDestroyData, UserAgreementsDestroyResponse, UserAgreementsRetrieveData, UserAgreementsRetrieveResponse, UserAgreementsPartialUpdateData, UserAgreementsPartialUpdateResponse, UserAgreementsUpdateData, UserAgreementsUpdateResponse, UserGroupInvitationsListData, UserGroupInvitationsListResponse, UserGroupInvitationsCreateData, UserGroupInvitationsCreateResponse, UserGroupInvitationsRetrieveData, UserGroupInvitationsRetrieveResponse, UserGroupInvitationsCancelData, UserGroupInvitationsProjectsListData, UserGroupInvitationsProjectsListResponse, UserGroupInvitationsSubmitRequestData, UserGroupInvitationsSubmitRequestResponse, UserInvitationsListData, UserInvitationsListResponse, UserInvitationsCreateData, UserInvitationsCreateResponse, UserInvitationsRetrieveData, UserInvitationsRetrieveResponse, UserInvitationsAcceptData, UserInvitationsCancelData, UserInvitationsCheckData, UserInvitationsCheckResponse, UserInvitationsDeleteData, UserInvitationsDetailsRetrieveData, UserInvitationsDetailsRetrieveResponse, UserInvitationsSendData, UserInvitationsApproveData, UserInvitationsRejectData, UserPermissionRequestsListData, UserPermissionRequestsListResponse, UserPermissionRequestsRetrieveData, UserPermissionRequestsRetrieveResponse, UserPermissionRequestsApproveData, UserPermissionRequestsApproveResponse, UserPermissionRequestsRejectData, UserPermissionRequestsRejectResponse, UserPermissionsListData, UserPermissionsListResponse, UserPermissionsRetrieveData, UserPermissionsRetrieveResponse, UsersListData, UsersListResponse, UsersCreateData, UsersCreateResponse, UsersMarketplaceChecklistStatsRetrieveData, UsersMarketplaceChecklistStatsRetrieveResponse, UsersDestroyData, UsersDestroyResponse, UsersRetrieveData, UsersRetrieveResponse, UsersPartialUpdateData, UsersPartialUpdateResponse, UsersUpdateData, UsersUpdateResponse, UsersCancelChangeEmailData, UsersChangeEmailData, UsersChangePasswordData, UsersPullRemoteUserData, UsersRefreshTokenData, UsersRefreshTokenResponse, UsersTokenRetrieveData, UsersTokenRetrieveResponse, UsersConfirmEmailData, UsersMeRetrieveData, UsersMeRetrieveResponse, VersionRetrieveData, VersionRetrieveResponse, VmwareClustersListData, VmwareClustersListResponse, VmwareClustersRetrieveData, VmwareClustersRetrieveResponse, VmwareDatastoresListData, VmwareDatastoresListResponse, VmwareDatastoresRetrieveData, VmwareDatastoresRetrieveResponse, VmwareDisksListData, VmwareDisksListResponse, VmwareDisksDestroyData, VmwareDisksDestroyResponse, VmwareDisksRetrieveData, VmwareDisksRetrieveResponse, VmwareDisksExtendData, VmwareDisksExtendResponse, VmwareDisksPullData, VmwareDisksUnlinkData, VmwareFoldersListData, VmwareFoldersListResponse, VmwareFoldersRetrieveData, VmwareFoldersRetrieveResponse, VmwareLimitsRetrieveData, VmwareLimitsRetrieveResponse, VmwareNetworksListData, VmwareNetworksListResponse, VmwareNetworksRetrieveData, VmwareNetworksRetrieveResponse, VmwarePortsListData, VmwarePortsListResponse, VmwarePortsDestroyData, VmwarePortsDestroyResponse, VmwarePortsRetrieveData, VmwarePortsRetrieveResponse, VmwarePortsPullData, VmwarePortsUnlinkData, VmwareTemplatesListData, VmwareTemplatesListResponse, VmwareTemplatesRetrieveData, VmwareTemplatesRetrieveResponse, VmwareVirtualMachineListData, VmwareVirtualMachineListResponse, VmwareVirtualMachineCreateData, VmwareVirtualMachineCreateResponse, VmwareVirtualMachineDestroyData, VmwareVirtualMachineDestroyResponse, VmwareVirtualMachineRetrieveData, VmwareVirtualMachineRetrieveResponse, VmwareVirtualMachinePartialUpdateData, VmwareVirtualMachinePartialUpdateResponse, VmwareVirtualMachineUpdateData, VmwareVirtualMachineUpdateResponse, VmwareVirtualMachineConsoleRetrieveData, VmwareVirtualMachineConsoleRetrieveResponse, VmwareVirtualMachineCreateDiskData, VmwareVirtualMachineCreateDiskResponse, VmwareVirtualMachineCreatePortData, VmwareVirtualMachineCreatePortResponse, VmwareVirtualMachinePullData, VmwareVirtualMachineRebootGuestData, VmwareVirtualMachineResetData, VmwareVirtualMachineShutdownGuestData, VmwareVirtualMachineStartData, VmwareVirtualMachineStopData, VmwareVirtualMachineSuspendData, VmwareVirtualMachineUnlinkData, VmwareVirtualMachineWebConsoleRetrieveData, VmwareVirtualMachineWebConsoleRetrieveResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const apiAuthEduteamsCompleteRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthEduteamsCompleteRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api-auth/eduteams/complete/',
        ...options
    });
};

/**
 * Redirect user to OIDC authorization endpoint
 */
export const apiAuthEduteamsInitRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthEduteamsInitRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api-auth/eduteams/init/',
        ...options
    });
};

export const apiAuthKeycloakCompleteRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthKeycloakCompleteRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api-auth/keycloak/complete/',
        ...options
    });
};

/**
 * Redirect user to OIDC authorization endpoint
 */
export const apiAuthKeycloakInitRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthKeycloakInitRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api-auth/keycloak/init/',
        ...options
    });
};

/**
 * Logout from the system. If single logout is supported, returns logout URL.
 */
export const apiAuthLogout = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ApiAuthLogoutResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api-auth/logout/',
        ...options
    });
};

export const apiAuthPassword = <ThrowOnError extends boolean = false>(options: Options<ApiAuthPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiAuthPasswordResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api-auth/password/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const apiAuthSaml2Login = <ThrowOnError extends boolean = false>(options: Options<ApiAuthSaml2LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiAuthSaml2LoginResponse, unknown, ThrowOnError>({
        url: '/api-auth/saml2/login/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const apiAuthSaml2LoginComplete = <ThrowOnError extends boolean = false>(options: Options<ApiAuthSaml2LoginCompleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiAuthSaml2LoginCompleteResponse, unknown, ThrowOnError>({
        url: '/api-auth/saml2/login/complete/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const apiAuthSaml2LogoutRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthSaml2LogoutRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api-auth/saml2/logout/',
        ...options
    });
};

/**
 * For IdPs which send GET requests
 */
export const apiAuthSaml2LogoutCompleteRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthSaml2LogoutCompleteRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAuthSaml2LogoutCompleteRetrieveResponse, unknown, ThrowOnError>({
        url: '/api-auth/saml2/logout/complete/',
        ...options
    });
};

/**
 * For IdPs which send POST requests
 */
export const apiAuthSaml2LogoutComplete = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthSaml2LogoutCompleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ApiAuthSaml2LogoutCompleteResponse, unknown, ThrowOnError>({
        url: '/api-auth/saml2/logout/complete/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const apiAuthSaml2ProvidersList = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthSaml2ProvidersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiAuthSaml2ProvidersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api-auth/saml2/providers/',
        ...options
    });
};

export const apiAuthTaraCompleteRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthTaraCompleteRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api-auth/tara/complete/',
        ...options
    });
};

/**
 * Redirect user to OIDC authorization endpoint
 */
export const apiAuthTaraInitRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ApiAuthTaraInitRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api-auth/tara/init/',
        ...options
    });
};

export const accessSubnetsList = <ThrowOnError extends boolean = false>(options?: Options<AccessSubnetsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AccessSubnetsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/access-subnets/',
        ...options
    });
};

export const accessSubnetsCreate = <ThrowOnError extends boolean = false>(options: Options<AccessSubnetsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AccessSubnetsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/access-subnets/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const accessSubnetsDestroy = <ThrowOnError extends boolean = false>(options: Options<AccessSubnetsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AccessSubnetsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/access-subnets/{uuid}/',
        ...options
    });
};

export const accessSubnetsRetrieve = <ThrowOnError extends boolean = false>(options: Options<AccessSubnetsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AccessSubnetsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/access-subnets/{uuid}/',
        ...options
    });
};

export const accessSubnetsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AccessSubnetsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AccessSubnetsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/access-subnets/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const accessSubnetsUpdate = <ThrowOnError extends boolean = false>(options: Options<AccessSubnetsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AccessSubnetsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/access-subnets/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const adminAnnouncementsList = <ThrowOnError extends boolean = false>(options?: Options<AdminAnnouncementsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AdminAnnouncementsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/admin-announcements/',
        ...options
    });
};

export const adminAnnouncementsCreate = <ThrowOnError extends boolean = false>(options: Options<AdminAnnouncementsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AdminAnnouncementsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/admin-announcements/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const adminAnnouncementsDestroy = <ThrowOnError extends boolean = false>(options: Options<AdminAnnouncementsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AdminAnnouncementsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/admin-announcements/{uuid}/',
        ...options
    });
};

export const adminAnnouncementsRetrieve = <ThrowOnError extends boolean = false>(options: Options<AdminAnnouncementsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AdminAnnouncementsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/admin-announcements/{uuid}/',
        ...options
    });
};

export const adminAnnouncementsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AdminAnnouncementsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AdminAnnouncementsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/admin-announcements/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const adminAnnouncementsUpdate = <ThrowOnError extends boolean = false>(options: Options<AdminAnnouncementsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AdminAnnouncementsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/admin-announcements/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const authTokensList = <ThrowOnError extends boolean = false>(options?: Options<AuthTokensListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthTokensListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/auth-tokens/',
        ...options
    });
};

export const authTokensDestroy = <ThrowOnError extends boolean = false>(options: Options<AuthTokensDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AuthTokensDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/auth-tokens/{user_id}/',
        ...options
    });
};

export const authTokensRetrieve = <ThrowOnError extends boolean = false>(options: Options<AuthTokensRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AuthTokensRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/auth-tokens/{user_id}/',
        ...options
    });
};

export const authValimoCreate = <ThrowOnError extends boolean = false>(options: Options<AuthValimoCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthValimoCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/auth-valimo/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 *
 * To get PKI login status and details - issue post request against /api/auth-valimo/result/
 * with uuid in parameters.
 *
 * Possible states:
 * - Scheduled - login process is scheduled
 * - Processing - login is in progress
 * - OK - login was successful. Response will contain token.
 * - Canceled - login was canceled by user or timed out. Field details will contain additional info.
 * - Erred - unexpected exception happened during login process.
 *
 */
export const authValimoResult = <ThrowOnError extends boolean = false>(options: Options<AuthValimoResultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthValimoResultResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/auth-valimo/result/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const awsImagesList = <ThrowOnError extends boolean = false>(options?: Options<AwsImagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AwsImagesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-images/',
        ...options
    });
};

export const awsImagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AwsImagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AwsImagesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-images/{uuid}/',
        ...options
    });
};

export const awsInstancesList = <ThrowOnError extends boolean = false>(options?: Options<AwsInstancesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AwsInstancesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-instances/',
        ...options
    });
};

export const awsInstancesCreate = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsInstancesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-instances/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const awsInstancesDestroy = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AwsInstancesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-instances/{uuid}/',
        ...options
    });
};

export const awsInstancesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AwsInstancesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-instances/{uuid}/',
        ...options
    });
};

export const awsInstancesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AwsInstancesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-instances/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const awsInstancesUpdate = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AwsInstancesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-instances/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const awsInstancesPull = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-instances/{uuid}/pull/',
        ...options
    });
};

export const awsInstancesResize = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesResizeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsInstancesResizeResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-instances/{uuid}/resize/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const awsInstancesRestart = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesRestartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-instances/{uuid}/restart/',
        ...options
    });
};

export const awsInstancesStart = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-instances/{uuid}/start/',
        ...options
    });
};

export const awsInstancesStop = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-instances/{uuid}/stop/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const awsInstancesUnlink = <ThrowOnError extends boolean = false>(options: Options<AwsInstancesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-instances/{uuid}/unlink/',
        ...options
    });
};

export const awsRegionsList = <ThrowOnError extends boolean = false>(options?: Options<AwsRegionsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AwsRegionsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-regions/',
        ...options
    });
};

export const awsRegionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<AwsRegionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AwsRegionsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-regions/{uuid}/',
        ...options
    });
};

export const awsSizesList = <ThrowOnError extends boolean = false>(options?: Options<AwsSizesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AwsSizesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-sizes/',
        ...options
    });
};

export const awsSizesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AwsSizesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AwsSizesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-sizes/{uuid}/',
        ...options
    });
};

export const awsVolumesList = <ThrowOnError extends boolean = false>(options?: Options<AwsVolumesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AwsVolumesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-volumes/',
        ...options
    });
};

export const awsVolumesCreate = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsVolumesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-volumes/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const awsVolumesDestroy = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AwsVolumesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-volumes/{uuid}/',
        ...options
    });
};

export const awsVolumesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AwsVolumesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-volumes/{uuid}/',
        ...options
    });
};

export const awsVolumesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AwsVolumesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-volumes/{uuid}/',
        ...options
    });
};

export const awsVolumesUpdate = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AwsVolumesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-volumes/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const awsVolumesAttach = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesAttachData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AwsVolumesAttachResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-volumes/{uuid}/attach/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const awsVolumesDetach = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesDetachData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-volumes/{uuid}/detach/',
        ...options
    });
};

export const awsVolumesPull = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-volumes/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const awsVolumesUnlink = <ThrowOnError extends boolean = false>(options: Options<AwsVolumesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/aws-volumes/{uuid}/unlink/',
        ...options
    });
};

export const azureImagesList = <ThrowOnError extends boolean = false>(options?: Options<AzureImagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AzureImagesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-images/',
        ...options
    });
};

export const azureImagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AzureImagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzureImagesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-images/{uuid}/',
        ...options
    });
};

export const azureLocationsList = <ThrowOnError extends boolean = false>(options?: Options<AzureLocationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AzureLocationsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-locations/',
        ...options
    });
};

export const azureLocationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<AzureLocationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzureLocationsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-locations/{uuid}/',
        ...options
    });
};

export const azurePublicIpsList = <ThrowOnError extends boolean = false>(options?: Options<AzurePublicIpsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AzurePublicIpsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-public-ips/',
        ...options
    });
};

export const azurePublicIpsCreate = <ThrowOnError extends boolean = false>(options: Options<AzurePublicIpsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzurePublicIpsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-public-ips/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const azurePublicIpsDestroy = <ThrowOnError extends boolean = false>(options: Options<AzurePublicIpsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AzurePublicIpsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-public-ips/{uuid}/',
        ...options
    });
};

export const azurePublicIpsRetrieve = <ThrowOnError extends boolean = false>(options: Options<AzurePublicIpsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzurePublicIpsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-public-ips/{uuid}/',
        ...options
    });
};

export const azurePublicIpsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AzurePublicIpsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AzurePublicIpsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-public-ips/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const azurePublicIpsUpdate = <ThrowOnError extends boolean = false>(options: Options<AzurePublicIpsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AzurePublicIpsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-public-ips/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const azurePublicIpsPull = <ThrowOnError extends boolean = false>(options: Options<AzurePublicIpsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-public-ips/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const azurePublicIpsUnlink = <ThrowOnError extends boolean = false>(options: Options<AzurePublicIpsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-public-ips/{uuid}/unlink/',
        ...options
    });
};

export const azureResourceGroupsList = <ThrowOnError extends boolean = false>(options?: Options<AzureResourceGroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AzureResourceGroupsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-resource-groups/',
        ...options
    });
};

export const azureResourceGroupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<AzureResourceGroupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzureResourceGroupsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-resource-groups/{uuid}/',
        ...options
    });
};

export const azureSizesList = <ThrowOnError extends boolean = false>(options?: Options<AzureSizesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AzureSizesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sizes/',
        ...options
    });
};

export const azureSizesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AzureSizesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzureSizesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sizes/{uuid}/',
        ...options
    });
};

export const azureSqlDatabasesList = <ThrowOnError extends boolean = false>(options?: Options<AzureSqlDatabasesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AzureSqlDatabasesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-databases/',
        ...options
    });
};

export const azureSqlDatabasesCreate = <ThrowOnError extends boolean = false>(options: Options<AzureSqlDatabasesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureSqlDatabasesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-databases/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const azureSqlDatabasesDestroy = <ThrowOnError extends boolean = false>(options: Options<AzureSqlDatabasesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AzureSqlDatabasesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-databases/{uuid}/',
        ...options
    });
};

export const azureSqlDatabasesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AzureSqlDatabasesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzureSqlDatabasesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-databases/{uuid}/',
        ...options
    });
};

export const azureSqlDatabasesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AzureSqlDatabasesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AzureSqlDatabasesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-databases/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const azureSqlDatabasesUpdate = <ThrowOnError extends boolean = false>(options: Options<AzureSqlDatabasesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AzureSqlDatabasesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-databases/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const azureSqlDatabasesPull = <ThrowOnError extends boolean = false>(options: Options<AzureSqlDatabasesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-databases/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const azureSqlDatabasesUnlink = <ThrowOnError extends boolean = false>(options: Options<AzureSqlDatabasesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-databases/{uuid}/unlink/',
        ...options
    });
};

export const azureSqlServersList = <ThrowOnError extends boolean = false>(options?: Options<AzureSqlServersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AzureSqlServersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-servers/',
        ...options
    });
};

export const azureSqlServersCreate = <ThrowOnError extends boolean = false>(options: Options<AzureSqlServersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureSqlServersCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-servers/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const azureSqlServersDestroy = <ThrowOnError extends boolean = false>(options: Options<AzureSqlServersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AzureSqlServersDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-servers/{uuid}/',
        ...options
    });
};

export const azureSqlServersRetrieve = <ThrowOnError extends boolean = false>(options: Options<AzureSqlServersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzureSqlServersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-servers/{uuid}/',
        ...options
    });
};

export const azureSqlServersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AzureSqlServersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AzureSqlServersPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-servers/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const azureSqlServersUpdate = <ThrowOnError extends boolean = false>(options: Options<AzureSqlServersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AzureSqlServersUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-servers/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const azureSqlServersCreateDatabase = <ThrowOnError extends boolean = false>(options: Options<AzureSqlServersCreateDatabaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureSqlServersCreateDatabaseResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-servers/{uuid}/create_database/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const azureSqlServersPull = <ThrowOnError extends boolean = false>(options: Options<AzureSqlServersPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-servers/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const azureSqlServersUnlink = <ThrowOnError extends boolean = false>(options: Options<AzureSqlServersUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-sql-servers/{uuid}/unlink/',
        ...options
    });
};

export const azureVirtualmachinesList = <ThrowOnError extends boolean = false>(options?: Options<AzureVirtualmachinesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AzureVirtualmachinesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-virtualmachines/',
        ...options
    });
};

export const azureVirtualmachinesCreate = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AzureVirtualmachinesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-virtualmachines/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const azureVirtualmachinesDestroy = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AzureVirtualmachinesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/',
        ...options
    });
};

export const azureVirtualmachinesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AzureVirtualmachinesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/',
        ...options
    });
};

export const azureVirtualmachinesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AzureVirtualmachinesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const azureVirtualmachinesUpdate = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AzureVirtualmachinesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const azureVirtualmachinesPull = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/pull/',
        ...options
    });
};

export const azureVirtualmachinesRestart = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesRestartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/restart/',
        ...options
    });
};

export const azureVirtualmachinesStart = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/start/',
        ...options
    });
};

export const azureVirtualmachinesStop = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/stop/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const azureVirtualmachinesUnlink = <ThrowOnError extends boolean = false>(options: Options<AzureVirtualmachinesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/azure-virtualmachines/{uuid}/unlink/',
        ...options
    });
};

export const billingTotalCostRetrieve = <ThrowOnError extends boolean = false>(options?: Options<BillingTotalCostRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BillingTotalCostRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/billing-total-cost/',
        ...options
    });
};

export const bookingOfferingsList = <ThrowOnError extends boolean = false>(options?: Options<BookingOfferingsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BookingOfferingsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/booking-offerings/',
        ...options
    });
};

export const bookingOfferingsRetrieve = <ThrowOnError extends boolean = false>(options: Options<BookingOfferingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BookingOfferingsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/booking-offerings/{uuid}/',
        ...options
    });
};

export const bookingOfferingsGoogleCalendarSync = <ThrowOnError extends boolean = false>(options: Options<BookingOfferingsGoogleCalendarSyncData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/booking-offerings/{uuid}/google_calendar_sync/',
        ...options
    });
};

export const bookingOfferingsShareGoogleCalendar = <ThrowOnError extends boolean = false>(options: Options<BookingOfferingsShareGoogleCalendarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/booking-offerings/{uuid}/share_google_calendar/',
        ...options
    });
};

export const bookingOfferingsUnshareGoogleCalendar = <ThrowOnError extends boolean = false>(options: Options<BookingOfferingsUnshareGoogleCalendarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/booking-offerings/{uuid}/unshare_google_calendar/',
        ...options
    });
};

export const bookingResourcesList = <ThrowOnError extends boolean = false>(options?: Options<BookingResourcesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BookingResourcesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/booking-resources/',
        ...options
    });
};

export const bookingResourcesRetrieve = <ThrowOnError extends boolean = false>(options: Options<BookingResourcesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BookingResourcesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/booking-resources/{uuid}/',
        ...options
    });
};

export const bookingResourcesAccept = <ThrowOnError extends boolean = false>(options: Options<BookingResourcesAcceptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/booking-resources/{uuid}/accept/',
        ...options
    });
};

export const bookingResourcesReject = <ThrowOnError extends boolean = false>(options: Options<BookingResourcesRejectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/booking-resources/{uuid}/reject/',
        ...options
    });
};

export const broadcastMessageTemplatesList = <ThrowOnError extends boolean = false>(options?: Options<BroadcastMessageTemplatesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BroadcastMessageTemplatesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/broadcast-message-templates/',
        ...options
    });
};

export const broadcastMessageTemplatesCreate = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessageTemplatesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BroadcastMessageTemplatesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/broadcast-message-templates/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const broadcastMessageTemplatesDestroy = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessageTemplatesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BroadcastMessageTemplatesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/broadcast-message-templates/{uuid}/',
        ...options
    });
};

export const broadcastMessageTemplatesRetrieve = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessageTemplatesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BroadcastMessageTemplatesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/broadcast-message-templates/{uuid}/',
        ...options
    });
};

export const broadcastMessageTemplatesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessageTemplatesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BroadcastMessageTemplatesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/broadcast-message-templates/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const broadcastMessageTemplatesUpdate = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessageTemplatesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BroadcastMessageTemplatesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/broadcast-message-templates/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const broadcastMessagesList = <ThrowOnError extends boolean = false>(options?: Options<BroadcastMessagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BroadcastMessagesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/broadcast-messages/',
        ...options
    });
};

export const broadcastMessagesCreate = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessagesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BroadcastMessagesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/broadcast-messages/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const broadcastMessagesDestroy = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessagesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BroadcastMessagesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/broadcast-messages/{uuid}/',
        ...options
    });
};

export const broadcastMessagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BroadcastMessagesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/broadcast-messages/{uuid}/',
        ...options
    });
};

export const broadcastMessagesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessagesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BroadcastMessagesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/broadcast-messages/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const broadcastMessagesUpdate = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessagesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BroadcastMessagesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/broadcast-messages/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const broadcastMessagesSend = <ThrowOnError extends boolean = false>(options: Options<BroadcastMessagesSendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/broadcast-messages/{uuid}/send/',
        ...options
    });
};

export const broadcastMessagesRecipientsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<BroadcastMessagesRecipientsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BroadcastMessagesRecipientsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/broadcast-messages/recipients/',
        ...options
    });
};

export const callManagingOrganisationsList = <ThrowOnError extends boolean = false>(options?: Options<CallManagingOrganisationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CallManagingOrganisationsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/call-managing-organisations/',
        ...options
    });
};

export const callManagingOrganisationsCreate = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CallManagingOrganisationsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/call-managing-organisations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const callManagingOrganisationsDestroy = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CallManagingOrganisationsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/',
        ...options
    });
};

export const callManagingOrganisationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CallManagingOrganisationsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/',
        ...options
    });
};

export const callManagingOrganisationsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CallManagingOrganisationsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const callManagingOrganisationsUpdate = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CallManagingOrganisationsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const callManagingOrganisationsAddUser = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsAddUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CallManagingOrganisationsAddUserResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/add_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const callManagingOrganisationsDeleteUser = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/delete_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const callManagingOrganisationsListUsersList = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsListUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CallManagingOrganisationsListUsersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/list_users/',
        ...options
    });
};

/**
 * Return statistics for call managing organisation.
 */
export const callManagingOrganisationsStatsRetrieve = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsStatsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CallManagingOrganisationsStatsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/stats/',
        ...options
    });
};

export const callManagingOrganisationsUpdateUser = <ThrowOnError extends boolean = false>(options: Options<CallManagingOrganisationsUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CallManagingOrganisationsUpdateUserResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/call-managing-organisations/{uuid}/update_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const callRoundsList = <ThrowOnError extends boolean = false>(options?: Options<CallRoundsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CallRoundsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/call-rounds/',
        ...options
    });
};

export const callRoundsRetrieve = <ThrowOnError extends boolean = false>(options: Options<CallRoundsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CallRoundsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/call-rounds/{uuid}/',
        ...options
    });
};

/**
 * Return list of reviewers for round.
 */
export const callRoundsReviewersList = <ThrowOnError extends boolean = false>(options: Options<CallRoundsReviewersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CallRoundsReviewersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/call-rounds/{uuid}/reviewers/',
        ...options
    });
};

export const celeryStatsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<CeleryStatsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/celery-stats/',
        ...options
    });
};

export const componentUserUsageLimitsList = <ThrowOnError extends boolean = false>(options?: Options<ComponentUserUsageLimitsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ComponentUserUsageLimitsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/component-user-usage-limits/',
        ...options
    });
};

export const componentUserUsageLimitsCreate = <ThrowOnError extends boolean = false>(options: Options<ComponentUserUsageLimitsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ComponentUserUsageLimitsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/component-user-usage-limits/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const componentUserUsageLimitsDestroy = <ThrowOnError extends boolean = false>(options: Options<ComponentUserUsageLimitsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ComponentUserUsageLimitsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/component-user-usage-limits/{uuid}/',
        ...options
    });
};

export const componentUserUsageLimitsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ComponentUserUsageLimitsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ComponentUserUsageLimitsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/component-user-usage-limits/{uuid}/',
        ...options
    });
};

export const componentUserUsageLimitsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ComponentUserUsageLimitsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ComponentUserUsageLimitsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/component-user-usage-limits/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const componentUserUsageLimitsUpdate = <ThrowOnError extends boolean = false>(options: Options<ComponentUserUsageLimitsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ComponentUserUsageLimitsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/component-user-usage-limits/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve public settings
 */
export const configurationRetrieve = <ThrowOnError extends boolean = false>(options?: Options<ConfigurationRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ConfigurationRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/configuration/',
        ...options
    });
};

export const customerCreditsList = <ThrowOnError extends boolean = false>(options?: Options<CustomerCreditsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CustomerCreditsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customer-credits/',
        ...options
    });
};

export const customerCreditsCreate = <ThrowOnError extends boolean = false>(options: Options<CustomerCreditsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CustomerCreditsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customer-credits/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const customerCreditsDestroy = <ThrowOnError extends boolean = false>(options: Options<CustomerCreditsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CustomerCreditsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customer-credits/{uuid}/',
        ...options
    });
};

export const customerCreditsRetrieve = <ThrowOnError extends boolean = false>(options: Options<CustomerCreditsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CustomerCreditsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customer-credits/{uuid}/',
        ...options
    });
};

export const customerCreditsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<CustomerCreditsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CustomerCreditsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customer-credits/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const customerCreditsUpdate = <ThrowOnError extends boolean = false>(options: Options<CustomerCreditsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CustomerCreditsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customer-credits/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const customerCreditsApplyCompensations = <ThrowOnError extends boolean = false>(options: Options<CustomerCreditsApplyCompensationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CustomerCreditsApplyCompensationsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customer-credits/{uuid}/apply_compensations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const customerCreditsClearCompensations = <ThrowOnError extends boolean = false>(options: Options<CustomerCreditsClearCompensationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CustomerCreditsClearCompensationsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customer-credits/{uuid}/clear_compensations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const customerPermissionsReviewsList = <ThrowOnError extends boolean = false>(options?: Options<CustomerPermissionsReviewsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CustomerPermissionsReviewsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customer-permissions-reviews/',
        ...options
    });
};

export const customerPermissionsReviewsRetrieve = <ThrowOnError extends boolean = false>(options: Options<CustomerPermissionsReviewsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CustomerPermissionsReviewsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customer-permissions-reviews/{uuid}/',
        ...options
    });
};

/**
 * Close customer permission review.
 */
export const customerPermissionsReviewsClose = <ThrowOnError extends boolean = false>(options: Options<CustomerPermissionsReviewsCloseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customer-permissions-reviews/{uuid}/close/',
        ...options
    });
};

/**
 * List customer quotas.
 */
export const customerQuotasList = <ThrowOnError extends boolean = false>(options?: Options<CustomerQuotasListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CustomerQuotasListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customer-quotas/',
        ...options
    });
};

/**
 * To get a list of customers, run GET against /api/customers/ as authenticated user. Note that a user can
 * only see connected customers:
 *
 * - customers that the user owns
 * - customers that have a project where user has a role
 *
 * Staff also can filter customers by user UUID, for example /api/customers/?user_uuid=<UUID>
 *
 * Staff also can filter customers by exists accounting_start_date, for example:
 *
 * The first category:
 * /api/customers/?accounting_is_running=True
 * has accounting_start_date empty (i.e. accounting starts at once)
 * has accounting_start_date in the past (i.e. has already started).
 *
 * Those that are not in the first:
 * /api/customers/?accounting_is_running=False # exists accounting_start_date
 */
export const customersList = <ThrowOnError extends boolean = false>(options?: Options<CustomersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CustomersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/',
        ...options
    });
};

/**
 * A new customer can only be created by users with staff privilege
 */
export const customersCreate = <ThrowOnError extends boolean = false>(options: Options<CustomersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CustomersCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceChecklistsCustomerRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsCustomerRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceChecklistsCustomerRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/{customer_uuid}/marketplace-checklists/',
        ...options
    });
};

export const marketplaceChecklistsCustomerUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsCustomerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceChecklistsCustomerUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/{customer_uuid}/marketplace-checklists/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceChecklistsCustomerStats = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsCustomerStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceChecklistsCustomerStatsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/{customer_uuid}/marketplace-checklists/{checklist_uuid}/',
        ...options
    });
};

/**
 * If a customer has connected projects, deletion request will fail with 409 response code.
 */
export const customersDestroy = <ThrowOnError extends boolean = false>(options: Options<CustomersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CustomersDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/{uuid}/',
        ...options
    });
};

export const customersRetrieve = <ThrowOnError extends boolean = false>(options: Options<CustomersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CustomersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/{uuid}/',
        ...options
    });
};

export const customersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<CustomersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CustomersPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const customersUpdate = <ThrowOnError extends boolean = false>(options: Options<CustomersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CustomersUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const customersAddUser = <ThrowOnError extends boolean = false>(options: Options<CustomersAddUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CustomersAddUserResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/{uuid}/add_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const customersDeleteUser = <ThrowOnError extends boolean = false>(options: Options<CustomersDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/{uuid}/delete_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const customersListUsersList = <ThrowOnError extends boolean = false>(options: Options<CustomersListUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CustomersListUsersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/{uuid}/list_users/',
        ...options
    });
};

/**
 * Return statistics about customer resources usage
 */
export const customersStatsRetrieve = <ThrowOnError extends boolean = false>(options: Options<CustomersStatsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CustomersStatsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/{uuid}/stats/',
        ...options
    });
};

/**
 * Update organization groups for customer
 */
export const customersUpdateOrganizationGroups = <ThrowOnError extends boolean = false>(options: Options<CustomersUpdateOrganizationGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/{uuid}/update_organization_groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const customersUpdateUser = <ThrowOnError extends boolean = false>(options: Options<CustomersUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CustomersUpdateUserResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/{uuid}/update_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * A list of users connected to the customer.
 */
export const customersUsersList = <ThrowOnError extends boolean = false>(options: Options<CustomersUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CustomersUsersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/{uuid}/users/',
        ...options
    });
};

/**
 * Return list of countries
 */
export const customersCountriesList = <ThrowOnError extends boolean = false>(options?: Options<CustomersCountriesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CustomersCountriesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/customers/countries/',
        ...options
    });
};

export const dailyQuotasRetrieve = <ThrowOnError extends boolean = false>(options?: Options<DailyQuotasRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DailyQuotasRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/daily-quotas/',
        ...options
    });
};

export const databaseStatsList = <ThrowOnError extends boolean = false>(options?: Options<DatabaseStatsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DatabaseStatsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/database-stats/',
        ...options
    });
};

export const digitaloceanDropletsList = <ThrowOnError extends boolean = false>(options?: Options<DigitaloceanDropletsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DigitaloceanDropletsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-droplets/',
        ...options
    });
};

export const digitaloceanDropletsCreate = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DigitaloceanDropletsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-droplets/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const digitaloceanDropletsDestroy = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DigitaloceanDropletsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/',
        ...options
    });
};

export const digitaloceanDropletsRetrieve = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DigitaloceanDropletsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/',
        ...options
    });
};

export const digitaloceanDropletsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<DigitaloceanDropletsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const digitaloceanDropletsUpdate = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<DigitaloceanDropletsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const digitaloceanDropletsPull = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/pull/',
        ...options
    });
};

/**
 * To resize droplet, submit a POST request to the instance URL, specifying URI of a target size.
 *
 * Pass {'disk': true} along with target size in order to perform permanent resizing,
 * which allows you to resize your disk space as well as CPU and RAM.
 * After increasing the disk size, you will not be able to decrease it.
 *
 * Pass {'disk': false} along with target size in order to perform flexible resizing,
 * which only upgrades your CPU and RAM. This option is reversible.
 *
 * Note that instance must be OFFLINE.
 */
export const digitaloceanDropletsResize = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsResizeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DigitaloceanDropletsResizeResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/resize/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const digitaloceanDropletsRestart = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsRestartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/restart/',
        ...options
    });
};

export const digitaloceanDropletsStart = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/start/',
        ...options
    });
};

export const digitaloceanDropletsStop = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/stop/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const digitaloceanDropletsUnlink = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanDropletsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-droplets/{uuid}/unlink/',
        ...options
    });
};

export const digitaloceanImagesList = <ThrowOnError extends boolean = false>(options?: Options<DigitaloceanImagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DigitaloceanImagesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-images/',
        ...options
    });
};

export const digitaloceanImagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanImagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DigitaloceanImagesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-images/{uuid}/',
        ...options
    });
};

export const digitaloceanRegionsList = <ThrowOnError extends boolean = false>(options?: Options<DigitaloceanRegionsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DigitaloceanRegionsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-regions/',
        ...options
    });
};

export const digitaloceanRegionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanRegionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DigitaloceanRegionsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-regions/{uuid}/',
        ...options
    });
};

export const digitaloceanSizesList = <ThrowOnError extends boolean = false>(options?: Options<DigitaloceanSizesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DigitaloceanSizesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-sizes/',
        ...options
    });
};

export const digitaloceanSizesRetrieve = <ThrowOnError extends boolean = false>(options: Options<DigitaloceanSizesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DigitaloceanSizesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/digitalocean-sizes/{uuid}/',
        ...options
    });
};

export const emailLogsList = <ThrowOnError extends boolean = false>(options?: Options<EmailLogsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EmailLogsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/email-logs/',
        ...options
    });
};

export const emailLogsRetrieve = <ThrowOnError extends boolean = false>(options: Options<EmailLogsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EmailLogsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/email-logs/{uuid}/',
        ...options
    });
};

export const eventSubscriptionsList = <ThrowOnError extends boolean = false>(options?: Options<EventSubscriptionsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EventSubscriptionsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/event-subscriptions/',
        ...options
    });
};

export const eventSubscriptionsCreate = <ThrowOnError extends boolean = false>(options?: Options<EventSubscriptionsCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<EventSubscriptionsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/event-subscriptions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const eventSubscriptionsDestroy = <ThrowOnError extends boolean = false>(options: Options<EventSubscriptionsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<EventSubscriptionsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/event-subscriptions/{uuid}/',
        ...options
    });
};

export const eventSubscriptionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<EventSubscriptionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EventSubscriptionsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/event-subscriptions/{uuid}/',
        ...options
    });
};

export const eventsList = <ThrowOnError extends boolean = false>(options?: Options<EventsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EventsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/events/',
        ...options
    });
};

export const eventsStatsList = <ThrowOnError extends boolean = false>(options?: Options<EventsStatsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EventsStatsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/events-stats/',
        ...options
    });
};

export const eventsRetrieve = <ThrowOnError extends boolean = false>(options: Options<EventsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EventsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/events/{id}/',
        ...options
    });
};

export const eventsCountRetrieve = <ThrowOnError extends boolean = false>(options?: Options<EventsCountRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EventsCountRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/events/count/',
        ...options
    });
};

/**
 * Returns a list of groups with event types.
 * Group is used in exclude_features query param.
 */
export const eventsEventGroupsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<EventsEventGroupsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EventsEventGroupsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/events/event_groups/',
        ...options
    });
};

/**
 * Returns a list of scope types acceptable by events filter.
 */
export const eventsScopeTypesRetrieve = <ThrowOnError extends boolean = false>(options?: Options<EventsScopeTypesRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EventsScopeTypesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/events/scope_types/',
        ...options
    });
};

/**
 * Override feature values
 */
export const featureValues = <ThrowOnError extends boolean = false>(options?: Options<FeatureValuesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<FeatureValuesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/feature-values/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const financialReportsList = <ThrowOnError extends boolean = false>(options?: Options<FinancialReportsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FinancialReportsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/financial-reports/',
        ...options
    });
};

export const financialReportsRetrieve = <ThrowOnError extends boolean = false>(options: Options<FinancialReportsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FinancialReportsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/financial-reports/{uuid}/',
        ...options
    });
};

export const freeipaProfilesList = <ThrowOnError extends boolean = false>(options?: Options<FreeipaProfilesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FreeipaProfilesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/freeipa-profiles/',
        ...options
    });
};

export const freeipaProfilesCreate = <ThrowOnError extends boolean = false>(options: Options<FreeipaProfilesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FreeipaProfilesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/freeipa-profiles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const freeipaProfilesRetrieve = <ThrowOnError extends boolean = false>(options: Options<FreeipaProfilesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FreeipaProfilesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/freeipa-profiles/{uuid}/',
        ...options
    });
};

export const freeipaProfilesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<FreeipaProfilesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<FreeipaProfilesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/freeipa-profiles/{uuid}/',
        ...options
    });
};

export const freeipaProfilesUpdate = <ThrowOnError extends boolean = false>(options: Options<FreeipaProfilesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<FreeipaProfilesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/freeipa-profiles/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update SSH keys for profile.
 */
export const freeipaProfilesUpdateSshKeys = <ThrowOnError extends boolean = false>(options: Options<FreeipaProfilesUpdateSshKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/freeipa-profiles/{uuid}/update_ssh_keys/',
        ...options
    });
};

export const googleAuthList = <ThrowOnError extends boolean = false>(options?: Options<GoogleAuthListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GoogleAuthListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/google-auth/',
        ...options
    });
};

export const googleAuthRetrieve = <ThrowOnError extends boolean = false>(options: Options<GoogleAuthRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GoogleAuthRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/google-auth/{uuid}/',
        ...options
    });
};

export const googleAuthAuthorizeRetrieve = <ThrowOnError extends boolean = false>(options: Options<GoogleAuthAuthorizeRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GoogleAuthAuthorizeRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/google-auth/{uuid}/authorize/',
        ...options
    });
};

/**
 * Callback endpoint for Google authorization.
 */
export const googleAuthCallbackRetrieve = <ThrowOnError extends boolean = false>(options: Options<GoogleAuthCallbackRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/google-auth/callback/',
        ...options
    });
};

export const hooksList = <ThrowOnError extends boolean = false>(options?: Options<HooksListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/hooks/',
        ...options
    });
};

export const hooksEmailList = <ThrowOnError extends boolean = false>(options?: Options<HooksEmailListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HooksEmailListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/hooks-email/',
        ...options
    });
};

export const hooksEmailCreate = <ThrowOnError extends boolean = false>(options: Options<HooksEmailCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<HooksEmailCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/hooks-email/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const hooksEmailDestroy = <ThrowOnError extends boolean = false>(options: Options<HooksEmailDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<HooksEmailDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/hooks-email/{uuid}/',
        ...options
    });
};

export const hooksEmailRetrieve = <ThrowOnError extends boolean = false>(options: Options<HooksEmailRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<HooksEmailRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/hooks-email/{uuid}/',
        ...options
    });
};

export const hooksEmailPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<HooksEmailPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<HooksEmailPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/hooks-email/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const hooksEmailUpdate = <ThrowOnError extends boolean = false>(options: Options<HooksEmailUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<HooksEmailUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/hooks-email/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const hooksWebList = <ThrowOnError extends boolean = false>(options?: Options<HooksWebListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HooksWebListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/hooks-web/',
        ...options
    });
};

/**
 * When hook is activated, POST request is issued against destination URL with the following data:
 *
 * .. code-block:: javascript
 *
 * {
 * "timestamp": "2015-07-14T12:12:56.000000",
 * "message": "Customer ABC LLC has been updated.",
 * "type": "customer_update_succeeded",
 * "context": {
 * "user_native_name": "Walter Lebrowski",
 * "customer_contact_details": "",
 * "user_username": "Walter",
 * "user_uuid": "1c3323fc4ae44120b57ec40dea1be6e6",
 * "customer_uuid": "4633bbbb0b3a4b91bffc0e18f853de85",
 * "ip_address": "8.8.8.8",
 * "user_full_name": "Walter Lebrowski",
 * "customer_abbreviation": "ABC LLC",
 * "customer_name": "ABC LLC"
 * },
 * "levelname": "INFO"
 * }
 *
 * Note that context depends on event type.
 */
export const hooksWebCreate = <ThrowOnError extends boolean = false>(options: Options<HooksWebCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<HooksWebCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/hooks-web/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const hooksWebDestroy = <ThrowOnError extends boolean = false>(options: Options<HooksWebDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<HooksWebDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/hooks-web/{uuid}/',
        ...options
    });
};

export const hooksWebRetrieve = <ThrowOnError extends boolean = false>(options: Options<HooksWebRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<HooksWebRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/hooks-web/{uuid}/',
        ...options
    });
};

export const hooksWebPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<HooksWebPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<HooksWebPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/hooks-web/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const hooksWebUpdate = <ThrowOnError extends boolean = false>(options: Options<HooksWebUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<HooksWebUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/hooks-web/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve whitelabeling logo
 */
export const iconsFaviconRetrieve = <ThrowOnError extends boolean = false>(options?: Options<IconsFaviconRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IconsFaviconRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/icons/favicon/',
        ...options
    });
};

/**
 * Retrieve whitelabeling logo
 */
export const iconsHeroImageRetrieve = <ThrowOnError extends boolean = false>(options?: Options<IconsHeroImageRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IconsHeroImageRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/icons/hero_image/',
        ...options
    });
};

/**
 * Retrieve whitelabeling logo
 */
export const iconsKeycloakIconRetrieve = <ThrowOnError extends boolean = false>(options?: Options<IconsKeycloakIconRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IconsKeycloakIconRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/icons/keycloak_icon/',
        ...options
    });
};

/**
 * Retrieve whitelabeling logo
 */
export const iconsLoginLogoRetrieve = <ThrowOnError extends boolean = false>(options?: Options<IconsLoginLogoRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IconsLoginLogoRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/icons/login_logo/',
        ...options
    });
};

/**
 * Retrieve whitelabeling logo
 */
export const iconsOfferingLogoPlaceholderRetrieve = <ThrowOnError extends boolean = false>(options?: Options<IconsOfferingLogoPlaceholderRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IconsOfferingLogoPlaceholderRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/icons/offering_logo_placeholder/',
        ...options
    });
};

/**
 * Retrieve whitelabeling logo
 */
export const iconsPoweredByLogoRetrieve = <ThrowOnError extends boolean = false>(options?: Options<IconsPoweredByLogoRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IconsPoweredByLogoRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/icons/powered_by_logo/',
        ...options
    });
};

/**
 * Retrieve whitelabeling logo
 */
export const iconsSidebarLogoRetrieve = <ThrowOnError extends boolean = false>(options?: Options<IconsSidebarLogoRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IconsSidebarLogoRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/icons/sidebar_logo/',
        ...options
    });
};

/**
 * Retrieve whitelabeling logo
 */
export const iconsSidebarLogoDarkRetrieve = <ThrowOnError extends boolean = false>(options?: Options<IconsSidebarLogoDarkRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IconsSidebarLogoDarkRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/icons/sidebar_logo_dark/',
        ...options
    });
};

/**
 * Retrieve whitelabeling logo
 */
export const iconsSidebarLogoMobileRetrieve = <ThrowOnError extends boolean = false>(options?: Options<IconsSidebarLogoMobileRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IconsSidebarLogoMobileRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/icons/sidebar_logo_mobile/',
        ...options
    });
};

/**
 * Retrieve whitelabeling logo
 */
export const iconsSiteLogoRetrieve = <ThrowOnError extends boolean = false>(options?: Options<IconsSiteLogoRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IconsSiteLogoRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/icons/site_logo/',
        ...options
    });
};

export const identityProvidersList = <ThrowOnError extends boolean = false>(options?: Options<IdentityProvidersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IdentityProvidersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/identity-providers/',
        ...options
    });
};

export const identityProvidersCreate = <ThrowOnError extends boolean = false>(options: Options<IdentityProvidersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IdentityProvidersCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/identity-providers/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const identityProvidersDestroy = <ThrowOnError extends boolean = false>(options: Options<IdentityProvidersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<IdentityProvidersDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/identity-providers/{provider}/',
        ...options
    });
};

export const identityProvidersRetrieve = <ThrowOnError extends boolean = false>(options: Options<IdentityProvidersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IdentityProvidersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/identity-providers/{provider}/',
        ...options
    });
};

export const identityProvidersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<IdentityProvidersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<IdentityProvidersPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/identity-providers/{provider}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const identityProvidersUpdate = <ThrowOnError extends boolean = false>(options: Options<IdentityProvidersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<IdentityProvidersUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/identity-providers/{provider}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const invoiceItemsList = <ThrowOnError extends boolean = false>(options?: Options<InvoiceItemsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InvoiceItemsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoice-items/',
        ...options
    });
};

export const invoiceItemsDestroy = <ThrowOnError extends boolean = false>(options: Options<InvoiceItemsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<InvoiceItemsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoice-items/{uuid}/',
        ...options
    });
};

export const invoiceItemsRetrieve = <ThrowOnError extends boolean = false>(options: Options<InvoiceItemsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InvoiceItemsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoice-items/{uuid}/',
        ...options
    });
};

export const invoiceItemsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<InvoiceItemsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<InvoiceItemsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoice-items/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const invoiceItemsUpdate = <ThrowOnError extends boolean = false>(options: Options<InvoiceItemsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<InvoiceItemsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoice-items/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create compensation invoice item for selected invoice item.
 */
export const invoiceItemsCreateCompensation = <ThrowOnError extends boolean = false>(options: Options<InvoiceItemsCreateCompensationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InvoiceItemsCreateCompensationResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoice-items/{uuid}/create_compensation/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Move invoice item from one invoice to another one.
 */
export const invoiceItemsMigrateTo = <ThrowOnError extends boolean = false>(options: Options<InvoiceItemsMigrateToData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InvoiceItemsMigrateToResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoice-items/{uuid}/migrate_to/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get costs breakdown for a project by year and month.
 */
export const invoiceItemsCostsList = <ThrowOnError extends boolean = false>(options?: Options<InvoiceItemsCostsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InvoiceItemsCostsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoice-items/costs/',
        ...options
    });
};

export const invoiceItemsCustomerCostsForPeriodRetrieve = <ThrowOnError extends boolean = false>(options?: Options<InvoiceItemsCustomerCostsForPeriodRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InvoiceItemsCustomerCostsForPeriodRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoice-items/customer_costs_for_period/',
        ...options
    });
};

/**
 * Get resource cost breakdown for a project over a specified period.
 */
export const invoiceItemsProjectCostsForPeriodRetrieve = <ThrowOnError extends boolean = false>(options?: Options<InvoiceItemsProjectCostsForPeriodRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InvoiceItemsProjectCostsForPeriodRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoice-items/project_costs_for_period/',
        ...options
    });
};

/**
 * Calculate total price for filtered invoice items.
 */
export const invoiceItemsTotalPriceRetrieve = <ThrowOnError extends boolean = false>(options?: Options<InvoiceItemsTotalPriceRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InvoiceItemsTotalPriceRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoice-items/total_price/',
        ...options
    });
};

export const invoiceSendFinancialReportByMail = <ThrowOnError extends boolean = false>(options: Options<InvoiceSendFinancialReportByMailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoice/send-financial-report-by-mail/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const invoicesList = <ThrowOnError extends boolean = false>(options?: Options<InvoicesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InvoicesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoices/',
        ...options
    });
};

export const invoicesRetrieve = <ThrowOnError extends boolean = false>(options: Options<InvoicesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InvoicesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoices/{uuid}/',
        ...options
    });
};

/**
 * Get invoice items
 * Retrieve a list of invoice items for the specified invoice.
 */
export const invoicesItemsRetrieve = <ThrowOnError extends boolean = false>(options: Options<InvoicesItemsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InvoicesItemsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoices/{uuid}/items/',
        ...options
    });
};

/**
 * Mark invoice as paid and optionally create payment record with proof of payment.
 */
export const invoicesPaid = <ThrowOnError extends boolean = false>(options: Options<InvoicesPaidData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InvoicesPaidResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoices/{uuid}/paid/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Send invoice notification
 * Schedule sending of a notification for the specified invoice.
 */
export const invoicesSendNotification = <ThrowOnError extends boolean = false>(options: Options<InvoicesSendNotificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoices/{uuid}/send_notification/',
        ...options
    });
};

/**
 * Set backend ID for invoice.
 */
export const invoicesSetBackendId = <ThrowOnError extends boolean = false>(options: Options<InvoicesSetBackendIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoices/{uuid}/set_backend_id/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Set payment URL for invoice.
 */
export const invoicesSetPaymentUrl = <ThrowOnError extends boolean = false>(options: Options<InvoicesSetPaymentUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoices/{uuid}/set_payment_url/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Set reference number for invoice.
 */
export const invoicesSetReferenceNumber = <ThrowOnError extends boolean = false>(options: Options<InvoicesSetReferenceNumberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoices/{uuid}/set_reference_number/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Spendings grouped by offerings and filtered by provider.
 */
export const invoicesStatsList = <ThrowOnError extends boolean = false>(options: Options<InvoicesStatsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InvoicesStatsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoices/{uuid}/stats/',
        ...options
    });
};

/**
 * Analyze invoice trends over time by comparing monthly totals for major customers versus others over the past year.
 */
export const invoicesGrowthRetrieve = <ThrowOnError extends boolean = false>(options?: Options<InvoicesGrowthRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InvoicesGrowthRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/invoices/growth/',
        ...options
    });
};

export const keysList = <ThrowOnError extends boolean = false>(options?: Options<KeysListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<KeysListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/keys/',
        ...options
    });
};

export const keysCreate = <ThrowOnError extends boolean = false>(options: Options<KeysCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<KeysCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/keys/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const keysDestroy = <ThrowOnError extends boolean = false>(options: Options<KeysDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<KeysDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/keys/{uuid}/',
        ...options
    });
};

export const keysRetrieve = <ThrowOnError extends boolean = false>(options: Options<KeysRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<KeysRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/keys/{uuid}/',
        ...options
    });
};

export const lexisLinksList = <ThrowOnError extends boolean = false>(options?: Options<LexisLinksListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LexisLinksListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/lexis-links/',
        ...options
    });
};

export const lexisLinksCreate = <ThrowOnError extends boolean = false>(options: Options<LexisLinksCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/lexis-links/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const lexisLinksDestroy = <ThrowOnError extends boolean = false>(options: Options<LexisLinksDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<LexisLinksDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/lexis-links/{uuid}/',
        ...options
    });
};

export const lexisLinksRetrieve = <ThrowOnError extends boolean = false>(options: Options<LexisLinksRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LexisLinksRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/lexis-links/{uuid}/',
        ...options
    });
};

export const lexisLinksPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<LexisLinksPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<LexisLinksPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/lexis-links/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const lexisLinksUpdate = <ThrowOnError extends boolean = false>(options: Options<LexisLinksUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<LexisLinksUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/lexis-links/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceBookingsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceBookingsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceBookingsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-bookings/{uuid}/',
        ...options
    });
};

export const marketplaceCategoriesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoriesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCategoriesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-categories/',
        ...options
    });
};

export const marketplaceCategoriesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoriesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceCategoriesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-categories/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCategoriesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoriesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceCategoriesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-categories/{uuid}/',
        ...options
    });
};

export const marketplaceCategoriesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoriesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceCategoriesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-categories/{uuid}/',
        ...options
    });
};

export const marketplaceCategoriesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoriesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceCategoriesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-categories/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCategoriesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoriesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceCategoriesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-categories/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCategoryColumnsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoryColumnsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCategoryColumnsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-columns/',
        ...options
    });
};

export const marketplaceCategoryColumnsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryColumnsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceCategoryColumnsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-columns/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCategoryColumnsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryColumnsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceCategoryColumnsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-columns/{uuid}/',
        ...options
    });
};

export const marketplaceCategoryColumnsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryColumnsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceCategoryColumnsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-columns/{uuid}/',
        ...options
    });
};

export const marketplaceCategoryColumnsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryColumnsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceCategoryColumnsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-columns/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCategoryColumnsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryColumnsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceCategoryColumnsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-columns/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCategoryComponentUsagesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoryComponentUsagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCategoryComponentUsagesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-component-usages/',
        ...options
    });
};

export const marketplaceCategoryComponentUsagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryComponentUsagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceCategoryComponentUsagesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-component-usages/{id}/',
        ...options
    });
};

export const marketplaceCategoryComponentsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoryComponentsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCategoryComponentsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-components/',
        ...options
    });
};

export const marketplaceCategoryComponentsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryComponentsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceCategoryComponentsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-components/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCategoryComponentsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryComponentsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceCategoryComponentsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-components/{id}/',
        ...options
    });
};

export const marketplaceCategoryComponentsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryComponentsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceCategoryComponentsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-components/{id}/',
        ...options
    });
};

export const marketplaceCategoryComponentsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryComponentsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceCategoryComponentsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-components/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCategoryComponentsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryComponentsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceCategoryComponentsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-components/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCategoryGroupsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoryGroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCategoryGroupsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-groups/',
        ...options
    });
};

export const marketplaceCategoryGroupsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryGroupsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceCategoryGroupsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCategoryGroupsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryGroupsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceCategoryGroupsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-groups/{uuid}/',
        ...options
    });
};

export const marketplaceCategoryGroupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryGroupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceCategoryGroupsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-groups/{uuid}/',
        ...options
    });
};

export const marketplaceCategoryGroupsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryGroupsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceCategoryGroupsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCategoryGroupsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryGroupsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceCategoryGroupsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCategoryHelpArticlesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCategoryHelpArticlesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCategoryHelpArticlesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-help-articles/',
        ...options
    });
};

export const marketplaceCategoryHelpArticlesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryHelpArticlesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceCategoryHelpArticlesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-help-articles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCategoryHelpArticlesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryHelpArticlesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceCategoryHelpArticlesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-help-articles/{id}/',
        ...options
    });
};

export const marketplaceCategoryHelpArticlesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryHelpArticlesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceCategoryHelpArticlesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-help-articles/{id}/',
        ...options
    });
};

export const marketplaceCategoryHelpArticlesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryHelpArticlesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceCategoryHelpArticlesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-help-articles/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCategoryHelpArticlesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCategoryHelpArticlesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceCategoryHelpArticlesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-category-help-articles/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceChecklistsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceChecklistsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceChecklistsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-checklists/',
        ...options
    });
};

export const marketplaceChecklistsCategoriesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceChecklistsCategoriesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceChecklistsCategoriesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-checklists-categories/',
        ...options
    });
};

export const marketplaceChecklistsCategoriesChecklistsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsCategoriesChecklistsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceChecklistsCategoriesChecklistsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-checklists-categories/{category_uuid}/checklists/',
        ...options
    });
};

export const marketplaceChecklistsCategoriesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsCategoriesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceChecklistsCategoriesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-checklists-categories/{uuid}/',
        ...options
    });
};

export const marketplaceChecklistsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceChecklistsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-checklists/{checklist_uuid}/',
        ...options
    });
};

export const marketplaceChecklistsAnswersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAnswersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceChecklistsAnswersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-checklists/{checklist_uuid}/answers/',
        ...options
    });
};

/**
 * Submit answer to checklist question
 */
export const marketplaceChecklistsAnswersSubmitCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsAnswersSubmitCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceChecklistsAnswersSubmitCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-checklists/{checklist_uuid}/answers/submit/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceChecklistsQuestionsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsQuestionsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceChecklistsQuestionsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-checklists/{checklist_uuid}/questions/',
        ...options
    });
};

/**
 * Checklist stats per customer
 */
export const marketplaceChecklistsStatsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsStatsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceChecklistsStatsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-checklists/{checklist_uuid}/stats/',
        ...options
    });
};

export const marketplaceChecklistsUserAnswersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceChecklistsUserAnswersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceChecklistsUserAnswersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-checklists/{checklist_uuid}/user/{user_uuid}/answers/',
        ...options
    });
};

export const marketplaceComponentUsagesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceComponentUsagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceComponentUsagesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-component-usages/',
        ...options
    });
};

export const marketplaceComponentUsagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceComponentUsagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceComponentUsagesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-component-usages/{uuid}/',
        ...options
    });
};

export const marketplaceComponentUsagesSetUserUsage = <ThrowOnError extends boolean = false>(options: Options<MarketplaceComponentUsagesSetUserUsageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceComponentUsagesSetUserUsageResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-component-usages/{uuid}/set_user_usage/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceComponentUsagesSetUsage = <ThrowOnError extends boolean = false>(options: Options<MarketplaceComponentUsagesSetUsageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceComponentUsagesSetUsageResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-component-usages/set_usage/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceComponentUserUsagesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceComponentUserUsagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceComponentUserUsagesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-component-user-usages/',
        ...options
    });
};

export const marketplaceComponentUserUsagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceComponentUserUsagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceComponentUserUsagesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-component-user-usages/{uuid}/',
        ...options
    });
};

export const marketplaceCustomerEstimatedCostPoliciesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCustomerEstimatedCostPoliciesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCustomerEstimatedCostPoliciesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-customer-estimated-cost-policies/',
        ...options
    });
};

export const marketplaceCustomerEstimatedCostPoliciesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCustomerEstimatedCostPoliciesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceCustomerEstimatedCostPoliciesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-customer-estimated-cost-policies/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCustomerEstimatedCostPoliciesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCustomerEstimatedCostPoliciesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceCustomerEstimatedCostPoliciesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-customer-estimated-cost-policies/{uuid}/',
        ...options
    });
};

export const marketplaceCustomerEstimatedCostPoliciesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCustomerEstimatedCostPoliciesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceCustomerEstimatedCostPoliciesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-customer-estimated-cost-policies/{uuid}/',
        ...options
    });
};

export const marketplaceCustomerEstimatedCostPoliciesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCustomerEstimatedCostPoliciesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceCustomerEstimatedCostPoliciesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-customer-estimated-cost-policies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCustomerEstimatedCostPoliciesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceCustomerEstimatedCostPoliciesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceCustomerEstimatedCostPoliciesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-customer-estimated-cost-policies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceCustomerEstimatedCostPoliciesActionsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceCustomerEstimatedCostPoliciesActionsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceCustomerEstimatedCostPoliciesActionsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-customer-estimated-cost-policies/actions/',
        ...options
    });
};

/**
 * Count of resource categories for all resources accessible by user.
 */
export const marketplaceGlobalCategoriesRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceGlobalCategoriesRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceGlobalCategoriesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-global-categories/',
        ...options
    });
};

export const marketplaceIntegrationStatusesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceIntegrationStatusesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceIntegrationStatusesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-integration-statuses/',
        ...options
    });
};

export const marketplaceIntegrationStatusesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceIntegrationStatusesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceIntegrationStatusesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-integration-statuses/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingEstimatedCostPoliciesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingEstimatedCostPoliciesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingEstimatedCostPoliciesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-estimated-cost-policies/',
        ...options
    });
};

export const marketplaceOfferingEstimatedCostPoliciesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingEstimatedCostPoliciesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOfferingEstimatedCostPoliciesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-estimated-cost-policies/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceOfferingEstimatedCostPoliciesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingEstimatedCostPoliciesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceOfferingEstimatedCostPoliciesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-estimated-cost-policies/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingEstimatedCostPoliciesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingEstimatedCostPoliciesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOfferingEstimatedCostPoliciesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-estimated-cost-policies/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingEstimatedCostPoliciesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingEstimatedCostPoliciesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceOfferingEstimatedCostPoliciesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-estimated-cost-policies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceOfferingEstimatedCostPoliciesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingEstimatedCostPoliciesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceOfferingEstimatedCostPoliciesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-estimated-cost-policies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List available actions for OfferingEstimatedCostPolicy
 */
export const marketplaceOfferingEstimatedCostPoliciesActionsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingEstimatedCostPoliciesActionsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingEstimatedCostPoliciesActionsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-estimated-cost-policies/actions/',
        ...options
    });
};

export const marketplaceOfferingFilesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingFilesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingFilesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-files/',
        ...options
    });
};

export const marketplaceOfferingFilesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingFilesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOfferingFilesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-files/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceOfferingFilesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingFilesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceOfferingFilesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-files/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingFilesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingFilesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOfferingFilesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-files/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingPermissionsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingPermissionsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingPermissionsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-permissions/',
        ...options
    });
};

export const marketplaceOfferingPermissionsLogList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingPermissionsLogListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingPermissionsLogListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-permissions-log/',
        ...options
    });
};

export const marketplaceOfferingPermissionsLogRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingPermissionsLogRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOfferingPermissionsLogRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-permissions-log/{id}/',
        ...options
    });
};

export const marketplaceOfferingPermissionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingPermissionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOfferingPermissionsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-permissions/{id}/',
        ...options
    });
};

export const marketplaceOfferingReferralsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingReferralsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingReferralsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-referrals/',
        ...options
    });
};

export const marketplaceOfferingReferralsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingReferralsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOfferingReferralsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-referrals/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingUsagePoliciesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingUsagePoliciesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingUsagePoliciesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-usage-policies/',
        ...options
    });
};

export const marketplaceOfferingUsagePoliciesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsagePoliciesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOfferingUsagePoliciesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-usage-policies/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceOfferingUsagePoliciesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsagePoliciesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceOfferingUsagePoliciesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-usage-policies/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingUsagePoliciesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsagePoliciesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOfferingUsagePoliciesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-usage-policies/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingUsagePoliciesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsagePoliciesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceOfferingUsagePoliciesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-usage-policies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceOfferingUsagePoliciesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsagePoliciesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceOfferingUsagePoliciesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-usage-policies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceOfferingUsagePoliciesActionsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingUsagePoliciesActionsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingUsagePoliciesActionsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-usage-policies/actions/',
        ...options
    });
};

export const marketplaceOfferingUserRolesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingUserRolesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingUserRolesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-user-roles/',
        ...options
    });
};

export const marketplaceOfferingUserRolesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUserRolesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOfferingUserRolesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-user-roles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceOfferingUserRolesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUserRolesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceOfferingUserRolesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-user-roles/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingUserRolesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUserRolesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOfferingUserRolesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-user-roles/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingUserRolesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUserRolesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceOfferingUserRolesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-user-roles/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceOfferingUserRolesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUserRolesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceOfferingUserRolesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-user-roles/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceOfferingUsersList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOfferingUsersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOfferingUsersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-users/',
        ...options
    });
};

export const marketplaceOfferingUsersCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOfferingUsersCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceOfferingUsersDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceOfferingUsersDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-users/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingUsersRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOfferingUsersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-users/{uuid}/',
        ...options
    });
};

export const marketplaceOfferingUsersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceOfferingUsersPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-users/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceOfferingUsersUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceOfferingUsersUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-users/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceOfferingUsersUpdateRestricted = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOfferingUsersUpdateRestrictedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-offering-users/{uuid}/update_restricted/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceOrdersList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceOrdersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceOrdersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-orders/',
        ...options
    });
};

export const marketplaceOrdersCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOrdersCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-orders/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceOrdersDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceOrdersDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/',
        ...options
    });
};

export const marketplaceOrdersRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOrdersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/',
        ...options
    });
};

export const marketplaceOrdersApproveByConsumer = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersApproveByConsumerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/approve_by_consumer/',
        ...options
    });
};

export const marketplaceOrdersApproveByProvider = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersApproveByProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/approve_by_provider/',
        ...options
    });
};

export const marketplaceOrdersCancel = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersCancelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/cancel/',
        ...options
    });
};

export const marketplaceOrdersOfferingRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersOfferingRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceOrdersOfferingRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/offering/',
        ...options
    });
};

export const marketplaceOrdersRejectByConsumer = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersRejectByConsumerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/reject_by_consumer/',
        ...options
    });
};

export const marketplaceOrdersRejectByProvider = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersRejectByProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/reject_by_provider/',
        ...options
    });
};

export const marketplaceOrdersSetStateDone = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersSetStateDoneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/set_state_done/',
        ...options
    });
};

export const marketplaceOrdersSetStateErred = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersSetStateErredData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/set_state_erred/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceOrdersSetStateExecuting = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersSetStateExecutingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/set_state_executing/',
        ...options
    });
};

export const marketplaceOrdersUnlink = <ThrowOnError extends boolean = false>(options: Options<MarketplaceOrdersUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceOrdersUnlinkResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-orders/{uuid}/unlink/',
        ...options
    });
};

export const marketplacePlanComponentsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplacePlanComponentsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplacePlanComponentsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-plan-components/',
        ...options
    });
};

export const marketplacePlanComponentsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlanComponentsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplacePlanComponentsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-plan-components/{id}/',
        ...options
    });
};

export const marketplacePlansList = <ThrowOnError extends boolean = false>(options?: Options<MarketplacePlansListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplacePlansListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-plans/',
        ...options
    });
};

export const marketplacePlansCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplacePlansCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-plans/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplacePlansRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplacePlansRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/',
        ...options
    });
};

export const marketplacePlansPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplacePlansPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplacePlansUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplacePlansUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplacePlansArchive = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansArchiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/archive/',
        ...options
    });
};

export const marketplacePlansDeleteOrganizationGroups = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansDeleteOrganizationGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/delete_organization_groups/',
        ...options
    });
};

export const marketplacePlansUpdateOrganizationGroups = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansUpdateOrganizationGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/update_organization_groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplacePlansUpdatePrices = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansUpdatePricesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/update_prices/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplacePlansUpdateQuotas = <ThrowOnError extends boolean = false>(options: Options<MarketplacePlansUpdateQuotasData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-plans/{uuid}/update_quotas/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplacePlansUsageStatsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplacePlansUsageStatsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplacePlansUsageStatsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-plans/usage_stats/',
        ...options
    });
};

export const marketplacePluginsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplacePluginsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplacePluginsListResponse, unknown, ThrowOnError>({
        url: '/api/marketplace-plugins/',
        ...options
    });
};

export const marketplaceProjectEstimatedCostPoliciesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProjectEstimatedCostPoliciesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceProjectEstimatedCostPoliciesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-project-estimated-cost-policies/',
        ...options
    });
};

export const marketplaceProjectEstimatedCostPoliciesCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectEstimatedCostPoliciesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProjectEstimatedCostPoliciesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-project-estimated-cost-policies/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProjectEstimatedCostPoliciesDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectEstimatedCostPoliciesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceProjectEstimatedCostPoliciesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-project-estimated-cost-policies/{uuid}/',
        ...options
    });
};

export const marketplaceProjectEstimatedCostPoliciesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectEstimatedCostPoliciesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProjectEstimatedCostPoliciesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-project-estimated-cost-policies/{uuid}/',
        ...options
    });
};

export const marketplaceProjectEstimatedCostPoliciesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectEstimatedCostPoliciesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceProjectEstimatedCostPoliciesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-project-estimated-cost-policies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProjectEstimatedCostPoliciesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectEstimatedCostPoliciesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceProjectEstimatedCostPoliciesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-project-estimated-cost-policies/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProjectEstimatedCostPoliciesActionsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProjectEstimatedCostPoliciesActionsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceProjectEstimatedCostPoliciesActionsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-project-estimated-cost-policies/actions/',
        ...options
    });
};

export const marketplaceProjectUpdateRequestsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProjectUpdateRequestsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceProjectUpdateRequestsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-project-update-requests/',
        ...options
    });
};

export const marketplaceProjectUpdateRequestsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectUpdateRequestsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProjectUpdateRequestsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-project-update-requests/{uuid}/',
        ...options
    });
};

/**
 * Approve project update request
 */
export const marketplaceProjectUpdateRequestsApprove = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectUpdateRequestsApproveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-project-update-requests/{uuid}/approve/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reject project update request
 */
export const marketplaceProjectUpdateRequestsReject = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProjectUpdateRequestsRejectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-project-update-requests/{uuid}/reject/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProviderOfferingsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceProviderOfferingsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/',
        ...options
    });
};

export const marketplaceProviderOfferingsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceProviderOfferingsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/',
        ...options
    });
};

export const marketplaceProviderOfferingsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/',
        ...options
    });
};

export const marketplaceProviderOfferingsActivate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsActivateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsActivateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/activate/',
        ...options
    });
};

/**
 * Add endpoint to offering.
 */
export const marketplaceProviderOfferingsAddEndpoint = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsAddEndpointData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsAddEndpointResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/add_endpoint/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsAddUser = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsAddUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsAddUserResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/add_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsArchive = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsArchiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsArchiveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/archive/',
        ...options
    });
};

/**
 * Get statistics for offering components.
 */
export const marketplaceProviderOfferingsComponentStatsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsComponentStatsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsComponentStatsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/component_stats/',
        ...options
    });
};

/**
 * Get costs for offering.
 */
export const marketplaceProviderOfferingsCostsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsCostsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsCostsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/costs/',
        ...options
    });
};

export const marketplaceProviderOfferingsCreateOfferingComponent = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsCreateOfferingComponentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/create_offering_component/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get customers for offering.
 */
export const marketplaceProviderOfferingsCustomersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsCustomersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsCustomersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/customers/',
        ...options
    });
};

/**
 * Delete endpoint from offering.
 */
export const marketplaceProviderOfferingsDeleteEndpoint = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsDeleteEndpointData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsDeleteEndpointResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/delete_endpoint/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete offering image.
 */
export const marketplaceProviderOfferingsDeleteImage = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsDeleteImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/delete_image/',
        ...options
    });
};

/**
 * Delete organization groups for offering.
 */
export const marketplaceProviderOfferingsDeleteOrganizationGroups = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsDeleteOrganizationGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/delete_organization_groups/',
        ...options
    });
};

/**
 * Delete offering thumbnail.
 */
export const marketplaceProviderOfferingsDeleteThumbnail = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsDeleteThumbnailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsDeleteThumbnailResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/delete_thumbnail/',
        ...options
    });
};

export const marketplaceProviderOfferingsDeleteUser = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/delete_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsDraft = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsDraftResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/draft/',
        ...options
    });
};

/**
 * This endpoint provides a config file for GLauth
 * Example: https://github.com/glauth/glauth/blob/master/v2/sample-simple.cfg
 * It is assumed that the config is used by an external agent,
 * which synchronizes data from Waldur to GLauth
 */
export const marketplaceProviderOfferingsGlauthUsersConfigRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsGlauthUsersConfigRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsGlauthUsersConfigRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/glauth_users_config/',
        ...options
    });
};

export const marketplaceProviderOfferingsImportResource = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsImportResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsImportResourceResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/import_resource/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List importable resources for offering.
 */
export const marketplaceProviderOfferingsImportableResourcesList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsImportableResourcesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsImportableResourcesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/importable_resources/',
        ...options
    });
};

export const marketplaceProviderOfferingsListCustomerProjectsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsListCustomerProjectsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsListCustomerProjectsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/list_customer_projects/',
        ...options
    });
};

export const marketplaceProviderOfferingsListCustomerUsersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsListCustomerUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsListCustomerUsersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/list_customer_users/',
        ...options
    });
};

export const marketplaceProviderOfferingsListUsersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsListUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsListUsersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/list_users/',
        ...options
    });
};

export const marketplaceProviderOfferingsOrdersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsOrdersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsOrdersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/orders/',
        ...options
    });
};

export const marketplaceProviderOfferingsOrdersRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsOrdersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsOrdersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/orders/{order_uuid}/',
        ...options
    });
};

export const marketplaceProviderOfferingsPause = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsPauseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsPauseResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/pause/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsRefreshOfferingUsernames = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsRefreshOfferingUsernamesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsRefreshOfferingUsernamesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/refresh_offering_usernames/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsRemoveOfferingComponent = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsRemoveOfferingComponentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/remove_offering_component/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsSetBackendMetadata = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsSetBackendMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/set_backend_metadata/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsStatsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsStatsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsStatsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/stats/',
        ...options
    });
};

export const marketplaceProviderOfferingsSync = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsSyncData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/sync/',
        ...options
    });
};

export const marketplaceProviderOfferingsUnpause = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUnpauseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsUnpauseResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/unpause/',
        ...options
    });
};

/**
 * Update offering attributes.
 */
export const marketplaceProviderOfferingsUpdateAttributes = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateAttributesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_attributes/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsUpdateDescription = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateDescriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_description/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update offering image.
 */
export const marketplaceProviderOfferingsUpdateImage = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsUpdateImageResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_image/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsUpdateIntegration = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateIntegrationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_integration/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsUpdateLocation = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateLocationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_location/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsUpdateOfferingComponent = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateOfferingComponentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_offering_component/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsUpdateOptions = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateOptionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_options/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update organization groups for offering.
 */
export const marketplaceProviderOfferingsUpdateOrganizationGroups = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateOrganizationGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_organization_groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsUpdateOverview = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateOverviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_overview/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsUpdateResourceOptions = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateResourceOptionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_resource_options/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update offering thumbnail.
 */
export const marketplaceProviderOfferingsUpdateThumbnail = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateThumbnailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_thumbnail/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderOfferingsUpdateUser = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderOfferingsUpdateUserResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/update_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Check if user has access to offering.
 */
export const marketplaceProviderOfferingsUserHasResourceAccessRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderOfferingsUserHasResourceAccessRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderOfferingsUserHasResourceAccessRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/{uuid}/user_has_resource_access/',
        ...options
    });
};

export const marketplaceProviderOfferingsGroupsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProviderOfferingsGroupsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceProviderOfferingsGroupsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-offerings/groups/',
        ...options
    });
};

export const marketplaceProviderResourcesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceProviderResourcesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceProviderResourcesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/',
        ...options
    });
};

export const marketplaceProviderResourcesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderResourcesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/',
        ...options
    });
};

export const marketplaceProviderResourcesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceProviderResourcesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderResourcesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceProviderResourcesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderResourcesDetailsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesDetailsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderResourcesDetailsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/details/',
        ...options
    });
};

/**
 *
 * This endpoint provides a config file for GLauth.
 * Example: https://github.com/glauth/glauth/blob/master/v2/sample-simple.cfg
 * It is assumed that the config is used by an external agent,
 * which synchronizes data from Waldur to GLauth.
 *
 */
export const marketplaceProviderResourcesGlauthUsersConfigRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesGlauthUsersConfigRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderResourcesGlauthUsersConfigRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/glauth_users_config/',
        ...options
    });
};

/**
 * Move resource to another project.
 */
export const marketplaceProviderResourcesMoveResource = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesMoveResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesMoveResourceResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/move_resource/',
        ...options
    });
};

export const marketplaceProviderResourcesOfferingRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesOfferingRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderResourcesOfferingRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/offering/',
        ...options
    });
};

export const marketplaceProviderResourcesOfferingForSubresourcesList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesOfferingForSubresourcesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderResourcesOfferingForSubresourcesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/offering_for_subresources/',
        ...options
    });
};

export const marketplaceProviderResourcesPlanPeriodsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesPlanPeriodsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderResourcesPlanPeriodsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/plan_periods/',
        ...options
    });
};

export const marketplaceProviderResourcesRefreshLastSync = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesRefreshLastSyncData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesRefreshLastSyncResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/refresh_last_sync/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderResourcesSetAsErred = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSetAsErredData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesSetAsErredResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/set_as_erred/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderResourcesSetAsOk = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSetAsOkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesSetAsOkResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/set_as_ok/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderResourcesSetBackendId = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSetBackendIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesSetBackendIdResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/set_backend_id/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderResourcesSetBackendMetadata = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSetBackendMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesSetBackendMetadataResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/set_backend_metadata/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderResourcesSetEndDateByProvider = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSetEndDateByProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesSetEndDateByProviderResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/set_end_date_by_provider/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Set end date of the resource by staff.
 */
export const marketplaceProviderResourcesSetEndDateByStaff = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSetEndDateByStaffData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/set_end_date_by_staff/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderResourcesSetLimits = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSetLimitsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesSetLimitsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/set_limits/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Set slug for resource.
 */
export const marketplaceProviderResourcesSetSlug = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSetSlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/set_slug/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceProviderResourcesSubmitReport = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesSubmitReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesSubmitReportResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/submit_report/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Return users connected to the project.
 */
export const marketplaceProviderResourcesTeamList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesTeamListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceProviderResourcesTeamListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/team/',
        ...options
    });
};

export const marketplaceProviderResourcesTerminate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesTerminateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceProviderResourcesTerminateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/terminate/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete marketplace resource and related plugin resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const marketplaceProviderResourcesUnlink = <ThrowOnError extends boolean = false>(options: Options<MarketplaceProviderResourcesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-provider-resources/{uuid}/unlink/',
        ...options
    });
};

export const marketplacePublicApiCheckSignature = <ThrowOnError extends boolean = false>(options: Options<MarketplacePublicApiCheckSignatureData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplacePublicApiCheckSignatureResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-public-api/check_signature/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplacePublicApiSetUsage = <ThrowOnError extends boolean = false>(options: Options<MarketplacePublicApiSetUsageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplacePublicApiSetUsageResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-public-api/set_usage/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplacePublicOfferingsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplacePublicOfferingsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplacePublicOfferingsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-public-offerings/',
        ...options
    });
};

export const marketplacePublicOfferingsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplacePublicOfferingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplacePublicOfferingsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-public-offerings/{uuid}/',
        ...options
    });
};

export const marketplacePublicOfferingsPlansList = <ThrowOnError extends boolean = false>(options: Options<MarketplacePublicOfferingsPlansListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplacePublicOfferingsPlansListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-public-offerings/{uuid}/plans/',
        ...options
    });
};

export const marketplacePublicOfferingsPlansRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplacePublicOfferingsPlansRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplacePublicOfferingsPlansRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-public-offerings/{uuid}/plans/{plan_uuid}/',
        ...options
    });
};

export const marketplaceRelatedCustomersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRelatedCustomersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceRelatedCustomersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-related-customers/{customer_uuid}/',
        ...options
    });
};

export const marketplaceRemoteSynchronisationsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceRemoteSynchronisationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceRemoteSynchronisationsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-remote-synchronisations/',
        ...options
    });
};

export const marketplaceRemoteSynchronisationsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRemoteSynchronisationsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceRemoteSynchronisationsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-remote-synchronisations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceRemoteSynchronisationsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRemoteSynchronisationsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceRemoteSynchronisationsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-remote-synchronisations/{uuid}/',
        ...options
    });
};

export const marketplaceRemoteSynchronisationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRemoteSynchronisationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceRemoteSynchronisationsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-remote-synchronisations/{uuid}/',
        ...options
    });
};

export const marketplaceRemoteSynchronisationsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRemoteSynchronisationsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceRemoteSynchronisationsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-remote-synchronisations/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceRemoteSynchronisationsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRemoteSynchronisationsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceRemoteSynchronisationsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-remote-synchronisations/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceRemoteSynchronisationsRunSynchronisation = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRemoteSynchronisationsRunSynchronisationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceRemoteSynchronisationsRunSynchronisationResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-remote-synchronisations/{uuid}/run_synchronisation/',
        ...options
    });
};

export const marketplaceResourceOfferingsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourceOfferingsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourceOfferingsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resource-offerings/{category_uuid}/',
        ...options
    });
};

export const marketplaceResourceUsersList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceResourceUsersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceResourceUsersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resource-users/',
        ...options
    });
};

export const marketplaceResourceUsersCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourceUsersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourceUsersCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resource-users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceResourceUsersDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourceUsersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceResourceUsersDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resource-users/{uuid}/',
        ...options
    });
};

export const marketplaceResourceUsersRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourceUsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourceUsersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resource-users/{uuid}/',
        ...options
    });
};

export const marketplaceResourcesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceResourcesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceResourcesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/',
        ...options
    });
};

export const marketplaceResourcesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourcesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/',
        ...options
    });
};

export const marketplaceResourcesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceResourcesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceResourcesUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceResourcesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceResourcesDetailsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesDetailsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourcesDetailsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/details/',
        ...options
    });
};

/**
 *
 * This endpoint provides a config file for GLauth.
 * Example: https://github.com/glauth/glauth/blob/master/v2/sample-simple.cfg
 * It is assumed that the config is used by an external agent,
 * which synchronizes data from Waldur to GLauth.
 *
 */
export const marketplaceResourcesGlauthUsersConfigRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesGlauthUsersConfigRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourcesGlauthUsersConfigRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/glauth_users_config/',
        ...options
    });
};

/**
 * Move resource to another project.
 */
export const marketplaceResourcesMoveResource = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesMoveResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourcesMoveResourceResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/move_resource/',
        ...options
    });
};

export const marketplaceResourcesOfferingRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesOfferingRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourcesOfferingRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/offering/',
        ...options
    });
};

export const marketplaceResourcesOfferingForSubresourcesList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesOfferingForSubresourcesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourcesOfferingForSubresourcesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/offering_for_subresources/',
        ...options
    });
};

export const marketplaceResourcesPlanPeriodsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesPlanPeriodsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourcesPlanPeriodsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/plan_periods/',
        ...options
    });
};

/**
 * Set end date of the resource by staff.
 */
export const marketplaceResourcesSetEndDateByStaff = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesSetEndDateByStaffData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/set_end_date_by_staff/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Set slug for resource.
 */
export const marketplaceResourcesSetSlug = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesSetSlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/set_slug/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceResourcesSwitchPlan = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesSwitchPlanData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourcesSwitchPlanResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/switch_plan/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Return users connected to the project.
 */
export const marketplaceResourcesTeamList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesTeamListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceResourcesTeamListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/team/',
        ...options
    });
};

export const marketplaceResourcesTerminate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesTerminateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourcesTerminateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/terminate/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete marketplace resource and related plugin resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const marketplaceResourcesUnlink = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/unlink/',
        ...options
    });
};

export const marketplaceResourcesUpdateLimits = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesUpdateLimitsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourcesUpdateLimitsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/update_limits/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceResourcesUpdateOptions = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesUpdateOptionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourcesUpdateOptionsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/{uuid}/update_options/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceResourcesSuggestName = <ThrowOnError extends boolean = false>(options: Options<MarketplaceResourcesSuggestNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceResourcesSuggestNameResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-resources/suggest_name/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceRobotAccountsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceRobotAccountsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceRobotAccountsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-robot-accounts/',
        ...options
    });
};

export const marketplaceRobotAccountsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceRobotAccountsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-robot-accounts/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceRobotAccountsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceRobotAccountsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/',
        ...options
    });
};

export const marketplaceRobotAccountsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceRobotAccountsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/',
        ...options
    });
};

export const marketplaceRobotAccountsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceRobotAccountsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceRobotAccountsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceRobotAccountsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceRobotAccountsSetStateCreating = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsSetStateCreatingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceRobotAccountsSetStateCreatingResponse, MarketplaceRobotAccountsSetStateCreatingError, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/set_state_creating/',
        ...options
    });
};

export const marketplaceRobotAccountsSetStateDeleted = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsSetStateDeletedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceRobotAccountsSetStateDeletedResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/set_state_deleted/',
        ...options
    });
};

export const marketplaceRobotAccountsSetStateErred = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsSetStateErredData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceRobotAccountsSetStateErredResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/set_state_erred/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceRobotAccountsSetStateOk = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsSetStateOkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceRobotAccountsSetStateOkResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/set_state_ok/',
        ...options
    });
};

export const marketplaceRobotAccountsSetStateRequestDeletion = <ThrowOnError extends boolean = false>(options: Options<MarketplaceRobotAccountsSetStateRequestDeletionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceRobotAccountsSetStateRequestDeletionResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-robot-accounts/{uuid}/set_state_request_deletion/',
        ...options
    });
};

/**
 * Retrieve available runtime states for resources, optionally filtered by project and category.
 */
export const marketplaceRuntimeStatesList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceRuntimeStatesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceRuntimeStatesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-runtime-states/',
        ...options
    });
};

export const marketplaceScreenshotsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceScreenshotsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceScreenshotsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-screenshots/',
        ...options
    });
};

export const marketplaceScreenshotsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScreenshotsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceScreenshotsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-screenshots/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceScreenshotsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScreenshotsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceScreenshotsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-screenshots/{uuid}/',
        ...options
    });
};

export const marketplaceScreenshotsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScreenshotsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceScreenshotsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-screenshots/{uuid}/',
        ...options
    });
};

export const marketplaceScreenshotsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScreenshotsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceScreenshotsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-screenshots/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceScreenshotsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScreenshotsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceScreenshotsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-screenshots/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceScriptAsyncDryRunList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceScriptAsyncDryRunListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceScriptAsyncDryRunListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-script-async-dry-run/',
        ...options
    });
};

export const marketplaceScriptAsyncDryRunRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScriptAsyncDryRunRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceScriptAsyncDryRunRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-script-async-dry-run/{uuid}/',
        ...options
    });
};

export const marketplaceScriptDryRunAsyncRun = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScriptDryRunAsyncRunData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceScriptDryRunAsyncRunResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-script-dry-run/{uuid}/async_run/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceScriptDryRunRun = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScriptDryRunRunData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceScriptDryRunRunResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-script-dry-run/{uuid}/run/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * This view allows a user to trigger a pull operation for a marketplace script resource.
 * The user must be a service consumer and have access to the resource.
 * The pull operation is performed asynchronously using Celery.
 * Pull a marketplace script resource.
 */
export const marketplaceScriptSyncResource = <ThrowOnError extends boolean = false>(options: Options<MarketplaceScriptSyncResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-script-sync-resource/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceSectionsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceSectionsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceSectionsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-sections/',
        ...options
    });
};

export const marketplaceSectionsCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceSectionsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceSectionsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-sections/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceSectionsDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceSectionsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceSectionsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-sections/{key}/',
        ...options
    });
};

export const marketplaceSectionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceSectionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceSectionsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-sections/{key}/',
        ...options
    });
};

export const marketplaceSectionsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceSectionsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceSectionsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-sections/{key}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceSectionsUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceSectionsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceSectionsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-sections/{key}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceServiceProvidersList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceServiceProvidersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceServiceProvidersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/',
        ...options
    });
};

export const marketplaceServiceProvidersCreate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceServiceProvidersCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Return customer projects of service provider.
 */
export const marketplaceServiceProvidersCustomerProjectsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersCustomerProjectsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersCustomerProjectsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{service_provider_uuid}/customer_projects/',
        ...options
    });
};

/**
 * Return customers of service provider.
 */
export const marketplaceServiceProvidersCustomersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersCustomersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersCustomersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{service_provider_uuid}/customers/',
        ...options
    });
};

/**
 * Return SSH keys of service provider.
 */
export const marketplaceServiceProvidersKeysList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersKeysListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersKeysListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{service_provider_uuid}/keys/',
        ...options
    });
};

/**
 * Return offerings of service provider.
 */
export const marketplaceServiceProvidersOfferingsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersOfferingsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersOfferingsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{service_provider_uuid}/offerings/',
        ...options
    });
};

/**
 * Return project permissions of service provider.
 */
export const marketplaceServiceProvidersProjectPermissionsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersProjectPermissionsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersProjectPermissionsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{service_provider_uuid}/project_permissions/',
        ...options
    });
};

/**
 * Return projects of service provider.
 */
export const marketplaceServiceProvidersProjectsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersProjectsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersProjectsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{service_provider_uuid}/projects/',
        ...options
    });
};

/**
 * Return customers that have access role for a specified user within service provider's scope.
 *
 * Checks for:
 * - Customers where user has direct permissions
 * - Customers with projects where user has project roles
 * - Customers related to service provider's resources
 *
 * If user UUID is invalid or missing, returns empty list.
 */
export const marketplaceServiceProvidersUserCustomersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersUserCustomersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersUserCustomersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{service_provider_uuid}/user_customers/',
        ...options
    });
};

/**
 * Return users of service provider.
 */
export const marketplaceServiceProvidersUsersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersUsersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{service_provider_uuid}/users/',
        ...options
    });
};

export const marketplaceServiceProvidersDestroy = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceServiceProvidersDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/',
        ...options
    });
};

export const marketplaceServiceProvidersRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/',
        ...options
    });
};

export const marketplaceServiceProvidersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceServiceProvidersPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceServiceProvidersUpdate = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarketplaceServiceProvidersUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceServiceProvidersAddUser = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersAddUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceServiceProvidersAddUserResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/add_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Return service provider API secret code.
 */
export const serviceProviderApiSecretCodeRetrieve = <ThrowOnError extends boolean = false>(options: Options<ServiceProviderApiSecretCodeRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ServiceProviderApiSecretCodeRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/api_secret_code/',
        ...options
    });
};

/**
 * Generate new service provider API secret code.
 */
export const serviceProviderApiSecretCodeGenerate = <ThrowOnError extends boolean = false>(options: Options<ServiceProviderApiSecretCodeGenerateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ServiceProviderApiSecretCodeGenerateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/api_secret_code/',
        ...options
    });
};

export const marketplaceServiceProvidersDeleteUser = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/delete_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceServiceProvidersListUsersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersListUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersListUsersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/list_users/',
        ...options
    });
};

export const marketplaceServiceProvidersRevenueList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersRevenueListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersRevenueListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/revenue/',
        ...options
    });
};

export const marketplaceServiceProvidersRobotAccountCustomersList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersRobotAccountCustomersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersRobotAccountCustomersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/robot_account_customers/',
        ...options
    });
};

export const marketplaceServiceProvidersRobotAccountProjectsList = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersRobotAccountProjectsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersRobotAccountProjectsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/robot_account_projects/',
        ...options
    });
};

export const marketplaceServiceProvidersSetOfferingsUsername = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersSetOfferingsUsernameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceServiceProvidersSetOfferingsUsernameResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/set_offerings_username/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceServiceProvidersStatRetrieve = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersStatRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceServiceProvidersStatRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/stat/',
        ...options
    });
};

export const marketplaceServiceProvidersUpdateUser = <ThrowOnError extends boolean = false>(options: Options<MarketplaceServiceProvidersUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceServiceProvidersUpdateUserResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-service-providers/{uuid}/update_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Return component usages for current month.
 */
export const marketplaceStatsComponentUsagesRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsComponentUsagesRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/component_usages/',
        ...options
    });
};

/**
 * Return component usages per month.
 */
export const marketplaceStatsComponentUsagesPerMonthRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsComponentUsagesPerMonthRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/component_usages_per_month/',
        ...options
    });
};

/**
 * Return component usages per project.
 */
export const marketplaceStatsComponentUsagesPerProjectRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsComponentUsagesPerProjectRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/component_usages_per_project/',
        ...options
    });
};

/**
 * Count active resources grouped by offering.
 */
export const marketplaceStatsCountActiveResourcesGroupedByOfferingList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountActiveResourcesGroupedByOfferingListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsCountActiveResourcesGroupedByOfferingListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/count_active_resources_grouped_by_offering/',
        ...options
    });
};

/**
 * Count active resources grouped by offering country.
 */
export const marketplaceStatsCountActiveResourcesGroupedByOfferingCountryList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountActiveResourcesGroupedByOfferingCountryListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsCountActiveResourcesGroupedByOfferingCountryListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/count_active_resources_grouped_by_offering_country/',
        ...options
    });
};

/**
 * Count active resources grouped by organization group.
 */
export const marketplaceStatsCountActiveResourcesGroupedByOrganizationGroupList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountActiveResourcesGroupedByOrganizationGroupListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsCountActiveResourcesGroupedByOrganizationGroupListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/count_active_resources_grouped_by_organization_group/',
        ...options
    });
};

/**
 * Count projects grouped by provider and industry flag
 */
export const marketplaceStatsCountProjectsGroupedByProviderAndIndustryFlagList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountProjectsGroupedByProviderAndIndustryFlagListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsCountProjectsGroupedByProviderAndIndustryFlagListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/count_projects_grouped_by_provider_and_industry_flag/',
        ...options
    });
};

/**
 * Count projects grouped by provider and OECD code
 */
export const marketplaceStatsCountProjectsGroupedByProviderAndOecdList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountProjectsGroupedByProviderAndOecdListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsCountProjectsGroupedByProviderAndOecdListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/count_projects_grouped_by_provider_and_oecd/',
        ...options
    });
};

/**
 * Count projects of service providers.
 */
export const marketplaceStatsCountProjectsOfServiceProvidersRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountProjectsOfServiceProvidersRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/count_projects_of_service_providers/',
        ...options
    });
};

/**
 * Count projects of service providers grouped by OECD.
 */
export const marketplaceStatsCountProjectsOfServiceProvidersGroupedByOecdRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountProjectsOfServiceProvidersGroupedByOecdRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/count_projects_of_service_providers_grouped_by_oecd/',
        ...options
    });
};

/**
 * Count unique users connected with active resources of service provider.
 */
export const marketplaceStatsCountUniqueUsersConnectedWithActiveResourcesOfServiceProviderRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountUniqueUsersConnectedWithActiveResourcesOfServiceProviderRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/count_unique_users_connected_with_active_resources_of_service_provider/',
        ...options
    });
};

/**
 * Count users of service providers.
 */
export const marketplaceStatsCountUsersOfServiceProvidersRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCountUsersOfServiceProvidersRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/count_users_of_service_providers/',
        ...options
    });
};

/**
 * Return count of customer members.
 */
export const marketplaceStatsCustomerMemberCountList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsCustomerMemberCountListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsCustomerMemberCountListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/customer_member_count/',
        ...options
    });
};

/**
 * Retrieve statistics about the number of offerings, grouped by category and service provider.
 */
export const marketplaceStatsOfferingsCounterStatsList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsOfferingsCounterStatsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsOfferingsCounterStatsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/offerings_counter_stats/',
        ...options
    });
};

/**
 * Return project count per organization.
 */
export const marketplaceStatsOrganizationProjectCountList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsOrganizationProjectCountListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsOrganizationProjectCountListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/organization_project_count/',
        ...options
    });
};

/**
 * Return resource count per organization.
 */
export const marketplaceStatsOrganizationResourceCountList = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsOrganizationResourceCountListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceStatsOrganizationResourceCountListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/organization_resource_count/',
        ...options
    });
};

/**
 * Group project limits by industry flag.
 */
export const marketplaceStatsProjectsLimitsGroupedByIndustryFlagRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsProjectsLimitsGroupedByIndustryFlagRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/projects_limits_grouped_by_industry_flag/',
        ...options
    });
};

/**
 * Group project limits by OECD code.
 */
export const marketplaceStatsProjectsLimitsGroupedByOecdRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsProjectsLimitsGroupedByOecdRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/projects_limits_grouped_by_oecd/',
        ...options
    });
};

/**
 * Group project usages by industry flag.
 */
export const marketplaceStatsProjectsUsagesGroupedByIndustryFlagRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsProjectsUsagesGroupedByIndustryFlagRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/projects_usages_grouped_by_industry_flag/',
        ...options
    });
};

/**
 * Group project usages by OECD code.
 */
export const marketplaceStatsProjectsUsagesGroupedByOecdRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsProjectsUsagesGroupedByOecdRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/projects_usages_grouped_by_oecd/',
        ...options
    });
};

/**
 * Return resources limits per offering.
 */
export const marketplaceStatsResourcesLimitsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsResourcesLimitsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/resources_limits/',
        ...options
    });
};

/**
 * Total cost of active resources per offering.
 */
export const marketplaceStatsTotalCostOfActiveResourcesPerOfferingRetrieve = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceStatsTotalCostOfActiveResourcesPerOfferingRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/marketplace-stats/total_cost_of_active_resources_per_offering/',
        ...options
    });
};

/**
 * Get media file
 */
export const mediaRetrieve = <ThrowOnError extends boolean = false>(options: Options<MediaRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MediaRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/media/{uuid}/',
        ...options
    });
};

export const notificationMessagesList = <ThrowOnError extends boolean = false>(options?: Options<NotificationMessagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<NotificationMessagesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/notification-messages/',
        ...options
    });
};

export const notificationMessagesCreate = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NotificationMessagesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/notification-messages/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const notificationMessagesTemplatesList = <ThrowOnError extends boolean = false>(options?: Options<NotificationMessagesTemplatesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<NotificationMessagesTemplatesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/notification-messages-templates/',
        ...options
    });
};

export const notificationMessagesTemplatesCreate = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesTemplatesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NotificationMessagesTemplatesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/notification-messages-templates/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const notificationMessagesTemplatesDestroy = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesTemplatesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<NotificationMessagesTemplatesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/notification-messages-templates/{uuid}/',
        ...options
    });
};

export const notificationMessagesTemplatesRetrieve = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesTemplatesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<NotificationMessagesTemplatesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/notification-messages-templates/{uuid}/',
        ...options
    });
};

export const notificationMessagesTemplatesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesTemplatesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<NotificationMessagesTemplatesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/notification-messages-templates/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const notificationMessagesTemplatesUpdate = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesTemplatesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<NotificationMessagesTemplatesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/notification-messages-templates/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const notificationMessagesTemplatesOverride = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesTemplatesOverrideData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/notification-messages-templates/{uuid}/override/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const notificationMessagesDestroy = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<NotificationMessagesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/notification-messages/{uuid}/',
        ...options
    });
};

export const notificationMessagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<NotificationMessagesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/notification-messages/{uuid}/',
        ...options
    });
};

export const notificationMessagesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<NotificationMessagesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/notification-messages/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const notificationMessagesUpdate = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<NotificationMessagesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/notification-messages/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const notificationMessagesDisable = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesDisableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/notification-messages/{uuid}/disable/',
        ...options
    });
};

export const notificationMessagesEnable = <ThrowOnError extends boolean = false>(options: Options<NotificationMessagesEnableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/notification-messages/{uuid}/enable/',
        ...options
    });
};

export const openstackBackupsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackBackupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackBackupsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-backups/',
        ...options
    });
};

export const openstackBackupsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackBackupsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackBackupsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-backups/{uuid}/',
        ...options
    });
};

export const openstackBackupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackBackupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackBackupsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-backups/{uuid}/',
        ...options
    });
};

export const openstackBackupsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackBackupsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackBackupsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-backups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackBackupsUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackBackupsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackBackupsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-backups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackBackupsPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackBackupsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-backups/{uuid}/pull/',
        ...options
    });
};

/**
 * Restore instance from backup
 */
export const openstackBackupsRestore = <ThrowOnError extends boolean = false>(options: Options<OpenstackBackupsRestoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackBackupsRestoreResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-backups/{uuid}/restore/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackBackupsUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackBackupsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-backups/{uuid}/unlink/',
        ...options
    });
};

export const openstackFlavorsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackFlavorsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackFlavorsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-flavors/',
        ...options
    });
};

export const openstackFlavorsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackFlavorsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackFlavorsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-flavors/{uuid}/',
        ...options
    });
};

export const openstackFlavorsUsageStatsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<OpenstackFlavorsUsageStatsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackFlavorsUsageStatsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-flavors/usage_stats/',
        ...options
    });
};

/**
 * Status *DOWN* means that floating IP is not linked to a VM, status *ACTIVE* means that it is in use.
 */
export const openstackFloatingIpsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackFloatingIpsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackFloatingIpsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-floating-ips/',
        ...options
    });
};

export const openstackFloatingIpsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackFloatingIpsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackFloatingIpsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-floating-ips/{uuid}/',
        ...options
    });
};

export const openstackFloatingIpsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackFloatingIpsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackFloatingIpsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-floating-ips/{uuid}/',
        ...options
    });
};

/**
 * Attach floating IP to port
 */
export const openstackFloatingIpsAttachToPort = <ThrowOnError extends boolean = false>(options: Options<OpenstackFloatingIpsAttachToPortData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-floating-ips/{uuid}/attach_to_port/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Detach floating IP from port
 */
export const openstackFloatingIpsDetachFromPort = <ThrowOnError extends boolean = false>(options: Options<OpenstackFloatingIpsDetachFromPortData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-floating-ips/{uuid}/detach_from_port/',
        ...options
    });
};

export const openstackFloatingIpsPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackFloatingIpsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-floating-ips/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackFloatingIpsUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackFloatingIpsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-floating-ips/{uuid}/unlink/',
        ...options
    });
};

/**
 * Update description of the floating IP
 */
export const openstackFloatingIpsUpdateDescription = <ThrowOnError extends boolean = false>(options: Options<OpenstackFloatingIpsUpdateDescriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-floating-ips/{uuid}/update_description/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackImagesList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackImagesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackImagesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-images/',
        ...options
    });
};

export const openstackImagesRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackImagesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackImagesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-images/{uuid}/',
        ...options
    });
};

export const openstackImagesUsageStatsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<OpenstackImagesUsageStatsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackImagesUsageStatsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-images/usage_stats/',
        ...options
    });
};

export const openstackInstanceAvailabilityZonesList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackInstanceAvailabilityZonesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackInstanceAvailabilityZonesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instance-availability-zones/',
        ...options
    });
};

export const openstackInstanceAvailabilityZonesRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstanceAvailabilityZonesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackInstanceAvailabilityZonesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instance-availability-zones/{uuid}/',
        ...options
    });
};

export const openstackInstancesList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackInstancesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackInstancesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/',
        ...options
    });
};

export const openstackInstancesRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackInstancesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/',
        ...options
    });
};

export const openstackInstancesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackInstancesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackInstancesUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackInstancesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create backup from instance
 */
export const openstackInstancesBackup = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesBackupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackInstancesBackupResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/backup/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Change flavor of the instance
 */
export const openstackInstancesChangeFlavor = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesChangeFlavorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/change_flavor/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get console url for the instance
 */
export const openstackInstancesConsoleRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesConsoleRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackInstancesConsoleRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/console/',
        ...options
    });
};

/**
 * Get console log for the instance
 */
export const openstackInstancesConsoleLogRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesConsoleLogRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackInstancesConsoleLogRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/console_log/',
        ...options
    });
};

/**
 * Get a list of instance floating IPs
 */
export const openstackInstancesFloatingIpsList = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesFloatingIpsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackInstancesFloatingIpsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/floating_ips/',
        ...options
    });
};

/**
 * Get a list of instance ports
 */
export const openstackInstancesPortsList = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesPortsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackInstancesPortsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/ports/',
        ...options
    });
};

export const openstackInstancesPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/pull/',
        ...options
    });
};

/**
 * Restart the instance
 */
export const openstackInstancesRestart = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesRestartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/restart/',
        ...options
    });
};

/**
 * Start the instance
 */
export const openstackInstancesStart = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/start/',
        ...options
    });
};

/**
 * Stop the instance
 */
export const openstackInstancesStop = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/stop/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackInstancesUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/unlink/',
        ...options
    });
};

/**
 * Update allowed address pairs of the instance
 */
export const openstackInstancesUpdateAllowedAddressPairs = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesUpdateAllowedAddressPairsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/update_allowed_address_pairs/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update floating IPs of the instance
 */
export const openstackInstancesUpdateFloatingIps = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesUpdateFloatingIpsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/update_floating_ips/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update ports of the instance
 */
export const openstackInstancesUpdatePorts = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesUpdatePortsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/update_ports/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update security groups of the instance
 */
export const openstackInstancesUpdateSecurityGroups = <ThrowOnError extends boolean = false>(options: Options<OpenstackInstancesUpdateSecurityGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-instances/{uuid}/update_security_groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackMigrationsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackMigrationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackMigrationsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-migrations/',
        ...options
    });
};

export const openstackMigrationsCreate = <ThrowOnError extends boolean = false>(options: Options<OpenstackMigrationsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackMigrationsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-migrations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackMigrationsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackMigrationsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackMigrationsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-migrations/{uuid}/',
        ...options
    });
};

export const openstackMigrationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackMigrationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackMigrationsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-migrations/{uuid}/',
        ...options
    });
};

export const openstackMigrationsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackMigrationsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackMigrationsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-migrations/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackMigrationsUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackMigrationsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackMigrationsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-migrations/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackMigrationsRun = <ThrowOnError extends boolean = false>(options: Options<OpenstackMigrationsRunData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-migrations/{uuid}/run/',
        ...options
    });
};

export const openstackNetworksList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackNetworksListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackNetworksListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-networks/',
        ...options
    });
};

export const openstackNetworksDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackNetworksDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-networks/{uuid}/',
        ...options
    });
};

export const openstackNetworksRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackNetworksRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-networks/{uuid}/',
        ...options
    });
};

export const openstackNetworksPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackNetworksPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-networks/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackNetworksUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackNetworksUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-networks/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackNetworksCreatePort = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksCreatePortData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackNetworksCreatePortResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-networks/{uuid}/create_port/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackNetworksCreateSubnet = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksCreateSubnetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackNetworksCreateSubnetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-networks/{uuid}/create_subnet/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackNetworksPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-networks/{uuid}/pull/',
        ...options
    });
};

export const openstackNetworksSetMtu = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksSetMtuData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackNetworksSetMtuResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-networks/{uuid}/set_mtu/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackNetworksUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackNetworksUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-networks/{uuid}/unlink/',
        ...options
    });
};

export const openstackPortsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackPortsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackPortsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-ports/',
        ...options
    });
};

export const openstackPortsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackPortsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-ports/{uuid}/',
        ...options
    });
};

export const openstackPortsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackPortsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-ports/{uuid}/',
        ...options
    });
};

export const openstackPortsPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-ports/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackPortsUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackPortsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-ports/{uuid}/unlink/',
        ...options
    });
};

export const openstackRoutersList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackRoutersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackRoutersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-routers/',
        ...options
    });
};

export const openstackRoutersRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackRoutersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackRoutersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-routers/{uuid}/',
        ...options
    });
};

export const openstackRoutersSetRoutes = <ThrowOnError extends boolean = false>(options: Options<OpenstackRoutersSetRoutesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackRoutersSetRoutesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-routers/{uuid}/set_routes/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackSecurityGroupsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackSecurityGroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackSecurityGroupsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-security-groups/',
        ...options
    });
};

export const openstackSecurityGroupsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackSecurityGroupsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackSecurityGroupsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-security-groups/{uuid}/',
        ...options
    });
};

export const openstackSecurityGroupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackSecurityGroupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackSecurityGroupsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-security-groups/{uuid}/',
        ...options
    });
};

export const openstackSecurityGroupsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackSecurityGroupsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackSecurityGroupsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-security-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackSecurityGroupsUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackSecurityGroupsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackSecurityGroupsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-security-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackSecurityGroupsPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackSecurityGroupsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-security-groups/{uuid}/pull/',
        ...options
    });
};

/**
 * Update security group rules
 */
export const openstackSecurityGroupsSetRules = <ThrowOnError extends boolean = false>(options: Options<OpenstackSecurityGroupsSetRulesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-security-groups/{uuid}/set_rules/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackSecurityGroupsUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackSecurityGroupsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-security-groups/{uuid}/unlink/',
        ...options
    });
};

export const openstackServerGroupsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackServerGroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackServerGroupsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-server-groups/',
        ...options
    });
};

export const openstackServerGroupsCreate = <ThrowOnError extends boolean = false>(options: Options<OpenstackServerGroupsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackServerGroupsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-server-groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackServerGroupsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackServerGroupsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackServerGroupsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-server-groups/{uuid}/',
        ...options
    });
};

export const openstackServerGroupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackServerGroupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackServerGroupsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-server-groups/{uuid}/',
        ...options
    });
};

export const openstackServerGroupsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackServerGroupsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackServerGroupsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-server-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackServerGroupsUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackServerGroupsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackServerGroupsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-server-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackServerGroupsPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackServerGroupsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-server-groups/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackServerGroupsUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackServerGroupsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-server-groups/{uuid}/unlink/',
        ...options
    });
};

export const openstackSnapshotsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackSnapshotsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackSnapshotsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-snapshots/',
        ...options
    });
};

export const openstackSnapshotsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackSnapshotsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackSnapshotsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-snapshots/{uuid}/',
        ...options
    });
};

export const openstackSnapshotsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackSnapshotsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackSnapshotsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-snapshots/{uuid}/',
        ...options
    });
};

export const openstackSnapshotsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackSnapshotsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackSnapshotsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-snapshots/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackSnapshotsUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackSnapshotsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackSnapshotsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-snapshots/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackSnapshotsPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackSnapshotsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-snapshots/{uuid}/pull/',
        ...options
    });
};

/**
 * Get a list of snapshot restorations
 */
export const openstackSnapshotsRestorationsList = <ThrowOnError extends boolean = false>(options: Options<OpenstackSnapshotsRestorationsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackSnapshotsRestorationsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-snapshots/{uuid}/restorations/',
        ...options
    });
};

/**
 * Restore volume from snapshot
 */
export const openstackSnapshotsRestore = <ThrowOnError extends boolean = false>(options: Options<OpenstackSnapshotsRestoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackSnapshotsRestoreResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-snapshots/{uuid}/restore/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackSnapshotsUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackSnapshotsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-snapshots/{uuid}/unlink/',
        ...options
    });
};

export const openstackSubnetsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackSubnetsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackSubnetsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-subnets/',
        ...options
    });
};

export const openstackSubnetsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackSubnetsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackSubnetsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-subnets/{uuid}/',
        ...options
    });
};

export const openstackSubnetsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackSubnetsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackSubnetsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-subnets/{uuid}/',
        ...options
    });
};

export const openstackSubnetsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackSubnetsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackSubnetsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-subnets/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackSubnetsUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackSubnetsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackSubnetsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-subnets/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackSubnetsConnect = <ThrowOnError extends boolean = false>(options: Options<OpenstackSubnetsConnectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-subnets/{uuid}/connect/',
        ...options
    });
};

export const openstackSubnetsDisconnect = <ThrowOnError extends boolean = false>(options: Options<OpenstackSubnetsDisconnectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-subnets/{uuid}/disconnect/',
        ...options
    });
};

export const openstackSubnetsPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackSubnetsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-subnets/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackSubnetsUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackSubnetsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-subnets/{uuid}/unlink/',
        ...options
    });
};

export const openstackTenantsList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackTenantsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackTenantsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/',
        ...options
    });
};

export const openstackTenantsCreate = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackTenantsDestroy = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OpenstackTenantsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/',
        ...options
    });
};

export const openstackTenantsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackTenantsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/',
        ...options
    });
};

export const openstackTenantsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackTenantsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackTenantsUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackTenantsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Return a list of volumes from backend
 */
export const openstackTenantsBackendInstancesList = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsBackendInstancesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackTenantsBackendInstancesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/backend_instances/',
        ...options
    });
};

/**
 * Return a list of volumes from backend
 */
export const openstackTenantsBackendVolumesList = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsBackendVolumesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackTenantsBackendVolumesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/backend_volumes/',
        ...options
    });
};

/**
 * Change password for tenant user
 */
export const openstackTenantsChangePassword = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsChangePasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/change_password/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create floating IP for tenant
 */
export const openstackTenantsCreateFloatingIp = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsCreateFloatingIpData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsCreateFloatingIpResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/create_floating_ip/',
        ...options
    });
};

/**
 * Create network for tenant
 */
export const openstackTenantsCreateNetwork = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsCreateNetworkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsCreateNetworkResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/create_network/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackTenantsCreateSecurityGroup = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsCreateSecurityGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsCreateSecurityGroupResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/create_security_group/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackTenantsCreateServerGroup = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsCreateServerGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsCreateServerGroupResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/create_server_group/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackTenantsPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/pull/',
        ...options
    });
};

/**
 * Trigger job to pull floating IPs from remote VPC
 */
export const openstackTenantsPullFloatingIps = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsPullFloatingIpsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/pull_floating_ips/',
        ...options
    });
};

/**
 * It triggers celery job to pull quotas from remote VPC
 */
export const openstackTenantsPullQuotas = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsPullQuotasData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/pull_quotas/',
        ...options
    });
};

/**
 * Trigger job to pull security groups from remote VPC
 */
export const openstackTenantsPullSecurityGroups = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsPullSecurityGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsPullSecurityGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/pull_security_groups/',
        ...options
    });
};

/**
 * Trigger job to pull server groups from remote VPC
 */
export const openstackTenantsPullServerGroups = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsPullServerGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsPullServerGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/pull_server_groups/',
        ...options
    });
};

/**
 * A quota can be set for a particular tenant. Only staff users can do that.
 * In order to set quota submit POST request to /api/openstack-tenants/<uuid>/set_quotas/.
 * The quota values are propagated to the backend.
 *
 * The following quotas are supported. All values are expected to be integers:
 *
 * - instances - maximal number of created instances.
 * - ram - maximal size of ram for allocation. In MiB_.
 * - storage - maximal size of storage for allocation. In MiB_.
 * - vcpu - maximal number of virtual cores for allocation.
 * - security_group_count - maximal number of created security groups.
 * - security_group_rule_count - maximal number of created security groups rules.
 * - volumes - maximal number of created volumes.
 * - snapshots - maximal number of created snapshots.
 *
 * It is possible to update quotas by one or by submitting all the fields in one request.
 * Waldur will attempt to update the provided quotas. Please note, that if provided quotas are
 * conflicting with the backend (e.g. requested number of instances is below of the already existing ones),
 * some quotas might not be applied.
 *
 * .. _MiB: http://en.wikipedia.org/wiki/Mebibyte
 *
 * Response code of a successful request is **202 ACCEPTED**.
 * In case tenant is in a non-stable status, the response would be **409 CONFLICT**.
 * In this case REST client is advised to repeat the request after some time.
 * On successful completion the task will synchronize quotas with the backend.
 */
export const openstackTenantsSetQuotas = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsSetQuotasData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackTenantsSetQuotasResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/set_quotas/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackTenantsUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackTenantsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-tenants/{uuid}/unlink/',
        ...options
    });
};

export const openstackVolumeAvailabilityZonesList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackVolumeAvailabilityZonesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackVolumeAvailabilityZonesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-volume-availability-zones/',
        ...options
    });
};

export const openstackVolumeAvailabilityZonesRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumeAvailabilityZonesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackVolumeAvailabilityZonesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-volume-availability-zones/{uuid}/',
        ...options
    });
};

export const openstackVolumeTypesList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackVolumeTypesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackVolumeTypesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-volume-types/',
        ...options
    });
};

export const openstackVolumeTypesRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumeTypesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackVolumeTypesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-volume-types/{uuid}/',
        ...options
    });
};

export const openstackVolumesList = <ThrowOnError extends boolean = false>(options?: Options<OpenstackVolumesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OpenstackVolumesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-volumes/',
        ...options
    });
};

export const openstackVolumesRetrieve = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenstackVolumesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/',
        ...options
    });
};

export const openstackVolumesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OpenstackVolumesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackVolumesUpdate = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OpenstackVolumesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Attach volume to instance
 */
export const openstackVolumesAttach = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesAttachData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/attach/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Detach instance from volume
 */
export const openstackVolumesDetach = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesDetachData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/detach/',
        ...options
    });
};

/**
 * Increase volume size
 */
export const openstackVolumesExtend = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesExtendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/extend/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const openstackVolumesPull = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/pull/',
        ...options
    });
};

/**
 * Retype detached volume
 */
export const openstackVolumesRetype = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesRetypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/retype/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create snapshot from volume
 */
export const openstackVolumesSnapshot = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesSnapshotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OpenstackVolumesSnapshotResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/snapshot/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const openstackVolumesUnlink = <ThrowOnError extends boolean = false>(options: Options<OpenstackVolumesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/openstack-volumes/{uuid}/unlink/',
        ...options
    });
};

export const organizationGroupsList = <ThrowOnError extends boolean = false>(options?: Options<OrganizationGroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OrganizationGroupsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/organization-groups/',
        ...options
    });
};

export const organizationGroupsCreate = <ThrowOnError extends boolean = false>(options: Options<OrganizationGroupsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrganizationGroupsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/organization-groups/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const organizationGroupsDestroy = <ThrowOnError extends boolean = false>(options: Options<OrganizationGroupsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrganizationGroupsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/organization-groups/{uuid}/',
        ...options
    });
};

export const organizationGroupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<OrganizationGroupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationGroupsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/organization-groups/{uuid}/',
        ...options
    });
};

export const organizationGroupsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<OrganizationGroupsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OrganizationGroupsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/organization-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const organizationGroupsUpdate = <ThrowOnError extends boolean = false>(options: Options<OrganizationGroupsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OrganizationGroupsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/organization-groups/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const overrideSettingsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<OverrideSettingsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OverrideSettingsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/override-settings/',
        ...options
    });
};

export const overrideSettings = <ThrowOnError extends boolean = false>(options?: Options<OverrideSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/override-settings/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const paymentProfilesList = <ThrowOnError extends boolean = false>(options?: Options<PaymentProfilesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PaymentProfilesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payment-profiles/',
        ...options
    });
};

export const paymentProfilesCreate = <ThrowOnError extends boolean = false>(options: Options<PaymentProfilesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PaymentProfilesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payment-profiles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const paymentProfilesDestroy = <ThrowOnError extends boolean = false>(options: Options<PaymentProfilesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PaymentProfilesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payment-profiles/{uuid}/',
        ...options
    });
};

export const paymentProfilesRetrieve = <ThrowOnError extends boolean = false>(options: Options<PaymentProfilesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PaymentProfilesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payment-profiles/{uuid}/',
        ...options
    });
};

export const paymentProfilesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<PaymentProfilesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PaymentProfilesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payment-profiles/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const paymentProfilesUpdate = <ThrowOnError extends boolean = false>(options: Options<PaymentProfilesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PaymentProfilesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payment-profiles/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const paymentProfilesEnable = <ThrowOnError extends boolean = false>(options: Options<PaymentProfilesEnableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payment-profiles/{uuid}/enable/',
        ...options
    });
};

export const paymentsList = <ThrowOnError extends boolean = false>(options?: Options<PaymentsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PaymentsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payments/',
        ...options
    });
};

export const paymentsCreate = <ThrowOnError extends boolean = false>(options: Options<PaymentsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PaymentsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payments/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const paymentsDestroy = <ThrowOnError extends boolean = false>(options: Options<PaymentsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PaymentsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payments/{uuid}/',
        ...options
    });
};

export const paymentsRetrieve = <ThrowOnError extends boolean = false>(options: Options<PaymentsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PaymentsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payments/{uuid}/',
        ...options
    });
};

export const paymentsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<PaymentsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PaymentsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payments/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const paymentsUpdate = <ThrowOnError extends boolean = false>(options: Options<PaymentsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PaymentsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payments/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Link a payment to an invoice. Payment can be linked to an invoice only if they belong to the same customer.
 */
export const paymentsLinkToInvoice = <ThrowOnError extends boolean = false>(options: Options<PaymentsLinkToInvoiceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PaymentsLinkToInvoiceResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payments/{uuid}/link_to_invoice/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unlink a payment from an invoice. Remove connection between payment and existing linked invoice.
 */
export const paymentsUnlinkFromInvoice = <ThrowOnError extends boolean = false>(options: Options<PaymentsUnlinkFromInvoiceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/payments/{uuid}/unlink_from_invoice/',
        ...options
    });
};

export const projectCreditsList = <ThrowOnError extends boolean = false>(options?: Options<ProjectCreditsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProjectCreditsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/project-credits/',
        ...options
    });
};

export const projectCreditsCreate = <ThrowOnError extends boolean = false>(options: Options<ProjectCreditsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectCreditsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/project-credits/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const projectCreditsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProjectCreditsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProjectCreditsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/project-credits/{uuid}/',
        ...options
    });
};

export const projectCreditsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectCreditsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectCreditsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/project-credits/{uuid}/',
        ...options
    });
};

export const projectCreditsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjectCreditsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProjectCreditsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/project-credits/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const projectCreditsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjectCreditsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProjectCreditsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/project-credits/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List project quotas.
 */
export const projectQuotasList = <ThrowOnError extends boolean = false>(options?: Options<ProjectQuotasListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProjectQuotasListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/project-quotas/',
        ...options
    });
};

export const projectTypesList = <ThrowOnError extends boolean = false>(options?: Options<ProjectTypesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProjectTypesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/project-types/',
        ...options
    });
};

export const projectTypesRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectTypesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectTypesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/project-types/{uuid}/',
        ...options
    });
};

export const projectsList = <ThrowOnError extends boolean = false>(options?: Options<ProjectsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProjectsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/projects/',
        ...options
    });
};

/**
 * A new project can be created by users with staff privilege (is_staff=True) or customer owners.
 * Project resource quota is optional.
 */
export const projectsCreate = <ThrowOnError extends boolean = false>(options: Options<ProjectsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/projects/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const projectsMarketplaceChecklistsList = <ThrowOnError extends boolean = false>(options: Options<ProjectsMarketplaceChecklistsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsMarketplaceChecklistsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/projects/{project_uuid}/marketplace-checklists/',
        ...options
    });
};

/**
 * If a project has connected instances, deletion request will fail with 409 response code.
 */
export const projectsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProjectsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProjectsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/projects/{uuid}/',
        ...options
    });
};

export const projectsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/projects/{uuid}/',
        ...options
    });
};

export const projectsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjectsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProjectsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/projects/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const projectsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProjectsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProjectsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/projects/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const projectsAddUser = <ThrowOnError extends boolean = false>(options: Options<ProjectsAddUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsAddUserResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/projects/{uuid}/add_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const projectsDeleteUser = <ThrowOnError extends boolean = false>(options: Options<ProjectsDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/projects/{uuid}/delete_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const projectsListUsersList = <ThrowOnError extends boolean = false>(options: Options<ProjectsListUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsListUsersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/projects/{uuid}/list_users/',
        ...options
    });
};

export const projectsMoveProject = <ThrowOnError extends boolean = false>(options: Options<ProjectsMoveProjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsMoveProjectResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/projects/{uuid}/move_project/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Return statistics about project resources usage
 */
export const projectsStatsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProjectsStatsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProjectsStatsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/projects/{uuid}/stats/',
        ...options
    });
};

export const projectsUpdateUser = <ThrowOnError extends boolean = false>(options: Options<ProjectsUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProjectsUpdateUserResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/projects/{uuid}/update_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const promotionsCampaignsList = <ThrowOnError extends boolean = false>(options?: Options<PromotionsCampaignsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PromotionsCampaignsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/promotions-campaigns/',
        ...options
    });
};

export const promotionsCampaignsCreate = <ThrowOnError extends boolean = false>(options: Options<PromotionsCampaignsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PromotionsCampaignsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/promotions-campaigns/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const promotionsCampaignsDestroy = <ThrowOnError extends boolean = false>(options: Options<PromotionsCampaignsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PromotionsCampaignsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/promotions-campaigns/{uuid}/',
        ...options
    });
};

export const promotionsCampaignsRetrieve = <ThrowOnError extends boolean = false>(options: Options<PromotionsCampaignsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PromotionsCampaignsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/promotions-campaigns/{uuid}/',
        ...options
    });
};

export const promotionsCampaignsUpdate = <ThrowOnError extends boolean = false>(options: Options<PromotionsCampaignsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PromotionsCampaignsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/promotions-campaigns/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Activate campaign.
 */
export const promotionsCampaignsActivate = <ThrowOnError extends boolean = false>(options: Options<PromotionsCampaignsActivateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/promotions-campaigns/{uuid}/activate/',
        ...options
    });
};

/**
 * Return a list of orders for which the campaign is applied.
 */
export const promotionsCampaignsOrdersList = <ThrowOnError extends boolean = false>(options: Options<PromotionsCampaignsOrdersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PromotionsCampaignsOrdersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/promotions-campaigns/{uuid}/orders/',
        ...options
    });
};

/**
 * Return a list of resources for which the campaign is applied.
 */
export const promotionsCampaignsResourcesList = <ThrowOnError extends boolean = false>(options: Options<PromotionsCampaignsResourcesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PromotionsCampaignsResourcesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/promotions-campaigns/{uuid}/resources/',
        ...options
    });
};

/**
 * Terminate campaign.
 */
export const promotionsCampaignsTerminate = <ThrowOnError extends boolean = false>(options: Options<PromotionsCampaignsTerminateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/promotions-campaigns/{uuid}/terminate/',
        ...options
    });
};

export const proposalProposalsList = <ThrowOnError extends boolean = false>(options?: Options<ProposalProposalsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProposalProposalsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/',
        ...options
    });
};

export const proposalProposalsCreate = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProposalsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProposalsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProposalProposalsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/',
        ...options
    });
};

export const proposalProposalsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProposalsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/',
        ...options
    });
};

export const proposalProposalsAddUser = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsAddUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProposalsAddUserResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/add_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Approve a proposal.
 */
export const proposalProposalsApprove = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsApproveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/approve/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Attach document to proposal.
 */
export const proposalProposalsAttachDocument = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsAttachDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/attach_document/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProposalsDeleteUser = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/delete_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProposalsListUsersList = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsListUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProposalsListUsersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/list_users/',
        ...options
    });
};

/**
 * Reject a proposal.
 */
export const proposalProposalsReject = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsRejectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/reject/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List resources for a proposal.
 */
export const proposalProposalsResourcesList = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsResourcesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProposalsResourcesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/resources/',
        ...options
    });
};

/**
 * Create resource for a proposal.
 */
export const proposalProposalsResourcesSet = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsResourcesSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProposalsResourcesSetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/resources/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProposalsResourcesDestroy = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsResourcesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProposalProposalsResourcesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/resources/{obj_uuid}/',
        ...options
    });
};

export const proposalProposalsResourcesRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsResourcesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProposalsResourcesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/resources/{obj_uuid}/',
        ...options
    });
};

export const proposalProposalsResourcesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsResourcesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProposalProposalsResourcesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/resources/{obj_uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProposalsResourcesUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsResourcesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProposalProposalsResourcesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/resources/{obj_uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Submit a proposal.
 */
export const proposalProposalsSubmit = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsSubmitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/submit/',
        ...options
    });
};

/**
 * Update project details of a proposal.
 */
export const proposalProposalsUpdateProjectDetails = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsUpdateProjectDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/update_project_details/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProposalsUpdateUser = <ThrowOnError extends boolean = false>(options: Options<ProposalProposalsUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProposalsUpdateUserResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-proposals/{uuid}/update_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProtectedCallsList = <ThrowOnError extends boolean = false>(options?: Options<ProposalProtectedCallsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProposalProtectedCallsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/',
        ...options
    });
};

export const proposalProtectedCallsCreate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProtectedCallsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProposalProtectedCallsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/',
        ...options
    });
};

export const proposalProtectedCallsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProtectedCallsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/',
        ...options
    });
};

export const proposalProtectedCallsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProposalProtectedCallsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProtectedCallsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProposalProtectedCallsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Activate a call.
 */
export const proposalProtectedCallsActivate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsActivateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/activate/',
        ...options
    });
};

export const proposalProtectedCallsAddUser = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsAddUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsAddUserResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/add_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive a call.
 */
export const proposalProtectedCallsArchive = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsArchiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/archive/',
        ...options
    });
};

/**
 * Attach documents to call.
 */
export const proposalProtectedCallsAttachDocuments = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsAttachDocumentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/attach_documents/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProtectedCallsDeleteUser = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/delete_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Detach documents from call.
 */
export const proposalProtectedCallsDetachDocuments = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsDetachDocumentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/detach_documents/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProtectedCallsListUsersList = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsListUsersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProtectedCallsListUsersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/list_users/',
        ...options
    });
};

/**
 * List offerings for a call.
 */
export const proposalProtectedCallsOfferingsList = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsOfferingsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProtectedCallsOfferingsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/offerings/',
        ...options
    });
};

/**
 * Create offering for a call.
 */
export const proposalProtectedCallsOfferingsSet = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsOfferingsSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsOfferingsSetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/offerings/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProtectedCallsOfferingsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsOfferingsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProposalProtectedCallsOfferingsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/offerings/{obj_uuid}/',
        ...options
    });
};

export const proposalProtectedCallsOfferingsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsOfferingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProtectedCallsOfferingsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/offerings/{obj_uuid}/',
        ...options
    });
};

export const proposalProtectedCallsOfferingsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsOfferingsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProposalProtectedCallsOfferingsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/offerings/{obj_uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProtectedCallsOfferingsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsOfferingsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProposalProtectedCallsOfferingsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/offerings/{obj_uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List rounds for a call.
 */
export const proposalProtectedCallsRoundsList = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsRoundsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProtectedCallsRoundsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/rounds/',
        ...options
    });
};

/**
 * Create a round for a call.
 */
export const proposalProtectedCallsRoundsSet = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsRoundsSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsRoundsSetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/rounds/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProtectedCallsRoundsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsRoundsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProposalProtectedCallsRoundsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/rounds/{obj_uuid}/',
        ...options
    });
};

export const proposalProtectedCallsRoundsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsRoundsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalProtectedCallsRoundsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/rounds/{obj_uuid}/',
        ...options
    });
};

export const proposalProtectedCallsRoundsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsRoundsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProposalProtectedCallsRoundsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/rounds/{obj_uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProtectedCallsRoundsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsRoundsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProposalProtectedCallsRoundsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/rounds/{obj_uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProtectedCallsRoundsClose = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsRoundsCloseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsRoundsCloseResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/rounds/{obj_uuid}/close/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalProtectedCallsUpdateUser = <ThrowOnError extends boolean = false>(options: Options<ProposalProtectedCallsUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalProtectedCallsUpdateUserResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-protected-calls/{uuid}/update_user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalPublicCallsList = <ThrowOnError extends boolean = false>(options?: Options<ProposalPublicCallsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProposalPublicCallsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-public-calls/',
        ...options
    });
};

export const proposalPublicCallsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalPublicCallsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalPublicCallsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-public-calls/{uuid}/',
        ...options
    });
};

export const proposalRequestedOfferingsList = <ThrowOnError extends boolean = false>(options?: Options<ProposalRequestedOfferingsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProposalRequestedOfferingsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-requested-offerings/',
        ...options
    });
};

export const proposalRequestedOfferingsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalRequestedOfferingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalRequestedOfferingsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-requested-offerings/{uuid}/',
        ...options
    });
};

/**
 * Accept a requested offering.
 */
export const proposalRequestedOfferingsAccept = <ThrowOnError extends boolean = false>(options: Options<ProposalRequestedOfferingsAcceptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-requested-offerings/{uuid}/accept/',
        ...options
    });
};

/**
 * Cancel a requested offering.
 */
export const proposalRequestedOfferingsCancel = <ThrowOnError extends boolean = false>(options: Options<ProposalRequestedOfferingsCancelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-requested-offerings/{uuid}/cancel/',
        ...options
    });
};

export const proposalRequestedResourcesList = <ThrowOnError extends boolean = false>(options?: Options<ProposalRequestedResourcesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProposalRequestedResourcesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-requested-resources/',
        ...options
    });
};

export const proposalRequestedResourcesRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalRequestedResourcesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalRequestedResourcesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-requested-resources/{uuid}/',
        ...options
    });
};

export const proposalReviewsList = <ThrowOnError extends boolean = false>(options?: Options<ProposalReviewsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProposalReviewsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-reviews/',
        ...options
    });
};

export const proposalReviewsCreate = <ThrowOnError extends boolean = false>(options: Options<ProposalReviewsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProposalReviewsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-reviews/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalReviewsDestroy = <ThrowOnError extends boolean = false>(options: Options<ProposalReviewsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProposalReviewsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-reviews/{uuid}/',
        ...options
    });
};

export const proposalReviewsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProposalReviewsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProposalReviewsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-reviews/{uuid}/',
        ...options
    });
};

export const proposalReviewsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalReviewsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProposalReviewsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-reviews/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const proposalReviewsUpdate = <ThrowOnError extends boolean = false>(options: Options<ProposalReviewsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ProposalReviewsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-reviews/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Accept a review, changing its state to IN_REVIEW.
 */
export const proposalReviewsAccept = <ThrowOnError extends boolean = false>(options: Options<ProposalReviewsAcceptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-reviews/{uuid}/accept/',
        ...options
    });
};

/**
 * Reject a review, changing its state to REJECTED.
 */
export const proposalReviewsReject = <ThrowOnError extends boolean = false>(options: Options<ProposalReviewsRejectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-reviews/{uuid}/reject/',
        ...options
    });
};

/**
 * Submit a review, changing its state to SUBMITTED.
 */
export const proposalReviewsSubmit = <ThrowOnError extends boolean = false>(options: Options<ProposalReviewsSubmitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/proposal-reviews/{uuid}/submit/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const providerInvoiceItemsList = <ThrowOnError extends boolean = false>(options?: Options<ProviderInvoiceItemsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProviderInvoiceItemsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/provider-invoice-items/',
        ...options
    });
};

export const providerInvoiceItemsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ProviderInvoiceItemsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProviderInvoiceItemsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/provider-invoice-items/{id}/',
        ...options
    });
};

/**
 * Execute SQL query against readonly database
 */
export const query = <ThrowOnError extends boolean = false>(options: Options<QueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QueryResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/query/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rabbitmqUserStatsList = <ThrowOnError extends boolean = false>(options?: Options<RabbitmqUserStatsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RabbitmqUserStatsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rabbitmq-user-stats/',
        ...options
    });
};

export const rabbitmqVhostStatsList = <ThrowOnError extends boolean = false>(options?: Options<RabbitmqVhostStatsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RabbitmqVhostStatsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rabbitmq-vhost-stats/',
        ...options
    });
};

export const rancherAppsList = <ThrowOnError extends boolean = false>(options?: Options<RancherAppsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherAppsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-apps/',
        ...options
    });
};

export const rancherAppsCreate = <ThrowOnError extends boolean = false>(options: Options<RancherAppsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherAppsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-apps/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherAppsDestroy = <ThrowOnError extends boolean = false>(options: Options<RancherAppsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RancherAppsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-apps/{uuid}/',
        ...options
    });
};

export const rancherAppsRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherAppsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherAppsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-apps/{uuid}/',
        ...options
    });
};

export const rancherAppsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherAppsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RancherAppsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-apps/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherAppsUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherAppsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherAppsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-apps/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherAppsPull = <ThrowOnError extends boolean = false>(options: Options<RancherAppsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-apps/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const rancherAppsUnlink = <ThrowOnError extends boolean = false>(options: Options<RancherAppsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-apps/{uuid}/unlink/',
        ...options
    });
};

export const rancherCatalogsList = <ThrowOnError extends boolean = false>(options?: Options<RancherCatalogsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherCatalogsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-catalogs/',
        ...options
    });
};

export const rancherCatalogsCreate = <ThrowOnError extends boolean = false>(options: Options<RancherCatalogsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherCatalogsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-catalogs/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherCatalogsDestroy = <ThrowOnError extends boolean = false>(options: Options<RancherCatalogsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RancherCatalogsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-catalogs/{uuid}/',
        ...options
    });
};

export const rancherCatalogsRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherCatalogsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherCatalogsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-catalogs/{uuid}/',
        ...options
    });
};

export const rancherCatalogsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherCatalogsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RancherCatalogsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-catalogs/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherCatalogsUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherCatalogsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherCatalogsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-catalogs/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherCatalogsRefresh = <ThrowOnError extends boolean = false>(options: Options<RancherCatalogsRefreshData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherCatalogsRefreshResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-catalogs/{uuid}/refresh/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherClusterTemplatesList = <ThrowOnError extends boolean = false>(options?: Options<RancherClusterTemplatesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherClusterTemplatesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-cluster-templates/',
        ...options
    });
};

export const rancherClusterTemplatesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherClusterTemplatesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherClusterTemplatesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-cluster-templates/{uuid}/',
        ...options
    });
};

export const rancherClustersList = <ThrowOnError extends boolean = false>(options?: Options<RancherClustersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherClustersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-clusters/',
        ...options
    });
};

export const rancherClustersCreate = <ThrowOnError extends boolean = false>(options: Options<RancherClustersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherClustersCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-clusters/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherClustersDestroy = <ThrowOnError extends boolean = false>(options: Options<RancherClustersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RancherClustersDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/',
        ...options
    });
};

export const rancherClustersRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherClustersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherClustersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/',
        ...options
    });
};

export const rancherClustersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherClustersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RancherClustersPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherClustersUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherClustersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherClustersUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherClustersCreateManagementSecurityGroup = <ThrowOnError extends boolean = false>(options: Options<RancherClustersCreateManagementSecurityGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherClustersCreateManagementSecurityGroupResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/create_management_security_group/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherClustersImportYaml = <ThrowOnError extends boolean = false>(options: Options<RancherClustersImportYamlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherClustersImportYamlResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/import_yaml/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns kubeconfig file for the cluster.
 */
export const rancherClustersKubeconfigFileRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherClustersKubeconfigFileRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherClustersKubeconfigFileRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/kubeconfig_file/',
        ...options
    });
};

export const rancherClustersPull = <ThrowOnError extends boolean = false>(options: Options<RancherClustersPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const rancherClustersUnlink = <ThrowOnError extends boolean = false>(options: Options<RancherClustersUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-clusters/{uuid}/unlink/',
        ...options
    });
};

export const rancherHpasList = <ThrowOnError extends boolean = false>(options?: Options<RancherHpasListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherHpasListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-hpas/',
        ...options
    });
};

export const rancherHpasCreate = <ThrowOnError extends boolean = false>(options: Options<RancherHpasCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherHpasCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-hpas/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherHpasDestroy = <ThrowOnError extends boolean = false>(options: Options<RancherHpasDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RancherHpasDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-hpas/{uuid}/',
        ...options
    });
};

export const rancherHpasRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherHpasRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherHpasRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-hpas/{uuid}/',
        ...options
    });
};

export const rancherHpasPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherHpasPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RancherHpasPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-hpas/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherHpasUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherHpasUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherHpasUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-hpas/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherHpasPull = <ThrowOnError extends boolean = false>(options: Options<RancherHpasPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-hpas/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const rancherHpasUnlink = <ThrowOnError extends boolean = false>(options: Options<RancherHpasUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-hpas/{uuid}/unlink/',
        ...options
    });
};

export const rancherHpasYamlRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherHpasYamlRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherHpasYamlRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-hpas/{uuid}/yaml/',
        ...options
    });
};

export const rancherHpasYamlUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherHpasYamlUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherHpasYamlUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-hpas/{uuid}/yaml/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherIngressesList = <ThrowOnError extends boolean = false>(options?: Options<RancherIngressesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherIngressesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-ingresses/',
        ...options
    });
};

export const rancherIngressesCreate = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherIngressesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-ingresses/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherIngressesDestroy = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RancherIngressesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-ingresses/{uuid}/',
        ...options
    });
};

export const rancherIngressesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherIngressesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-ingresses/{uuid}/',
        ...options
    });
};

export const rancherIngressesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RancherIngressesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-ingresses/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherIngressesUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherIngressesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-ingresses/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherIngressesPull = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-ingresses/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const rancherIngressesUnlink = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-ingresses/{uuid}/unlink/',
        ...options
    });
};

export const rancherIngressesYamlRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesYamlRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherIngressesYamlRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-ingresses/{uuid}/yaml/',
        ...options
    });
};

export const rancherIngressesYamlUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherIngressesYamlUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherIngressesYamlUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-ingresses/{uuid}/yaml/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherNamespacesList = <ThrowOnError extends boolean = false>(options?: Options<RancherNamespacesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherNamespacesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-namespaces/',
        ...options
    });
};

export const rancherNamespacesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherNamespacesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherNamespacesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-namespaces/{uuid}/',
        ...options
    });
};

export const rancherNodesList = <ThrowOnError extends boolean = false>(options?: Options<RancherNodesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherNodesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-nodes/',
        ...options
    });
};

export const rancherNodesCreate = <ThrowOnError extends boolean = false>(options: Options<RancherNodesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherNodesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-nodes/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherNodesDestroy = <ThrowOnError extends boolean = false>(options: Options<RancherNodesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RancherNodesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-nodes/{uuid}/',
        ...options
    });
};

export const rancherNodesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherNodesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherNodesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-nodes/{uuid}/',
        ...options
    });
};

/**
 * Returns console URL for the node.
 */
export const rancherNodesConsoleRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherNodesConsoleRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherNodesConsoleRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-nodes/{uuid}/console/',
        ...options
    });
};

/**
 * Returns console log for the node.
 */
export const rancherNodesConsoleLogRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherNodesConsoleLogRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherNodesConsoleLogRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-nodes/{uuid}/console_log/',
        ...options
    });
};

/**
 * Links node to OpenStack instance.
 */
export const rancherNodesLinkOpenstack = <ThrowOnError extends boolean = false>(options: Options<RancherNodesLinkOpenstackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-nodes/{uuid}/link_openstack/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherNodesPull = <ThrowOnError extends boolean = false>(options: Options<RancherNodesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-nodes/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const rancherNodesUnlink = <ThrowOnError extends boolean = false>(options: Options<RancherNodesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-nodes/{uuid}/unlink/',
        ...options
    });
};

/**
 * Unlinks node from OpenStack instance.
 */
export const rancherNodesUnlinkOpenstack = <ThrowOnError extends boolean = false>(options: Options<RancherNodesUnlinkOpenstackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-nodes/{uuid}/unlink_openstack/',
        ...options
    });
};

export const rancherProjectsList = <ThrowOnError extends boolean = false>(options?: Options<RancherProjectsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherProjectsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-projects/',
        ...options
    });
};

export const rancherProjectsRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherProjectsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherProjectsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-projects/{uuid}/',
        ...options
    });
};

/**
 * Returns project's secrets.
 */
export const rancherProjectsSecretsRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherProjectsSecretsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherProjectsSecretsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-projects/{uuid}/secrets/',
        ...options
    });
};

export const rancherServicesList = <ThrowOnError extends boolean = false>(options?: Options<RancherServicesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherServicesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-services/',
        ...options
    });
};

export const rancherServicesCreate = <ThrowOnError extends boolean = false>(options: Options<RancherServicesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherServicesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-services/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherServicesDestroy = <ThrowOnError extends boolean = false>(options: Options<RancherServicesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RancherServicesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-services/{uuid}/',
        ...options
    });
};

export const rancherServicesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherServicesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherServicesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-services/{uuid}/',
        ...options
    });
};

export const rancherServicesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherServicesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RancherServicesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-services/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherServicesUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherServicesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherServicesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-services/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherServicesPull = <ThrowOnError extends boolean = false>(options: Options<RancherServicesPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-services/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const rancherServicesUnlink = <ThrowOnError extends boolean = false>(options: Options<RancherServicesUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-services/{uuid}/unlink/',
        ...options
    });
};

export const rancherServicesYamlRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherServicesYamlRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherServicesYamlRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-services/{uuid}/yaml/',
        ...options
    });
};

export const rancherServicesYamlUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherServicesYamlUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherServicesYamlUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-services/{uuid}/yaml/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherTemplateVersionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherTemplateVersionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherTemplateVersionsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-template-versions/{template_uuid}/{version}/',
        ...options
    });
};

export const rancherTemplatesList = <ThrowOnError extends boolean = false>(options?: Options<RancherTemplatesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherTemplatesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-templates/',
        ...options
    });
};

export const rancherTemplatesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherTemplatesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherTemplatesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-templates/{uuid}/',
        ...options
    });
};

export const rancherUsersList = <ThrowOnError extends boolean = false>(options?: Options<RancherUsersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherUsersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-users/',
        ...options
    });
};

export const rancherUsersRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherUsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherUsersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-users/{uuid}/',
        ...options
    });
};

export const rancherWorkloadsList = <ThrowOnError extends boolean = false>(options?: Options<RancherWorkloadsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RancherWorkloadsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-workloads/',
        ...options
    });
};

export const rancherWorkloadsCreate = <ThrowOnError extends boolean = false>(options: Options<RancherWorkloadsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RancherWorkloadsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-workloads/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherWorkloadsDestroy = <ThrowOnError extends boolean = false>(options: Options<RancherWorkloadsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RancherWorkloadsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-workloads/{uuid}/',
        ...options
    });
};

export const rancherWorkloadsRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherWorkloadsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherWorkloadsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-workloads/{uuid}/',
        ...options
    });
};

export const rancherWorkloadsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherWorkloadsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RancherWorkloadsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-workloads/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherWorkloadsUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherWorkloadsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherWorkloadsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-workloads/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rancherWorkloadsRedeploy = <ThrowOnError extends boolean = false>(options: Options<RancherWorkloadsRedeployData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-workloads/{uuid}/redeploy/',
        ...options
    });
};

export const rancherWorkloadsYamlRetrieve = <ThrowOnError extends boolean = false>(options: Options<RancherWorkloadsYamlRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RancherWorkloadsYamlRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-workloads/{uuid}/yaml/',
        ...options
    });
};

export const rancherWorkloadsYamlUpdate = <ThrowOnError extends boolean = false>(options: Options<RancherWorkloadsYamlUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RancherWorkloadsYamlUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/rancher-workloads/{uuid}/yaml/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Allows to pull user details from remote eduTEAMS instance.
 */
export const remoteEduteams = <ThrowOnError extends boolean = false>(options: Options<RemoteEduteamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteEduteamsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-eduteams/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cancel termination order
 */
export const remoteWaldurApiCancelTermination = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiCancelTerminationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-waldur-api/cancel_termination/{uuid}',
        ...options
    });
};

/**
 * Create local offering from remote
 */
export const remoteWaldurApiImportOffering = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiImportOfferingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiImportOfferingResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-waldur-api/import_offering/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const remoteWaldurApiPullOfferingDetails = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPullOfferingDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-waldur-api/pull_offering_details/{uuid}/',
        ...options
    });
};

export const remoteWaldurApiPullOfferingInvoices = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPullOfferingInvoicesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-waldur-api/pull_offering_invoices/{uuid}/',
        ...options
    });
};

export const remoteWaldurApiPullOfferingOrders = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPullOfferingOrdersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-waldur-api/pull_offering_orders/{uuid}/',
        ...options
    });
};

export const remoteWaldurApiPullOfferingResources = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPullOfferingResourcesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-waldur-api/pull_offering_resources/{uuid}/',
        ...options
    });
};

export const remoteWaldurApiPullOfferingRobotAccounts = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPullOfferingRobotAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-waldur-api/pull_offering_robot_accounts/{uuid}/',
        ...options
    });
};

export const remoteWaldurApiPullOfferingUsage = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPullOfferingUsageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-waldur-api/pull_offering_usage/{uuid}/',
        ...options
    });
};

export const remoteWaldurApiPullOfferingUsers = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPullOfferingUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-waldur-api/pull_offering_users/{uuid}/',
        ...options
    });
};

/**
 * Schedule order pull task
 */
export const remoteWaldurApiPullOrder = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPullOrderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-waldur-api/pull_order/{uuid}',
        ...options
    });
};

export const remoteWaldurApiPushProjectData = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiPushProjectDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-waldur-api/push_project_data/{uuid}/',
        ...options
    });
};

/**
 * List remote marketplace categories
 */
export const remoteWaldurApiRemoteCategories = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiRemoteCategoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiRemoteCategoriesResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-waldur-api/remote_categories/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List remote customers owned by current user
 */
export const remoteWaldurApiRemoteCustomers = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiRemoteCustomersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiRemoteCustomersResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-waldur-api/remote_customers/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List remote importable offerings for particular customer
 */
export const remoteWaldurApiSharedOfferings = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiSharedOfferingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteWaldurApiSharedOfferingsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-waldur-api/shared_offerings/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const remoteWaldurApiSyncResource = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiSyncResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-waldur-api/sync_resource/{uuid}/',
        ...options
    });
};

export const remoteWaldurApiSyncResourceProjectPermissions = <ThrowOnError extends boolean = false>(options: Options<RemoteWaldurApiSyncResourceProjectPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/remote-waldur-api/sync_resource_project_permissions/{uuid}/',
        ...options
    });
};

export const rolesList = <ThrowOnError extends boolean = false>(options?: Options<RolesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RolesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/roles/',
        ...options
    });
};

export const rolesCreate = <ThrowOnError extends boolean = false>(options: Options<RolesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RolesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/roles/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rolesDestroy = <ThrowOnError extends boolean = false>(options: Options<RolesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RolesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/roles/{uuid}/',
        ...options
    });
};

export const rolesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RolesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RolesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/roles/{uuid}/',
        ...options
    });
};

export const rolesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RolesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RolesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/roles/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rolesUpdate = <ThrowOnError extends boolean = false>(options: Options<RolesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RolesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/roles/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const rolesDisable = <ThrowOnError extends boolean = false>(options: Options<RolesDisableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/roles/{uuid}/disable/',
        ...options
    });
};

export const rolesEnable = <ThrowOnError extends boolean = false>(options: Options<RolesEnableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/roles/{uuid}/enable/',
        ...options
    });
};

export const rolesUpdateDescriptionsUpdate = <ThrowOnError extends boolean = false>(options: Options<RolesUpdateDescriptionsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RolesUpdateDescriptionsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/roles/{uuid}/update_descriptions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const serviceSettingsList = <ThrowOnError extends boolean = false>(options?: Options<ServiceSettingsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ServiceSettingsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/service-settings/',
        ...options
    });
};

export const serviceSettingsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ServiceSettingsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ServiceSettingsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/service-settings/{uuid}/',
        ...options
    });
};

export const slurmAllocationUserUsageList = <ThrowOnError extends boolean = false>(options?: Options<SlurmAllocationUserUsageListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SlurmAllocationUserUsageListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-allocation-user-usage/',
        ...options
    });
};

export const slurmAllocationUserUsageRetrieve = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationUserUsageRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SlurmAllocationUserUsageRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-allocation-user-usage/{id}/',
        ...options
    });
};

export const slurmAllocationsList = <ThrowOnError extends boolean = false>(options?: Options<SlurmAllocationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SlurmAllocationsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-allocations/',
        ...options
    });
};

export const slurmAllocationsCreate = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SlurmAllocationsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-allocations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const slurmAllocationsDestroy = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SlurmAllocationsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-allocations/{uuid}/',
        ...options
    });
};

export const slurmAllocationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SlurmAllocationsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-allocations/{uuid}/',
        ...options
    });
};

export const slurmAllocationsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SlurmAllocationsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-allocations/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const slurmAllocationsUpdate = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SlurmAllocationsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-allocations/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const slurmAllocationsPull = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-allocations/{uuid}/pull/',
        ...options
    });
};

export const slurmAllocationsSetLimits = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationsSetLimitsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SlurmAllocationsSetLimitsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-allocations/{uuid}/set_limits/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const slurmAllocationsUnlink = <ThrowOnError extends boolean = false>(options: Options<SlurmAllocationsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-allocations/{uuid}/unlink/',
        ...options
    });
};

export const slurmAssociationsList = <ThrowOnError extends boolean = false>(options?: Options<SlurmAssociationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SlurmAssociationsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-associations/',
        ...options
    });
};

export const slurmAssociationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<SlurmAssociationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SlurmAssociationsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-associations/{uuid}/',
        ...options
    });
};

export const slurmJobsList = <ThrowOnError extends boolean = false>(options?: Options<SlurmJobsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SlurmJobsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-jobs/',
        ...options
    });
};

export const slurmJobsCreate = <ThrowOnError extends boolean = false>(options: Options<SlurmJobsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SlurmJobsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-jobs/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const slurmJobsDestroy = <ThrowOnError extends boolean = false>(options: Options<SlurmJobsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SlurmJobsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-jobs/{uuid}/',
        ...options
    });
};

export const slurmJobsRetrieve = <ThrowOnError extends boolean = false>(options: Options<SlurmJobsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SlurmJobsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-jobs/{uuid}/',
        ...options
    });
};

export const slurmJobsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SlurmJobsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SlurmJobsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-jobs/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const slurmJobsUpdate = <ThrowOnError extends boolean = false>(options: Options<SlurmJobsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SlurmJobsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-jobs/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const slurmJobsPull = <ThrowOnError extends boolean = false>(options: Options<SlurmJobsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-jobs/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const slurmJobsUnlink = <ThrowOnError extends boolean = false>(options: Options<SlurmJobsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/slurm-jobs/{uuid}/unlink/',
        ...options
    });
};

export const supportAttachmentsList = <ThrowOnError extends boolean = false>(options?: Options<SupportAttachmentsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportAttachmentsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-attachments/',
        ...options
    });
};

export const supportAttachmentsCreate = <ThrowOnError extends boolean = false>(options: Options<SupportAttachmentsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportAttachmentsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-attachments/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const supportAttachmentsDestroy = <ThrowOnError extends boolean = false>(options: Options<SupportAttachmentsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SupportAttachmentsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-attachments/{uuid}/',
        ...options
    });
};

export const supportAttachmentsRetrieve = <ThrowOnError extends boolean = false>(options: Options<SupportAttachmentsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SupportAttachmentsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-attachments/{uuid}/',
        ...options
    });
};

export const supportCommentsList = <ThrowOnError extends boolean = false>(options?: Options<SupportCommentsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportCommentsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-comments/',
        ...options
    });
};

export const supportCommentsDestroy = <ThrowOnError extends boolean = false>(options: Options<SupportCommentsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SupportCommentsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-comments/{uuid}/',
        ...options
    });
};

export const supportCommentsRetrieve = <ThrowOnError extends boolean = false>(options: Options<SupportCommentsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SupportCommentsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-comments/{uuid}/',
        ...options
    });
};

export const supportCommentsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SupportCommentsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SupportCommentsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-comments/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const supportCommentsUpdate = <ThrowOnError extends boolean = false>(options: Options<SupportCommentsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SupportCommentsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-comments/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const supportFeedbackAverageReportRetrieve = <ThrowOnError extends boolean = false>(options?: Options<SupportFeedbackAverageReportRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-feedback-average-report/',
        ...options
    });
};

export const supportFeedbackReportRetrieve = <ThrowOnError extends boolean = false>(options?: Options<SupportFeedbackReportRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-feedback-report/',
        ...options
    });
};

export const supportFeedbacksList = <ThrowOnError extends boolean = false>(options?: Options<SupportFeedbacksListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportFeedbacksListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-feedbacks/',
        ...options
    });
};

export const supportFeedbacksCreate = <ThrowOnError extends boolean = false>(options: Options<SupportFeedbacksCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportFeedbacksCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-feedbacks/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const supportFeedbacksRetrieve = <ThrowOnError extends boolean = false>(options: Options<SupportFeedbacksRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SupportFeedbacksRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-feedbacks/{uuid}/',
        ...options
    });
};

export const supportIssuesList = <ThrowOnError extends boolean = false>(options?: Options<SupportIssuesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportIssuesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-issues/',
        ...options
    });
};

export const supportIssuesCreate = <ThrowOnError extends boolean = false>(options: Options<SupportIssuesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportIssuesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-issues/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const supportIssuesDestroy = <ThrowOnError extends boolean = false>(options: Options<SupportIssuesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SupportIssuesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-issues/{uuid}/',
        ...options
    });
};

export const supportIssuesRetrieve = <ThrowOnError extends boolean = false>(options: Options<SupportIssuesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SupportIssuesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-issues/{uuid}/',
        ...options
    });
};

export const supportIssuesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SupportIssuesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SupportIssuesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-issues/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const supportIssuesUpdate = <ThrowOnError extends boolean = false>(options: Options<SupportIssuesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SupportIssuesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-issues/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const supportIssuesComment = <ThrowOnError extends boolean = false>(options: Options<SupportIssuesCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportIssuesCommentResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-issues/{uuid}/comment/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const supportIssuesSync = <ThrowOnError extends boolean = false>(options: Options<SupportIssuesSyncData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportIssuesSyncResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-issues/{uuid}/sync/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const supportJiraWebhook = <ThrowOnError extends boolean = false>(options: Options<SupportJiraWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportJiraWebhookResponse, unknown, ThrowOnError>({
        url: '/api/support-jira-webhook/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const supportPrioritiesList = <ThrowOnError extends boolean = false>(options?: Options<SupportPrioritiesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportPrioritiesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-priorities/',
        ...options
    });
};

export const supportPrioritiesRetrieve = <ThrowOnError extends boolean = false>(options: Options<SupportPrioritiesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SupportPrioritiesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-priorities/{uuid}/',
        ...options
    });
};

export const supportSmaxWebhook = <ThrowOnError extends boolean = false>(options: Options<SupportSmaxWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportSmaxWebhookResponse, unknown, ThrowOnError>({
        url: '/api/support-smax-webhook/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const supportStatisticsRetrieve = <ThrowOnError extends boolean = false>(options?: Options<SupportStatisticsRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportStatisticsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-statistics/',
        ...options
    });
};

export const supportTemplatesList = <ThrowOnError extends boolean = false>(options?: Options<SupportTemplatesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportTemplatesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-templates/',
        ...options
    });
};

export const supportTemplatesCreate = <ThrowOnError extends boolean = false>(options: Options<SupportTemplatesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SupportTemplatesCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-templates/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const supportTemplatesDestroy = <ThrowOnError extends boolean = false>(options: Options<SupportTemplatesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SupportTemplatesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-templates/{uuid}/',
        ...options
    });
};

export const supportTemplatesRetrieve = <ThrowOnError extends boolean = false>(options: Options<SupportTemplatesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SupportTemplatesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-templates/{uuid}/',
        ...options
    });
};

export const supportTemplatesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SupportTemplatesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SupportTemplatesPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-templates/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const supportTemplatesUpdate = <ThrowOnError extends boolean = false>(options: Options<SupportTemplatesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SupportTemplatesUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-templates/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * This view attaches documents to template.
 */
export const supportTemplatesCreateAttachments = <ThrowOnError extends boolean = false>(options: Options<SupportTemplatesCreateAttachmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-templates/{uuid}/create_attachments/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const supportTemplatesDeleteAttachments = <ThrowOnError extends boolean = false>(options: Options<SupportTemplatesDeleteAttachmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-templates/{uuid}/delete_attachments/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const supportUsersList = <ThrowOnError extends boolean = false>(options?: Options<SupportUsersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SupportUsersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-users/',
        ...options
    });
};

export const supportUsersRetrieve = <ThrowOnError extends boolean = false>(options: Options<SupportUsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SupportUsersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/support-users/{uuid}/',
        ...options
    });
};

export const supportZammadWebhook = <ThrowOnError extends boolean = false>(options?: Options<SupportZammadWebhookData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/support-zammad-webhook/',
        ...options
    });
};

/**
 * This view triggers synchronization of issues from backend.
 */
export const syncIssuesRetrieve = <ThrowOnError extends boolean = false>(options?: Options<SyncIssuesRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/sync-issues/',
        ...options
    });
};

/**
 * This view triggers synchronization of issues from backend.
 */
export const syncIssues = <ThrowOnError extends boolean = false>(options?: Options<SyncIssuesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/sync-issues/',
        ...options
    });
};

export const userAgreementsList = <ThrowOnError extends boolean = false>(options?: Options<UserAgreementsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserAgreementsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-agreements/',
        ...options
    });
};

export const userAgreementsCreate = <ThrowOnError extends boolean = false>(options: Options<UserAgreementsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserAgreementsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-agreements/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userAgreementsDestroy = <ThrowOnError extends boolean = false>(options: Options<UserAgreementsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UserAgreementsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-agreements/{uuid}/',
        ...options
    });
};

export const userAgreementsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UserAgreementsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserAgreementsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-agreements/{uuid}/',
        ...options
    });
};

export const userAgreementsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<UserAgreementsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UserAgreementsPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-agreements/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userAgreementsUpdate = <ThrowOnError extends boolean = false>(options: Options<UserAgreementsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UserAgreementsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-agreements/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userGroupInvitationsList = <ThrowOnError extends boolean = false>(options?: Options<UserGroupInvitationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserGroupInvitationsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-group-invitations/',
        ...options
    });
};

export const userGroupInvitationsCreate = <ThrowOnError extends boolean = false>(options: Options<UserGroupInvitationsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserGroupInvitationsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-group-invitations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userGroupInvitationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UserGroupInvitationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGroupInvitationsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-group-invitations/{uuid}/',
        ...options
    });
};

/**
 * Cancel group invitation
 */
export const userGroupInvitationsCancel = <ThrowOnError extends boolean = false>(options: Options<UserGroupInvitationsCancelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-group-invitations/{uuid}/cancel/',
        ...options
    });
};

/**
 * Return projects for group invitation
 */
export const userGroupInvitationsProjectsList = <ThrowOnError extends boolean = false>(options: Options<UserGroupInvitationsProjectsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGroupInvitationsProjectsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-group-invitations/{uuid}/projects/',
        ...options
    });
};

export const userGroupInvitationsSubmitRequest = <ThrowOnError extends boolean = false>(options: Options<UserGroupInvitationsSubmitRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserGroupInvitationsSubmitRequestResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-group-invitations/{uuid}/submit_request/',
        ...options
    });
};

export const userInvitationsList = <ThrowOnError extends boolean = false>(options?: Options<UserInvitationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserInvitationsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-invitations/',
        ...options
    });
};

export const userInvitationsCreate = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserInvitationsCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-invitations/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userInvitationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserInvitationsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-invitations/{uuid}/',
        ...options
    });
};

/**
 * Accept invitation for current user.
 */
export const userInvitationsAccept = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsAcceptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-invitations/{uuid}/accept/',
        ...options
    });
};

export const userInvitationsCancel = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsCancelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-invitations/{uuid}/cancel/',
        ...options
    });
};

export const userInvitationsCheck = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsCheckData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserInvitationsCheckResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-invitations/{uuid}/check/',
        ...options
    });
};

export const userInvitationsDelete = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-invitations/{uuid}/delete/',
        ...options
    });
};

export const userInvitationsDetailsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsDetailsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserInvitationsDetailsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-invitations/{uuid}/details/',
        ...options
    });
};

export const userInvitationsSend = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsSendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-invitations/{uuid}/send/',
        ...options
    });
};

/**
 * For user's convenience invitation approval is performed without authentication.
 * User UUID and invitation UUID is encoded into cryptographically signed token.
 */
export const userInvitationsApprove = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsApproveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-invitations/approve/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * For user's convenience invitation reject action is performed without authentication.
 * User UUID and invitation UUID is encoded into cryptographically signed token.
 */
export const userInvitationsReject = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsRejectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-invitations/reject/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userPermissionRequestsList = <ThrowOnError extends boolean = false>(options?: Options<UserPermissionRequestsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserPermissionRequestsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-permission-requests/',
        ...options
    });
};

export const userPermissionRequestsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UserPermissionRequestsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserPermissionRequestsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-permission-requests/{uuid}/',
        ...options
    });
};

export const userPermissionRequestsApprove = <ThrowOnError extends boolean = false>(options: Options<UserPermissionRequestsApproveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserPermissionRequestsApproveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-permission-requests/{uuid}/approve/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userPermissionRequestsReject = <ThrowOnError extends boolean = false>(options: Options<UserPermissionRequestsRejectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserPermissionRequestsRejectResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-permission-requests/{uuid}/reject/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userPermissionsList = <ThrowOnError extends boolean = false>(options?: Options<UserPermissionsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserPermissionsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-permissions/',
        ...options
    });
};

export const userPermissionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UserPermissionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserPermissionsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/user-permissions/{uuid}/',
        ...options
    });
};

export const usersList = <ThrowOnError extends boolean = false>(options?: Options<UsersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/',
        ...options
    });
};

export const usersCreate = <ThrowOnError extends boolean = false>(options: Options<UsersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const usersMarketplaceChecklistStatsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UsersMarketplaceChecklistStatsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersMarketplaceChecklistStatsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{user_uuid}/marketplace-checklist-stats/',
        ...options
    });
};

export const usersDestroy = <ThrowOnError extends boolean = false>(options: Options<UsersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{uuid}/',
        ...options
    });
};

export const usersRetrieve = <ThrowOnError extends boolean = false>(options: Options<UsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{uuid}/',
        ...options
    });
};

export const usersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersPartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const usersUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cancel email update request
 */
export const usersCancelChangeEmail = <ThrowOnError extends boolean = false>(options: Options<UsersCancelChangeEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{uuid}/cancel_change_email/',
        ...options
    });
};

/**
 * Allows to change email for user.
 */
export const usersChangeEmail = <ThrowOnError extends boolean = false>(options: Options<UsersChangeEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{uuid}/change_email/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Allows staff user to change password for any user.
 */
export const usersChangePassword = <ThrowOnError extends boolean = false>(options: Options<UsersChangePasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{uuid}/change_password/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Pulls remote user data from eduTEAMS.
 */
export const usersPullRemoteUser = <ThrowOnError extends boolean = false>(options: Options<UsersPullRemoteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{uuid}/pull_remote_user/',
        ...options
    });
};

/**
 * Allows to refresh user auth token.
 */
export const usersRefreshToken = <ThrowOnError extends boolean = false>(options: Options<UsersRefreshTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersRefreshTokenResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{uuid}/refresh_token/',
        ...options
    });
};

export const usersTokenRetrieve = <ThrowOnError extends boolean = false>(options: Options<UsersTokenRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersTokenRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/{uuid}/token/',
        ...options
    });
};

/**
 * Confirm email update using code
 */
export const usersConfirmEmail = <ThrowOnError extends boolean = false>(options: Options<UsersConfirmEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/confirm_email/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get current user details, including authentication token.
 */
export const usersMeRetrieve = <ThrowOnError extends boolean = false>(options?: Options<UsersMeRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersMeRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/users/me/',
        ...options
    });
};

/**
 * Retrieve current version of the application and the latest available version from GitHub (if available).
 */
export const versionRetrieve = <ThrowOnError extends boolean = false>(options?: Options<VersionRetrieveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VersionRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/version/',
        ...options
    });
};

export const vmwareClustersList = <ThrowOnError extends boolean = false>(options?: Options<VmwareClustersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VmwareClustersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-clusters/',
        ...options
    });
};

export const vmwareClustersRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareClustersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareClustersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-clusters/{uuid}/',
        ...options
    });
};

export const vmwareDatastoresList = <ThrowOnError extends boolean = false>(options?: Options<VmwareDatastoresListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VmwareDatastoresListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-datastores/',
        ...options
    });
};

export const vmwareDatastoresRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareDatastoresRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareDatastoresRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-datastores/{uuid}/',
        ...options
    });
};

export const vmwareDisksList = <ThrowOnError extends boolean = false>(options?: Options<VmwareDisksListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VmwareDisksListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-disks/',
        ...options
    });
};

export const vmwareDisksDestroy = <ThrowOnError extends boolean = false>(options: Options<VmwareDisksDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<VmwareDisksDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-disks/{uuid}/',
        ...options
    });
};

export const vmwareDisksRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareDisksRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareDisksRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-disks/{uuid}/',
        ...options
    });
};

/**
 * Increase disk capacity
 */
export const vmwareDisksExtend = <ThrowOnError extends boolean = false>(options: Options<VmwareDisksExtendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareDisksExtendResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-disks/{uuid}/extend/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const vmwareDisksPull = <ThrowOnError extends boolean = false>(options: Options<VmwareDisksPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-disks/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const vmwareDisksUnlink = <ThrowOnError extends boolean = false>(options: Options<VmwareDisksUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-disks/{uuid}/unlink/',
        ...options
    });
};

export const vmwareFoldersList = <ThrowOnError extends boolean = false>(options?: Options<VmwareFoldersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VmwareFoldersListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-folders/',
        ...options
    });
};

export const vmwareFoldersRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareFoldersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareFoldersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-folders/{uuid}/',
        ...options
    });
};

export const vmwareLimitsRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareLimitsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareLimitsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-limits/{uuid}/',
        ...options
    });
};

export const vmwareNetworksList = <ThrowOnError extends boolean = false>(options?: Options<VmwareNetworksListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VmwareNetworksListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-networks/',
        ...options
    });
};

export const vmwareNetworksRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareNetworksRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareNetworksRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-networks/{uuid}/',
        ...options
    });
};

export const vmwarePortsList = <ThrowOnError extends boolean = false>(options?: Options<VmwarePortsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VmwarePortsListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-ports/',
        ...options
    });
};

export const vmwarePortsDestroy = <ThrowOnError extends boolean = false>(options: Options<VmwarePortsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<VmwarePortsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-ports/{uuid}/',
        ...options
    });
};

export const vmwarePortsRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwarePortsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwarePortsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-ports/{uuid}/',
        ...options
    });
};

export const vmwarePortsPull = <ThrowOnError extends boolean = false>(options: Options<VmwarePortsPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-ports/{uuid}/pull/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const vmwarePortsUnlink = <ThrowOnError extends boolean = false>(options: Options<VmwarePortsUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-ports/{uuid}/unlink/',
        ...options
    });
};

export const vmwareTemplatesList = <ThrowOnError extends boolean = false>(options?: Options<VmwareTemplatesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VmwareTemplatesListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-templates/',
        ...options
    });
};

export const vmwareTemplatesRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareTemplatesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareTemplatesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-templates/{uuid}/',
        ...options
    });
};

export const vmwareVirtualMachineList = <ThrowOnError extends boolean = false>(options?: Options<VmwareVirtualMachineListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VmwareVirtualMachineListResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/',
        ...options
    });
};

export const vmwareVirtualMachineCreate = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareVirtualMachineCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const vmwareVirtualMachineDestroy = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<VmwareVirtualMachineDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/',
        ...options
    });
};

export const vmwareVirtualMachineRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareVirtualMachineRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/',
        ...options
    });
};

export const vmwareVirtualMachinePartialUpdate = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachinePartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<VmwareVirtualMachinePartialUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const vmwareVirtualMachineUpdate = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<VmwareVirtualMachineUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * This endpoint provides access to Virtual Machine Remote Console aka VMRC.
 */
export const vmwareVirtualMachineConsoleRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineConsoleRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareVirtualMachineConsoleRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/console/',
        ...options
    });
};

export const vmwareVirtualMachineCreateDisk = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineCreateDiskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareVirtualMachineCreateDiskResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/create_disk/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const vmwareVirtualMachineCreatePort = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineCreatePortData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VmwareVirtualMachineCreatePortResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/create_port/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const vmwareVirtualMachinePull = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachinePullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/pull/',
        ...options
    });
};

export const vmwareVirtualMachineRebootGuest = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineRebootGuestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/reboot_guest/',
        ...options
    });
};

export const vmwareVirtualMachineReset = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineResetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/reset/',
        ...options
    });
};

export const vmwareVirtualMachineShutdownGuest = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineShutdownGuestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/shutdown_guest/',
        ...options
    });
};

export const vmwareVirtualMachineStart = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/start/',
        ...options
    });
};

export const vmwareVirtualMachineStop = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/stop/',
        ...options
    });
};

export const vmwareVirtualMachineSuspend = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineSuspendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/suspend/',
        ...options
    });
};

/**
 * Delete resource from the database without scheduling operations on backend
 * and without checking current state of the resource. It is intended to be used
 * for removing resource stuck in transitioning state.
 */
export const vmwareVirtualMachineUnlink = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineUnlinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/unlink/',
        ...options
    });
};

/**
 * This endpoint provides access to HTML Console aka WMKS.
 */
export const vmwareVirtualMachineWebConsoleRetrieve = <ThrowOnError extends boolean = false>(options: Options<VmwareVirtualMachineWebConsoleRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VmwareVirtualMachineWebConsoleRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/vmware-virtual-machine/{uuid}/web_console/',
        ...options
    });
};